### YamlMime:UniversalReference
items:
  - uid: '@azure/storage-queue.QueueClient'
    name: QueueClient
    fullName: QueueClient
    children:
      - '@azure/storage-queue.QueueClient.accountName'
      - '@azure/storage-queue.QueueClient.clearMessages'
      - '@azure/storage-queue.QueueClient.create'
      - '@azure/storage-queue.QueueClient.createIfNotExists'
      - '@azure/storage-queue.QueueClient.delete'
      - '@azure/storage-queue.QueueClient.deleteIfExists'
      - '@azure/storage-queue.QueueClient.deleteMessage'
      - '@azure/storage-queue.QueueClient.exists'
      - '@azure/storage-queue.QueueClient.getAccessPolicy'
      - '@azure/storage-queue.QueueClient.getProperties'
      - '@azure/storage-queue.QueueClient.name'
      - '@azure/storage-queue.QueueClient.peekMessages'
      - '@azure/storage-queue.QueueClient.constructor_2'
      - '@azure/storage-queue.QueueClient.constructor_1'
      - '@azure/storage-queue.QueueClient.constructor'
      - '@azure/storage-queue.QueueClient.receiveMessages'
      - '@azure/storage-queue.QueueClient.sendMessage'
      - '@azure/storage-queue.QueueClient.setAccessPolicy'
      - '@azure/storage-queue.QueueClient.setMetadata'
      - '@azure/storage-queue.QueueClient.updateMessage'
      - '@azure/storage-queue.QueueClient.url'
    langs:
      - typeScript
    type: class
    summary: >-
      A QueueClient represents a URL to an Azure Storage Queue's messages
      allowing you to manipulate its messages.
    extends:
      name: '@azure/storage-queue.StorageClient'
    package: '@azure/storage-queue'
  - uid: '@azure/storage-queue.QueueClient.accountName'
    name: accountName
    fullName: accountName
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'accountName: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/storage-queue'
  - uid: '@azure/storage-queue.QueueClient.clearMessages'
    name: clearMessages(QueueClearMessagesOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: Clear deletes all messages from a queue.
    syntax:
      content: 'function clearMessages(options?: QueueClearMessagesOptions)'
      parameters:
        - id: options
          type:
            - '@azure/storage-queue.QueueClearMessagesOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-queue.QueueClearMessagesResponse>
        description: Response data for the clear messages operation.
    package: '@azure/storage-queue'
  - uid: '@azure/storage-queue.QueueClient.create'
    name: create(QueueCreateOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: Creates a new queue under the specified account.
    syntax:
      content: 'function create(options?: QueueCreateOptions)'
      parameters:
        - id: options
          type:
            - '@azure/storage-queue.QueueCreateOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-queue.QueueCreateResponse>
        description: Response data for the Queue create operation.
    package: '@azure/storage-queue'
  - uid: '@azure/storage-queue.QueueClient.createIfNotExists'
    name: createIfNotExists(QueueCreateOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates a new queue under the specified account if it doesn't already
      exist.

      If the queue already exists, it is not changed.
    syntax:
      content: 'function createIfNotExists(options?: QueueCreateOptions)'
      parameters:
        - id: options
          type:
            - '@azure/storage-queue.QueueCreateOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-queue.QueueCreateIfNotExistsResponse>
        description: ''
    package: '@azure/storage-queue'
  - uid: '@azure/storage-queue.QueueClient.delete'
    name: delete(QueueDeleteOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: Deletes the specified queue permanently.
    syntax:
      content: 'function delete(options?: QueueDeleteOptions)'
      parameters:
        - id: options
          type:
            - '@azure/storage-queue.QueueDeleteOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-queue.QueueDeleteResponse>
        description: Response data for the Queue delete operation.
    package: '@azure/storage-queue'
  - uid: '@azure/storage-queue.QueueClient.deleteIfExists'
    name: deleteIfExists(QueueDeleteOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: Deletes the specified queue permanently if it exists.
    syntax:
      content: 'function deleteIfExists(options?: QueueDeleteOptions)'
      parameters:
        - id: options
          type:
            - '@azure/storage-queue.QueueDeleteOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-queue.QueueDeleteIfExistsResponse>
        description: ''
    package: '@azure/storage-queue'
  - uid: '@azure/storage-queue.QueueClient.deleteMessage'
    name: 'deleteMessage(string, string, QueueDeleteMessageOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: deleteMessage permanently removes the specified message from its queue.
    syntax:
      content: >-
        function deleteMessage(messageId: string, popReceipt: string, options?:
        QueueDeleteMessageOptions)
      parameters:
        - id: messageId
          type:
            - string
          description: Id of the message.
        - id: popReceipt
          type:
            - string
          description: >-
            A valid pop receipt value returned from an earlier call to the
            receive messages or update message operation.
        - id: options
          type:
            - '@azure/storage-queue.QueueDeleteMessageOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-queue.QueueDeleteMessageResponse>
        description: Response data for the delete message operation.
    package: '@azure/storage-queue'
  - uid: '@azure/storage-queue.QueueClient.exists'
    name: exists(QueueExistsOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Returns true if the specified queue exists; false otherwise.

      NOTE: use this function with care since an existing queue might be deleted
      by other clients or

      applications. Vice versa new queues might be added by other clients or
      applications after this

      function completes.
    syntax:
      content: 'function exists(options?: QueueExistsOptions)'
      parameters:
        - id: options
          type:
            - '@azure/storage-queue.QueueExistsOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<boolean>
        description: ''
    package: '@azure/storage-queue'
  - uid: '@azure/storage-queue.QueueClient.getAccessPolicy'
    name: getAccessPolicy(QueueGetAccessPolicyOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Gets details about any stored access policies specified on the queue that
      may be used with Shared Access Signatures.

      WARNING: JavaScript Date will potential lost precision when parsing start
      and expiry string.

      For example, new Date("2018-12-31T03:44:23.8827891Z").toISOString() will
      get "2018-12-31T03:44:23.882Z".
    syntax:
      content: 'function getAccessPolicy(options?: QueueGetAccessPolicyOptions)'
      parameters:
        - id: options
          type:
            - '@azure/storage-queue.QueueGetAccessPolicyOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-queue.QueueGetAccessPolicyResponse>
        description: Response data for the Queue get access policy operation.
    package: '@azure/storage-queue'
  - uid: '@azure/storage-queue.QueueClient.getProperties'
    name: getProperties(QueueGetPropertiesOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Gets all user-defined metadata and system properties for the specified
      queue. Metadata is associated with the queue as name-values pairs.
    syntax:
      content: 'function getProperties(options?: QueueGetPropertiesOptions)'
      parameters:
        - id: options
          type:
            - '@azure/storage-queue.QueueGetPropertiesOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-queue.QueueGetPropertiesResponse>
        description: Response data for the Queue get properties operation.
    package: '@azure/storage-queue'
  - uid: '@azure/storage-queue.QueueClient.name'
    name: name
    fullName: name
    children: []
    langs:
      - typeScript
    type: property
    summary: The name of the queue.
    syntax:
      content: string name
      return:
        type:
          - string
        description: ''
    package: '@azure/storage-queue'
  - uid: '@azure/storage-queue.QueueClient.peekMessages'
    name: peekMessages(QueuePeekMessagesOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      peekMessages retrieves one or more messages from the front of the queue
      but does not alter the visibility of the message.
    syntax:
      content: 'function peekMessages(options?: QueuePeekMessagesOptions)'
      parameters:
        - id: options
          type:
            - '@azure/storage-queue.QueuePeekMessagesOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-queue.QueuePeekMessagesResponse>
        description: Response data for the peek messages operation.
    package: '@azure/storage-queue'
  - uid: '@azure/storage-queue.QueueClient.constructor_2'
    name: 'QueueClient(string, Pipeline)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Creates an instance of QueueClient.
    syntax:
      content: 'new QueueClient(url: string, pipeline: Pipeline)'
      parameters:
        - id: url
          type:
            - string
          description: |-
            A URL string pointing to Azure Storage queue, such as
                                "https://myaccount.queue.core.windows.net/myqueue". You can
                                append a SAS if using AnonymousCredential, such as
                                "https://myaccount.queue.core.windows.net/myqueue?sasString".
        - id: pipeline
          type:
            - '@azure/storage-queue.Pipeline'
          description: |-
            Call newPipeline() to create a default
                                       pipeline, or provide a customized pipeline.
    package: '@azure/storage-queue'
  - uid: '@azure/storage-queue.QueueClient.constructor_1'
    name: >-
      QueueClient(string, StorageSharedKeyCredential | AnonymousCredential |
      TokenCredential, StoragePipelineOptions)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Creates an instance of QueueClient.
    syntax:
      content: >-
        new QueueClient(url: string, credential?: StorageSharedKeyCredential |
        AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)
      parameters:
        - id: url
          type:
            - string
          description: |-
            A URL string pointing to Azure Storage queue, such as
                                "https://myaccount.queue.core.windows.net/myqueue". You can
                                append a SAS if using AnonymousCredential, such as
                                "https://myaccount.queue.core.windows.net/myqueue?sasString".
        - id: credential
          type:
            - >-
              @azure/storage-queue.StorageSharedKeyCredential |
              @azure/storage-queue.AnonymousCredential | TokenCredential
          description: >-
            Such as AnonymousCredential, StorageSharedKeyCredential or any
            credential from the @azure/identity package to authenticate requests
            to the service. You can also provide an object that implements the
            TokenCredential interface. If not specified, AnonymousCredential is
            used.
          optional: true
        - id: options
          type:
            - '@azure/storage-queue.StoragePipelineOptions'
          description: ''
          optional: true
    package: '@azure/storage-queue'
  - uid: '@azure/storage-queue.QueueClient.constructor'
    name: 'QueueClient(string, string, StoragePipelineOptions)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Creates an instance of QueueClient.
    syntax:
      content: >-
        new QueueClient(connectionString: string, queueName: string, options?:
        StoragePipelineOptions)
      parameters:
        - id: connectionString
          type:
            - string
          description: >-
            Account connection string or a SAS connection string of an Azure
            storage account.
                                             [ Note - Account connection string can only be used in NODE.JS runtime. ]
                                             Account connection string example -
                                             `DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=accountKey;EndpointSuffix=core.windows.net`
                                             SAS connection string example -
                                             `BlobEndpoint=https://myaccount.blob.core.windows.net/;QueueEndpoint=https://myaccount.queue.core.windows.net/;FileEndpoint=https://myaccount.file.core.windows.net/;TableEndpoint=https://myaccount.table.core.windows.net/;SharedAccessSignature=sasString`
        - id: queueName
          type:
            - string
          description: Queue name.
        - id: options
          type:
            - '@azure/storage-queue.StoragePipelineOptions'
          description: ''
          optional: true
    package: '@azure/storage-queue'
  - uid: '@azure/storage-queue.QueueClient.receiveMessages'
    name: receiveMessages(QueueReceiveMessageOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      receiveMessages retrieves one or more messages from the front of the
      queue.
    syntax:
      content: 'function receiveMessages(options?: QueueReceiveMessageOptions)'
      parameters:
        - id: options
          type:
            - '@azure/storage-queue.QueueReceiveMessageOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-queue.QueueReceiveMessageResponse>
        description: Response data for the receive messages operation.
    package: '@azure/storage-queue'
  - uid: '@azure/storage-queue.QueueClient.sendMessage'
    name: 'sendMessage(string, QueueSendMessageOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      sendMessage adds a new message to the back of a queue. The visibility
      timeout specifies how long

      the message should be invisible to Dequeue and Peek operations.

      The message content is up to 64KB in size, and must be in a format that
      can be included in an XML request with UTF-8 encoding.

      To include markup in the message, the contents of the message must either
      be XML-escaped or Base64-encode.
    syntax:
      content: >-
        function sendMessage(messageText: string, options?:
        QueueSendMessageOptions)
      parameters:
        - id: messageText
          type:
            - string
          description: Text of the message to send
        - id: options
          type:
            - '@azure/storage-queue.QueueSendMessageOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-queue.QueueSendMessageResponse>
        description: Response data for the send messages operation.
    package: '@azure/storage-queue'
  - uid: '@azure/storage-queue.QueueClient.setAccessPolicy'
    name: 'setAccessPolicy(SignedIdentifier[], QueueSetAccessPolicyOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Sets stored access policies for the queue that may be used with Shared
      Access Signatures.
    syntax:
      content: >-
        function setAccessPolicy(queueAcl?: SignedIdentifier[], options?:
        QueueSetAccessPolicyOptions)
      parameters:
        - id: queueAcl
          type:
            - '@azure/storage-queue.SignedIdentifier[]'
          description: ''
          optional: true
        - id: options
          type:
            - '@azure/storage-queue.QueueSetAccessPolicyOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-queue.QueueSetAccessPolicyResponse>
        description: Response data for the Queue set access policy operation.
    package: '@azure/storage-queue'
  - uid: '@azure/storage-queue.QueueClient.setMetadata'
    name: 'setMetadata(Metadata, QueueSetMetadataOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Sets one or more user-defined name-value pairs for the specified queue.

      If no option provided, or no metadata defined in the option parameter, the
      queue

      metadata will be removed.
    syntax:
      content: >-
        function setMetadata(metadata?: Metadata, options?:
        QueueSetMetadataOptions)
      parameters:
        - id: metadata
          type:
            - '@azure/storage-queue.Metadata'
          description: ''
          optional: true
        - id: options
          type:
            - '@azure/storage-queue.QueueSetMetadataOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-queue.QueueSetMetadataResponse>
        description: Response data for the Queue set metadata operation.
    package: '@azure/storage-queue'
  - uid: '@azure/storage-queue.QueueClient.updateMessage'
    name: 'updateMessage(string, string, string, number, QueueUpdateMessageOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Update changes a message's visibility timeout and contents.

      The message content is up to 64KB in size, and must be in a format that
      can be included in an XML request with UTF-8 encoding.

      To include markup in the message, the contents of the message must either
      be XML-escaped or Base64-encode.
    syntax:
      content: >-
        function updateMessage(messageId: string, popReceipt: string, message:
        string, visibilityTimeout?: number, options?: QueueUpdateMessageOptions)
      parameters:
        - id: messageId
          type:
            - string
          description: Id of the message
        - id: popReceipt
          type:
            - string
          description: >-
            A valid pop receipt value returned from an earlier call to the
            receive messages or update message operation.
        - id: message
          type:
            - string
          description: Message to update.
        - id: visibilityTimeout
          type:
            - number
          description: |-
            Specifies the new visibility timeout value, in seconds,
                                              relative to server time. The new value must be larger than or equal to 0,
                                              and cannot be larger than 7 days. The visibility timeout of a message cannot
                                              be set to a value later than the expiry time.
                                              A message can be updated until it has been deleted or has expired.
          optional: true
        - id: options
          type:
            - '@azure/storage-queue.QueueUpdateMessageOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-queue.QueueUpdateMessageResponse>
        description: Response data for the update message operation.
    package: '@azure/storage-queue'
  - uid: '@azure/storage-queue.QueueClient.url'
    name: url
    fullName: url
    children: []
    langs:
      - typeScript
    type: property
    summary: URL string value.
    syntax:
      content: 'url: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/storage-queue'
references:
  - uid: '@azure/storage-queue.StorageClient'
    name: StorageClient
    spec.typeScript:
      - name: StorageClient
        fullName: StorageClient
        uid: '@azure/storage-queue.StorageClient'
  - uid: '@azure/storage-queue.StoragePipelineOptions'
    name: StoragePipelineOptions
    spec.typeScript:
      - name: StoragePipelineOptions
        fullName: StoragePipelineOptions
        uid: '@azure/storage-queue.StoragePipelineOptions'
  - uid: >-
      @azure/storage-queue.StorageSharedKeyCredential |
      @azure/storage-queue.AnonymousCredential | TokenCredential
    name: AnonymousCredential | TokenCredential
    spec.typeScript:
      - name: StorageSharedKeyCredential
        fullName: StorageSharedKeyCredential
        uid: '@azure/storage-queue.StorageSharedKeyCredential'
      - name: ' | '
        fullName: ' | '
      - name: AnonymousCredential
        fullName: AnonymousCredential
        uid: '@azure/storage-queue.AnonymousCredential'
      - name: ' | TokenCredential'
        fullName: ' | TokenCredential'
  - uid: '@azure/storage-queue.Pipeline'
    name: Pipeline
    spec.typeScript:
      - name: Pipeline
        fullName: Pipeline
        uid: '@azure/storage-queue.Pipeline'
  - uid: '@azure/storage-queue.QueueClearMessagesOptions'
    name: QueueClearMessagesOptions
    spec.typeScript:
      - name: QueueClearMessagesOptions
        fullName: QueueClearMessagesOptions
        uid: '@azure/storage-queue.QueueClearMessagesOptions'
  - uid: Promise<@azure/storage-queue.QueueClearMessagesResponse>
    name: QueueClearMessagesResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: QueueClearMessagesResponse
        fullName: QueueClearMessagesResponse
        uid: '@azure/storage-queue.QueueClearMessagesResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-queue.QueueCreateOptions'
    name: QueueCreateOptions
    spec.typeScript:
      - name: QueueCreateOptions
        fullName: QueueCreateOptions
        uid: '@azure/storage-queue.QueueCreateOptions'
  - uid: Promise<@azure/storage-queue.QueueCreateResponse>
    name: QueueCreateResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: QueueCreateResponse
        fullName: QueueCreateResponse
        uid: '@azure/storage-queue.QueueCreateResponse'
      - name: '>'
        fullName: '>'
  - uid: Promise<@azure/storage-queue.QueueCreateIfNotExistsResponse>
    name: QueueCreateIfNotExistsResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: QueueCreateIfNotExistsResponse
        fullName: QueueCreateIfNotExistsResponse
        uid: '@azure/storage-queue.QueueCreateIfNotExistsResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-queue.QueueDeleteOptions'
    name: QueueDeleteOptions
    spec.typeScript:
      - name: QueueDeleteOptions
        fullName: QueueDeleteOptions
        uid: '@azure/storage-queue.QueueDeleteOptions'
  - uid: Promise<@azure/storage-queue.QueueDeleteResponse>
    name: QueueDeleteResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: QueueDeleteResponse
        fullName: QueueDeleteResponse
        uid: '@azure/storage-queue.QueueDeleteResponse'
      - name: '>'
        fullName: '>'
  - uid: Promise<@azure/storage-queue.QueueDeleteIfExistsResponse>
    name: QueueDeleteIfExistsResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: QueueDeleteIfExistsResponse
        fullName: QueueDeleteIfExistsResponse
        uid: '@azure/storage-queue.QueueDeleteIfExistsResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-queue.QueueDeleteMessageOptions'
    name: QueueDeleteMessageOptions
    spec.typeScript:
      - name: QueueDeleteMessageOptions
        fullName: QueueDeleteMessageOptions
        uid: '@azure/storage-queue.QueueDeleteMessageOptions'
  - uid: Promise<@azure/storage-queue.QueueDeleteMessageResponse>
    name: QueueDeleteMessageResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: QueueDeleteMessageResponse
        fullName: QueueDeleteMessageResponse
        uid: '@azure/storage-queue.QueueDeleteMessageResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-queue.QueueExistsOptions'
    name: QueueExistsOptions
    spec.typeScript:
      - name: QueueExistsOptions
        fullName: QueueExistsOptions
        uid: '@azure/storage-queue.QueueExistsOptions'
  - uid: '@azure/storage-queue.QueueGetAccessPolicyOptions'
    name: QueueGetAccessPolicyOptions
    spec.typeScript:
      - name: QueueGetAccessPolicyOptions
        fullName: QueueGetAccessPolicyOptions
        uid: '@azure/storage-queue.QueueGetAccessPolicyOptions'
  - uid: Promise<@azure/storage-queue.QueueGetAccessPolicyResponse>
    name: QueueGetAccessPolicyResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: QueueGetAccessPolicyResponse
        fullName: QueueGetAccessPolicyResponse
        uid: '@azure/storage-queue.QueueGetAccessPolicyResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-queue.QueueGetPropertiesOptions'
    name: QueueGetPropertiesOptions
    spec.typeScript:
      - name: QueueGetPropertiesOptions
        fullName: QueueGetPropertiesOptions
        uid: '@azure/storage-queue.QueueGetPropertiesOptions'
  - uid: Promise<@azure/storage-queue.QueueGetPropertiesResponse>
    name: QueueGetPropertiesResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: QueueGetPropertiesResponse
        fullName: QueueGetPropertiesResponse
        uid: '@azure/storage-queue.QueueGetPropertiesResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-queue.QueuePeekMessagesOptions'
    name: QueuePeekMessagesOptions
    spec.typeScript:
      - name: QueuePeekMessagesOptions
        fullName: QueuePeekMessagesOptions
        uid: '@azure/storage-queue.QueuePeekMessagesOptions'
  - uid: Promise<@azure/storage-queue.QueuePeekMessagesResponse>
    name: QueuePeekMessagesResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: QueuePeekMessagesResponse
        fullName: QueuePeekMessagesResponse
        uid: '@azure/storage-queue.QueuePeekMessagesResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-queue.QueueReceiveMessageOptions'
    name: QueueReceiveMessageOptions
    spec.typeScript:
      - name: QueueReceiveMessageOptions
        fullName: QueueReceiveMessageOptions
        uid: '@azure/storage-queue.QueueReceiveMessageOptions'
  - uid: Promise<@azure/storage-queue.QueueReceiveMessageResponse>
    name: QueueReceiveMessageResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: QueueReceiveMessageResponse
        fullName: QueueReceiveMessageResponse
        uid: '@azure/storage-queue.QueueReceiveMessageResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-queue.QueueSendMessageOptions'
    name: QueueSendMessageOptions
    spec.typeScript:
      - name: QueueSendMessageOptions
        fullName: QueueSendMessageOptions
        uid: '@azure/storage-queue.QueueSendMessageOptions'
  - uid: Promise<@azure/storage-queue.QueueSendMessageResponse>
    name: QueueSendMessageResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: QueueSendMessageResponse
        fullName: QueueSendMessageResponse
        uid: '@azure/storage-queue.QueueSendMessageResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-queue.SignedIdentifier[]'
    name: 'SignedIdentifier[]'
    spec.typeScript:
      - name: SignedIdentifier
        fullName: SignedIdentifier
        uid: '@azure/storage-queue.SignedIdentifier'
      - name: '[]'
        fullName: '[]'
  - uid: '@azure/storage-queue.QueueSetAccessPolicyOptions'
    name: QueueSetAccessPolicyOptions
    spec.typeScript:
      - name: QueueSetAccessPolicyOptions
        fullName: QueueSetAccessPolicyOptions
        uid: '@azure/storage-queue.QueueSetAccessPolicyOptions'
  - uid: Promise<@azure/storage-queue.QueueSetAccessPolicyResponse>
    name: QueueSetAccessPolicyResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: QueueSetAccessPolicyResponse
        fullName: QueueSetAccessPolicyResponse
        uid: '@azure/storage-queue.QueueSetAccessPolicyResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-queue.Metadata'
    name: Metadata
    spec.typeScript:
      - name: Metadata
        fullName: Metadata
        uid: '@azure/storage-queue.Metadata'
  - uid: '@azure/storage-queue.QueueSetMetadataOptions'
    name: QueueSetMetadataOptions
    spec.typeScript:
      - name: QueueSetMetadataOptions
        fullName: QueueSetMetadataOptions
        uid: '@azure/storage-queue.QueueSetMetadataOptions'
  - uid: Promise<@azure/storage-queue.QueueSetMetadataResponse>
    name: QueueSetMetadataResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: QueueSetMetadataResponse
        fullName: QueueSetMetadataResponse
        uid: '@azure/storage-queue.QueueSetMetadataResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-queue.QueueUpdateMessageOptions'
    name: QueueUpdateMessageOptions
    spec.typeScript:
      - name: QueueUpdateMessageOptions
        fullName: QueueUpdateMessageOptions
        uid: '@azure/storage-queue.QueueUpdateMessageOptions'
  - uid: Promise<@azure/storage-queue.QueueUpdateMessageResponse>
    name: QueueUpdateMessageResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: QueueUpdateMessageResponse
        fullName: QueueUpdateMessageResponse
        uid: '@azure/storage-queue.QueueUpdateMessageResponse'
      - name: '>'
        fullName: '>'
