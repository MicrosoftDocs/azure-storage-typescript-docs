### YamlMime:TSType
name: QueueServiceClient
uid: '@azure/storage-queue.QueueServiceClient'
package: '@azure/storage-queue'
summary: >-
  A QueueServiceClient represents a URL to the Azure Storage Queue service
  allowing you

  to manipulate queues.
fullName: QueueServiceClient
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: 'QueueServiceClient(string, Pipeline)'
    uid: '@azure/storage-queue.QueueServiceClient.constructor_1'
    package: '@azure/storage-queue'
    summary: Creates an instance of QueueServiceClient.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'new QueueServiceClient(url: string, pipeline: Pipeline)'
      parameters:
        - id: url
          type: string
          description: |-
            A URL string pointing to Azure Storage queue service, such as
                                "https://myaccount.queue.core.windows.net". You can append a SAS
                                if using AnonymousCredential, such as "https://myaccount.queue.core.windows.net?sasString".
        - id: pipeline
          type: <xref uid="@azure/storage-queue.Pipeline" />
          description: |-
            Call newPipeline() to create a default
                                       pipeline, or provide a customized pipeline.
  - name: >-
      QueueServiceClient(string, StorageSharedKeyCredential |
      AnonymousCredential | TokenCredential, StoragePipelineOptions)
    uid: '@azure/storage-queue.QueueServiceClient.constructor'
    package: '@azure/storage-queue'
    summary: Creates an instance of QueueServiceClient.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        new QueueServiceClient(url: string, credential?:
        StorageSharedKeyCredential | AnonymousCredential | TokenCredential,
        options?: StoragePipelineOptions)
      parameters:
        - id: url
          type: string
          description: |-
            A URL string pointing to Azure Storage queue service, such as
                                "https://myaccount.queue.core.windows.net". You can append a SAS
                                if using AnonymousCredential, such as "https://myaccount.queue.core.windows.net?sasString".
        - id: credential
          type: >-
            <xref uid="@azure/storage-queue.StorageSharedKeyCredential" /> |
            <xref uid="@azure/storage-queue.AnonymousCredential" /> |
            TokenCredential
          description: >-
            Such as AnonymousCredential, StorageSharedKeyCredential or any
            credential from the @azure/identity package to authenticate requests
            to the service. You can also provide an object that implements the
            TokenCredential interface. If not specified, AnonymousCredential is
            used.
        - id: options
          type: <xref uid="@azure/storage-queue.StoragePipelineOptions" />
          description: ''
properties:
  - name: accountName
    uid: '@azure/storage-queue.QueueServiceClient.accountName'
    package: '@azure/storage-queue'
    summary: ''
    fullName: accountName
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'accountName: string'
      return:
        type: string
        description: ''
  - name: url
    uid: '@azure/storage-queue.QueueServiceClient.url'
    package: '@azure/storage-queue'
    summary: URL string value.
    fullName: url
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'url: string'
      return:
        type: string
        description: ''
methods:
  - name: 'createQueue(string, QueueCreateOptions)'
    uid: '@azure/storage-queue.QueueServiceClient.createQueue'
    package: '@azure/storage-queue'
    summary: Creates a new queue under the specified account.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function createQueue(queueName: string, options?: QueueCreateOptions)'
      parameters:
        - id: queueName
          type: string
          description: name of the queue to create
        - id: options
          type: <xref uid="@azure/storage-queue.QueueCreateOptions" />
          description: ''
      return:
        type: Promise&lt;<xref uid="@azure/storage-queue.QueueCreateResponse" />&gt;
        description: Response data for the Queue create operation.
  - name: 'deleteQueue(string, QueueDeleteOptions)'
    uid: '@azure/storage-queue.QueueServiceClient.deleteQueue'
    package: '@azure/storage-queue'
    summary: Deletes the specified queue permanently.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function deleteQueue(queueName: string, options?: QueueDeleteOptions)'
      parameters:
        - id: queueName
          type: string
          description: name of the queue to delete.
        - id: options
          type: <xref uid="@azure/storage-queue.QueueDeleteOptions" />
          description: ''
      return:
        type: Promise&lt;<xref uid="@azure/storage-queue.QueueDeleteResponse" />&gt;
        description: Response data for the Queue delete operation.
  - name: 'fromConnectionString(string, StoragePipelineOptions)'
    uid: '@azure/storage-queue.QueueServiceClient.fromConnectionString'
    package: '@azure/storage-queue'
    summary: Creates an instance of QueueServiceClient.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function fromConnectionString(connectionString: string, options?:
        StoragePipelineOptions)
      parameters:
        - id: connectionString
          type: string
          description: >-
            Account connection string or a SAS connection string of an Azure
            storage account.
                                             [ Note - Account connection string can only be used in NODE.JS runtime. ]
                                             Account connection string example -
                                             `DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=accountKey;EndpointSuffix=core.windows.net`
                                             SAS connection string example -
                                             `BlobEndpoint=https://myaccount.blob.core.windows.net/;QueueEndpoint=https://myaccount.queue.core.windows.net/;FileEndpoint=https://myaccount.file.core.windows.net/;TableEndpoint=https://myaccount.table.core.windows.net/;SharedAccessSignature=sasString`
        - id: options
          type: <xref uid="@azure/storage-queue.StoragePipelineOptions" />
          description: ''
      return:
        type: <xref uid="@azure/storage-queue.QueueServiceClient" />
        description: A new QueueServiceClient object from the given connection string.
  - name: getProperties(ServiceGetPropertiesOptions)
    uid: '@azure/storage-queue.QueueServiceClient.getProperties'
    package: '@azure/storage-queue'
    summary: >-
      Gets the properties of a storage accountâ€™s Queue service, including
      properties

      for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getProperties(options?: ServiceGetPropertiesOptions)'
      parameters:
        - id: options
          type: <xref uid="@azure/storage-queue.ServiceGetPropertiesOptions" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-queue.ServiceGetPropertiesResponse" />&gt;
        description: Response data including the queue service properties.
  - name: getQueueClient(string)
    uid: '@azure/storage-queue.QueueServiceClient.getQueueClient'
    package: '@azure/storage-queue'
    summary: 'Creates a <xref:QueueClient> object.'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getQueueClient(queueName: string)'
      parameters:
        - id: queueName
          type: string
          description: ''
      return:
        type: <xref uid="@azure/storage-queue.QueueClient" />
        description: a new QueueClient
  - name: getStatistics(ServiceGetStatisticsOptions)
    uid: '@azure/storage-queue.QueueServiceClient.getStatistics'
    package: '@azure/storage-queue'
    summary: >-
      Retrieves statistics related to replication for the Queue service. It is
      only

      available on the secondary location endpoint when read-access
      geo-redundant

      replication is enabled for the storage account.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getStatistics(options?: ServiceGetStatisticsOptions)'
      parameters:
        - id: options
          type: <xref uid="@azure/storage-queue.ServiceGetStatisticsOptions" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-queue.ServiceGetStatisticsResponse" />&gt;
        description: Response data for get statistics the operation.
  - name: listQueues(ServiceListQueuesOptions)
    uid: '@azure/storage-queue.QueueServiceClient.listQueues'
    package: '@azure/storage-queue'
    summary: >
      Returns an async iterable iterator to list all the queues

      under the specified account.

      .byPage() returns an async iterable iterator to list the queues in pages.


      Example using `for await` syntax:


      ```js

      let i = 1;

      for await (const item of queueServiceClient.listQueues()) {
        console.log(`Queue${i}: ${item.name}`);
        i++;
      }

      ```


      Example using `iter.next()`:


      ```js

      let i = 1;

      let iterator = queueServiceClient.listQueues();

      let item = await iterator.next();

      while (!item.done) {
        console.log(`Queue${i}: ${iterator.value.name}`);
        i++;
        item = await iterator.next();
      }

      ```


      Example using `byPage()`:


      ```js

      // passing optional maxPageSize in the page settings

      let i = 1;

      for await (const item2 of queueServiceClient.listQueues().byPage({
      maxPageSize: 20 })) {
        if (item2.queueItems) {
          for (const queueItem of item2.queueItems) {
            console.log(`Queue${i}: ${queueItem.name}`);
            i++;
          }
        }
      }

      ```


      Example using paging with a marker:


      ```js

      let i = 1;

      let iterator = queueServiceClient.listQueues().byPage({ maxPageSize: 2 });

      let item = (await iterator.next()).value;


      // Prints 2 queue names

      if (item.queueItems) {
        for (const queueItem of item.queueItems) {
          console.log(`Queue${i}: ${queueItem.name}`);
          i++;
        }
      }

      // Gets next marker

      let marker = item.continuationToken;


      // Passing next marker as continuationToken

      iterator = queueServiceClient.listQueues().byPage({ continuationToken:
      marker, maxPageSize: 10 });

      item = (await iterator.next()).value;


      // Prints 10 queue names

      if (item.queueItems) {
        for (const queueItem of item.queueItems) {
          console.log(`Queue${i}: ${queueItem.name}`);
          i++;
        }
      }

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function listQueues(options?: ServiceListQueuesOptions)'
      parameters:
        - id: options
          type: <xref uid="@azure/storage-queue.ServiceListQueuesOptions" />
          description: ''
      return:
        type: >-
          PagedAsyncIterableIterator&lt;<xref
          uid="@azure/storage-queue.QueueItem" />, <xref
          uid="@azure/storage-queue.ServiceListQueuesSegmentResponse" />&gt;
        description: An asyncIterableIterator that supports paging.
  - name: 'setProperties(QueueServiceProperties, ServiceGetPropertiesOptions)'
    uid: '@azure/storage-queue.QueueServiceClient.setProperties'
    package: '@azure/storage-queue'
    summary: >-
      Sets properties for a storage accountâ€™s Queue service endpoint, including
      properties

      for Storage Analytics, CORS (Cross-Origin Resource Sharing) rules and soft
      delete settings.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setProperties(properties: QueueServiceProperties, options?:
        ServiceGetPropertiesOptions)
      parameters:
        - id: properties
          type: <xref uid="@azure/storage-queue.QueueServiceProperties" />
          description: ''
        - id: options
          type: <xref uid="@azure/storage-queue.ServiceGetPropertiesOptions" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-queue.ServiceSetPropertiesResponse" />&gt;
        description: Response data for the Set Properties operation.
extends: <xref uid="@azure/storage-queue.StorageClient" />
