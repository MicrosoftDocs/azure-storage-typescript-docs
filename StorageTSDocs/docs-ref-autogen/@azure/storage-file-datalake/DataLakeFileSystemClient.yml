### YamlMime:UniversalReference
items:
  - uid: '@azure/storage-file-datalake.DataLakeFileSystemClient'
    name: DataLakeFileSystemClient
    fullName: DataLakeFileSystemClient
    children:
      - '@azure/storage-file-datalake.DataLakeFileSystemClient.accountName'
      - '@azure/storage-file-datalake.DataLakeFileSystemClient.create'
      - '@azure/storage-file-datalake.DataLakeFileSystemClient.createIfNotExists'
      - '@azure/storage-file-datalake.DataLakeFileSystemClient.credential'
      - '@azure/storage-file-datalake.DataLakeFileSystemClient.constructor_1'
      - '@azure/storage-file-datalake.DataLakeFileSystemClient.constructor'
      - '@azure/storage-file-datalake.DataLakeFileSystemClient.delete'
      - '@azure/storage-file-datalake.DataLakeFileSystemClient.deleteIfExists'
      - '@azure/storage-file-datalake.DataLakeFileSystemClient.exists'
      - '@azure/storage-file-datalake.DataLakeFileSystemClient.getAccessPolicy'
      - >-
        @azure/storage-file-datalake.DataLakeFileSystemClient.getDataLakeLeaseClient
      - '@azure/storage-file-datalake.DataLakeFileSystemClient.getDirectoryClient'
      - '@azure/storage-file-datalake.DataLakeFileSystemClient.getFileClient'
      - '@azure/storage-file-datalake.DataLakeFileSystemClient.getProperties'
      - '@azure/storage-file-datalake.DataLakeFileSystemClient.listPaths'
      - '@azure/storage-file-datalake.DataLakeFileSystemClient.name'
      - '@azure/storage-file-datalake.DataLakeFileSystemClient.setAccessPolicy'
      - '@azure/storage-file-datalake.DataLakeFileSystemClient.setMetadata'
      - '@azure/storage-file-datalake.DataLakeFileSystemClient.url'
    langs:
      - typeScript
    type: class
    summary: >-
      A DataLakeFileSystemClient represents a URL to the Azure Storage file
      system

      allowing you to manipulate its directories and files.
    extends:
      name: '@azure/storage-file-datalake.StorageClient'
    package: '@azure/storage-file-datalake'
  - uid: '@azure/storage-file-datalake.DataLakeFileSystemClient.accountName'
    name: accountName
    fullName: accountName
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'accountName: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/storage-file-datalake'
  - uid: '@azure/storage-file-datalake.DataLakeFileSystemClient.create'
    name: create(FileSystemCreateOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates a new file system under the specified account. If the file system
      with

      the same name already exists, the operation fails.
    syntax:
      content: 'function create(options?: FileSystemCreateOptions)'
      parameters:
        - id: options
          type:
            - '@azure/storage-file-datalake.FileSystemCreateOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-file-datalake.FileSystemCreateResponse>
        description: ''
    package: '@azure/storage-file-datalake'
  - uid: '@azure/storage-file-datalake.DataLakeFileSystemClient.createIfNotExists'
    name: createIfNotExists(FileSystemCreateOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates a new file system under the specified account. If the file system
      with

      the same name already exists, it is not changed.
    syntax:
      content: 'function createIfNotExists(options?: FileSystemCreateOptions)'
      parameters:
        - id: options
          type:
            - '@azure/storage-file-datalake.FileSystemCreateOptions'
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<@azure/storage-file-datalake.FileSystemCreateIfNotExistsResponse>
        description: ''
    package: '@azure/storage-file-datalake'
  - uid: '@azure/storage-file-datalake.DataLakeFileSystemClient.credential'
    name: credential
    fullName: credential
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Such as AnonymousCredential, StorageSharedKeyCredential or any credential
      from the @azure/identity package to authenticate requests to the service.
      You can also provide an object that implements the TokenCredential
      interface. If not specified, AnonymousCredential is used.
    syntax:
      content: >-
        credential: StorageSharedKeyCredential | AnonymousCredential |
        TokenCredential
      return:
        type:
          - >-
            @azure/storage-file-datalake.StorageSharedKeyCredential |
            @azure/storage-file-datalake.AnonymousCredential | TokenCredential
        description: ''
    package: '@azure/storage-file-datalake'
  - uid: '@azure/storage-file-datalake.DataLakeFileSystemClient.constructor_1'
    name: 'DataLakeFileSystemClient(string, Pipeline)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Creates an instance of DataLakeFileSystemClient from url and pipeline.
    syntax:
      content: 'new DataLakeFileSystemClient(url: string, pipeline: Pipeline)'
      parameters:
        - id: url
          type:
            - string
          description: >-
            A Client string pointing to Azure Storage data lake file system,
            such as
                                "https://myaccount.dfs.core.windows.net/filesystem". You can append a SAS
                                if using AnonymousCredential, such as "https://myaccount.dfs.core.windows.net/filesystem?sasString".
        - id: pipeline
          type:
            - '@azure/storage-file-datalake.Pipeline'
          description: |-
            Call newPipeline() to create a default
                                       pipeline, or provide a customized pipeline.
    package: '@azure/storage-file-datalake'
  - uid: '@azure/storage-file-datalake.DataLakeFileSystemClient.constructor'
    name: >-
      DataLakeFileSystemClient(string, StorageSharedKeyCredential |
      AnonymousCredential | TokenCredential, StoragePipelineOptions)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Creates an instance of DataLakeFileSystemClient from url and credential.
    syntax:
      content: >-
        new DataLakeFileSystemClient(url: string, credential?:
        StorageSharedKeyCredential | AnonymousCredential | TokenCredential,
        options?: StoragePipelineOptions)
      parameters:
        - id: url
          type:
            - string
          description: >-
            A Client string pointing to Azure Storage data lake file system,
            such as
                                "https://myaccount.dfs.core.windows.net/filesystem". You can append a SAS
                                if using AnonymousCredential, such as "https://myaccount.dfs.core.windows.net/filesystem?sasString".
        - id: credential
          type:
            - >-
              @azure/storage-file-datalake.StorageSharedKeyCredential |
              @azure/storage-file-datalake.AnonymousCredential | TokenCredential
          description: ''
          optional: true
        - id: options
          type:
            - '@azure/storage-file-datalake.StoragePipelineOptions'
          description: ''
          optional: true
    package: '@azure/storage-file-datalake'
  - uid: '@azure/storage-file-datalake.DataLakeFileSystemClient.delete'
    name: delete(FileSystemDeleteOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: Delete current file system.
    syntax:
      content: 'function delete(options?: FileSystemDeleteOptions)'
      parameters:
        - id: options
          type:
            - '@azure/storage-file-datalake.FileSystemDeleteOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-file-datalake.FileSystemDeleteResponse>
        description: ''
    package: '@azure/storage-file-datalake'
  - uid: '@azure/storage-file-datalake.DataLakeFileSystemClient.deleteIfExists'
    name: deleteIfExists(FileSystemDeleteOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: Delete current file system if it exists.
    syntax:
      content: 'function deleteIfExists(options?: FileSystemDeleteOptions)'
      parameters:
        - id: options
          type:
            - '@azure/storage-file-datalake.FileSystemDeleteOptions'
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<@azure/storage-file-datalake.FileSystemDeleteIfExistsResponse>
        description: ''
    package: '@azure/storage-file-datalake'
  - uid: '@azure/storage-file-datalake.DataLakeFileSystemClient.exists'
    name: exists(FileSystemExistsOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Returns true if the File system represented by this client exists; false
      otherwise.

      NOTE: use this function with care since an existing file system might be
      deleted by other clients or

      applications. Vice versa new file system with the same name might be added
      by other clients or

      applications after this function completes.
    syntax:
      content: 'function exists(options?: FileSystemExistsOptions)'
      parameters:
        - id: options
          type:
            - '@azure/storage-file-datalake.FileSystemExistsOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<boolean>
        description: ''
    package: '@azure/storage-file-datalake'
  - uid: '@azure/storage-file-datalake.DataLakeFileSystemClient.getAccessPolicy'
    name: getAccessPolicy(FileSystemGetAccessPolicyOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Gets the permissions for the specified file system. The permissions
      indicate

      whether file system data may be accessed publicly.

      WARNING: JavaScript Date will potentially lose precision when parsing
      startsOn and expiresOn strings.

      For example, new Date("2018-12-31T03:44:23.8827891Z").toISOString() will
      get "2018-12-31T03:44:23.882Z".
    syntax:
      content: 'function getAccessPolicy(options?: FileSystemGetAccessPolicyOptions)'
      parameters:
        - id: options
          type:
            - '@azure/storage-file-datalake.FileSystemGetAccessPolicyOptions'
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<@azure/storage-file-datalake.FileSystemGetAccessPolicyResponse>
        description: ''
    package: '@azure/storage-file-datalake'
  - uid: >-
      @azure/storage-file-datalake.DataLakeFileSystemClient.getDataLakeLeaseClient
    name: getDataLakeLeaseClient(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Get a <xref:DataLakeLeaseClient> that manages leases on the file system.'
    syntax:
      content: 'function getDataLakeLeaseClient(proposeLeaseId?: string)'
      parameters:
        - id: proposeLeaseId
          type:
            - string
          description: ''
          optional: true
      return:
        type:
          - '@azure/storage-file-datalake.DataLakeLeaseClient'
        description: ''
    package: '@azure/storage-file-datalake'
  - uid: '@azure/storage-file-datalake.DataLakeFileSystemClient.getDirectoryClient'
    name: getDirectoryClient(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Creates a <xref:DataLakeDirectoryClient> object under current file system.'
    syntax:
      content: 'function getDirectoryClient(directoryName: string)'
      parameters:
        - id: directoryName
          type:
            - string
          description: ''
      return:
        type:
          - '@azure/storage-file-datalake.DataLakeDirectoryClient'
        description: ''
    package: '@azure/storage-file-datalake'
  - uid: '@azure/storage-file-datalake.DataLakeFileSystemClient.getFileClient'
    name: getFileClient(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Creates a <xref:DataLakeFileClient> object under current file system.'
    syntax:
      content: 'function getFileClient(fileName: string)'
      parameters:
        - id: fileName
          type:
            - string
          description: ''
      return:
        type:
          - '@azure/storage-file-datalake.DataLakeFileClient'
        description: ''
    package: '@azure/storage-file-datalake'
  - uid: '@azure/storage-file-datalake.DataLakeFileSystemClient.getProperties'
    name: getProperties(FileSystemGetPropertiesOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Returns all user-defined metadata and system properties for the specified

      file system.

      WARNING: The `metadata` object returned in the response will have its keys
      in lowercase, even if

      they originally contained uppercase characters. This differs from the
      metadata keys returned by

      the `listFileSystems` method of <xref:DataLakeServiceClient> using the
      `includeMetadata` option, which

      will retain their original casing.
    syntax:
      content: 'function getProperties(options?: FileSystemGetPropertiesOptions)'
      parameters:
        - id: options
          type:
            - '@azure/storage-file-datalake.FileSystemGetPropertiesOptions'
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<@azure/storage-file-datalake.FileSystemGetPropertiesResponse>
        description: ''
    package: '@azure/storage-file-datalake'
  - uid: '@azure/storage-file-datalake.DataLakeFileSystemClient.listPaths'
    name: listPaths(ListPathsOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Returns an async iterable iterator to list all the paths (directories and
      files)

      under the specified file system.

      .byPage() returns an async iterable iterator to list the paths in pages.


      Example using `for await` syntax:


      ```js

      // Get the fileSystemClient before you run these snippets,

      // Can be obtained from
      `serviceClient.getFileSystemClient("<your-filesystem-name>");`

      let i = 1;

      for await (const path of fileSystemClient.listPaths()) {
        console.log(`Path ${i++}: ${path.name}, isDirectory?: ${path.isDirectory}`);
      }

      ```


      Example using `iter.next()`:


      ```js

      let i = 1;

      let iter = fileSystemClient.listPaths();

      let pathItem = await iter.next();

      while (!pathItem.done) {
        console.log(`Path ${i++}: ${pathItem.value.name}, isDirectory?: ${pathItem.value.isDirectory}`);
        pathItem = await iter.next();
      }

      ```


      Example using `byPage()`:


      ```js

      // passing optional maxPageSize in the page settings

      let i = 1;

      for await (const response of fileSystemClient.listPaths().byPage({
      maxPageSize: 20 })) {
        for (const path of response.pathItems) {
          console.log(`Path ${i++}: ${path.name}, isDirectory?: ${path.isDirectory}`);
        }
      }

      ```


      Example using paging with a marker:


      ```js

      let i = 1;

      let iterator = fileSystemClient.listPaths().byPage({ maxPageSize: 2 });

      let response = (await iterator.next()).value;


      // Prints 2 path names

      for (const path of response.pathItems) {
        console.log(`Path ${i++}: ${path.name}, isDirectory?: ${path.isDirectory}`);
      }


      // Gets next marker

      let marker = response.continuationToken;


      // Passing next marker as continuationToken


      iterator = fileSystemClient.listPaths().byPage({ continuationToken:
      marker, maxPageSize: 10 });

      response = (await iterator.next()).value;


      // Prints 10 path names

      for (const path of response.pathItems) {
        console.log(`Path ${i++}: ${path.name}, isDirectory?: ${path.isDirectory}`);
      }

      ```
    syntax:
      content: 'function listPaths(options?: ListPathsOptions)'
      parameters:
        - id: options
          type:
            - '@azure/storage-file-datalake.ListPathsOptions'
          description: ''
          optional: true
      return:
        type:
          - >-
            PagedAsyncIterableIterator<@azure/storage-file-datalake.Path,
            @azure/storage-file-datalake.FileSystemListPathsResponse>
        description: ''
    package: '@azure/storage-file-datalake'
  - uid: '@azure/storage-file-datalake.DataLakeFileSystemClient.name'
    name: name
    fullName: name
    children: []
    langs:
      - typeScript
    type: property
    summary: Name of current file system.
    syntax:
      content: string name
      return:
        type:
          - string
        description: ''
    package: '@azure/storage-file-datalake'
  - uid: '@azure/storage-file-datalake.DataLakeFileSystemClient.setAccessPolicy'
    name: >-
      setAccessPolicy(PublicAccessType, SignedIdentifier<AccessPolicy>[],
      FileSystemSetAccessPolicyOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Sets the permissions for the specified file system. The permissions
      indicate

      whether directories or files in a file system may be accessed publicly.

      When you set permissions for a file system, the existing permissions are
      replaced.

      If no access or containerAcl provided, the existing file system ACL will
      be

      removed.
    syntax:
      content: >-
        function setAccessPolicy(access?: PublicAccessType, fileSystemAcl?:
        SignedIdentifier<AccessPolicy>[], options?:
        FileSystemSetAccessPolicyOptions)
      parameters:
        - id: access
          type:
            - '@azure/storage-file-datalake.PublicAccessType'
          description: ''
          optional: true
        - id: fileSystemAcl
          type:
            - >-
              @azure/storage-file-datalake.SignedIdentifier<@azure/storage-file-datalake.AccessPolicy>[]
          description: ''
          optional: true
        - id: options
          type:
            - '@azure/storage-file-datalake.FileSystemSetAccessPolicyOptions'
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<@azure/storage-file-datalake.FileSystemSetAccessPolicyResponse>
        description: ''
    package: '@azure/storage-file-datalake'
  - uid: '@azure/storage-file-datalake.DataLakeFileSystemClient.setMetadata'
    name: 'setMetadata(Metadata, FileSystemSetMetadataOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Sets one or more user-defined name-value pairs for the specified file
      system.

      If no option provided, or no metadata defined in the parameter, the file
      system

      metadata will be removed.
    syntax:
      content: >-
        function setMetadata(metadata?: Metadata, options?:
        FileSystemSetMetadataOptions)
      parameters:
        - id: metadata
          type:
            - '@azure/storage-file-datalake.Metadata'
          description: ''
          optional: true
        - id: options
          type:
            - '@azure/storage-file-datalake.FileSystemSetMetadataOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-file-datalake.FileSystemSetMetadataResponse>
        description: ''
    package: '@azure/storage-file-datalake'
  - uid: '@azure/storage-file-datalake.DataLakeFileSystemClient.url'
    name: url
    fullName: url
    children: []
    langs:
      - typeScript
    type: property
    summary: Encoded URL string value.
    syntax:
      content: 'url: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/storage-file-datalake'
references:
  - uid: '@azure/storage-file-datalake.StorageClient'
    name: StorageClient
    spec.typeScript:
      - name: StorageClient
        fullName: StorageClient
        uid: '@azure/storage-file-datalake.StorageClient'
  - uid: >-
      @azure/storage-file-datalake.StorageSharedKeyCredential |
      @azure/storage-file-datalake.AnonymousCredential | TokenCredential
    name: AnonymousCredential | TokenCredential
    spec.typeScript:
      - name: StorageSharedKeyCredential
        fullName: StorageSharedKeyCredential
        uid: '@azure/storage-file-datalake.StorageSharedKeyCredential'
      - name: ' | '
        fullName: ' | '
      - name: AnonymousCredential
        fullName: AnonymousCredential
        uid: '@azure/storage-file-datalake.AnonymousCredential'
      - name: ' | TokenCredential'
        fullName: ' | TokenCredential'
  - uid: '@azure/storage-file-datalake.StoragePipelineOptions'
    name: StoragePipelineOptions
    spec.typeScript:
      - name: StoragePipelineOptions
        fullName: StoragePipelineOptions
        uid: '@azure/storage-file-datalake.StoragePipelineOptions'
  - uid: '@azure/storage-file-datalake.Pipeline'
    name: Pipeline
    spec.typeScript:
      - name: Pipeline
        fullName: Pipeline
        uid: '@azure/storage-file-datalake.Pipeline'
  - uid: '@azure/storage-file-datalake.FileSystemCreateOptions'
    name: FileSystemCreateOptions
    spec.typeScript:
      - name: FileSystemCreateOptions
        fullName: FileSystemCreateOptions
        uid: '@azure/storage-file-datalake.FileSystemCreateOptions'
  - uid: Promise<@azure/storage-file-datalake.FileSystemCreateResponse>
    name: FileSystemCreateResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: FileSystemCreateResponse
        fullName: FileSystemCreateResponse
        uid: '@azure/storage-file-datalake.FileSystemCreateResponse'
      - name: '>'
        fullName: '>'
  - uid: Promise<@azure/storage-file-datalake.FileSystemCreateIfNotExistsResponse>
    name: FileSystemCreateIfNotExistsResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: FileSystemCreateIfNotExistsResponse
        fullName: FileSystemCreateIfNotExistsResponse
        uid: '@azure/storage-file-datalake.FileSystemCreateIfNotExistsResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-file-datalake.FileSystemDeleteOptions'
    name: FileSystemDeleteOptions
    spec.typeScript:
      - name: FileSystemDeleteOptions
        fullName: FileSystemDeleteOptions
        uid: '@azure/storage-file-datalake.FileSystemDeleteOptions'
  - uid: Promise<@azure/storage-file-datalake.FileSystemDeleteResponse>
    name: FileSystemDeleteResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: FileSystemDeleteResponse
        fullName: FileSystemDeleteResponse
        uid: '@azure/storage-file-datalake.FileSystemDeleteResponse'
      - name: '>'
        fullName: '>'
  - uid: Promise<@azure/storage-file-datalake.FileSystemDeleteIfExistsResponse>
    name: FileSystemDeleteIfExistsResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: FileSystemDeleteIfExistsResponse
        fullName: FileSystemDeleteIfExistsResponse
        uid: '@azure/storage-file-datalake.FileSystemDeleteIfExistsResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-file-datalake.FileSystemExistsOptions'
    name: FileSystemExistsOptions
    spec.typeScript:
      - name: FileSystemExistsOptions
        fullName: FileSystemExistsOptions
        uid: '@azure/storage-file-datalake.FileSystemExistsOptions'
  - uid: '@azure/storage-file-datalake.FileSystemGetAccessPolicyOptions'
    name: FileSystemGetAccessPolicyOptions
    spec.typeScript:
      - name: FileSystemGetAccessPolicyOptions
        fullName: FileSystemGetAccessPolicyOptions
        uid: '@azure/storage-file-datalake.FileSystemGetAccessPolicyOptions'
  - uid: Promise<@azure/storage-file-datalake.FileSystemGetAccessPolicyResponse>
    name: FileSystemGetAccessPolicyResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: FileSystemGetAccessPolicyResponse
        fullName: FileSystemGetAccessPolicyResponse
        uid: '@azure/storage-file-datalake.FileSystemGetAccessPolicyResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-file-datalake.DataLakeLeaseClient'
    name: DataLakeLeaseClient
    spec.typeScript:
      - name: DataLakeLeaseClient
        fullName: DataLakeLeaseClient
        uid: '@azure/storage-file-datalake.DataLakeLeaseClient'
  - uid: '@azure/storage-file-datalake.DataLakeDirectoryClient'
    name: DataLakeDirectoryClient
    spec.typeScript:
      - name: DataLakeDirectoryClient
        fullName: DataLakeDirectoryClient
        uid: '@azure/storage-file-datalake.DataLakeDirectoryClient'
  - uid: '@azure/storage-file-datalake.DataLakeFileClient'
    name: DataLakeFileClient
    spec.typeScript:
      - name: DataLakeFileClient
        fullName: DataLakeFileClient
        uid: '@azure/storage-file-datalake.DataLakeFileClient'
  - uid: '@azure/storage-file-datalake.FileSystemGetPropertiesOptions'
    name: FileSystemGetPropertiesOptions
    spec.typeScript:
      - name: FileSystemGetPropertiesOptions
        fullName: FileSystemGetPropertiesOptions
        uid: '@azure/storage-file-datalake.FileSystemGetPropertiesOptions'
  - uid: Promise<@azure/storage-file-datalake.FileSystemGetPropertiesResponse>
    name: FileSystemGetPropertiesResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: FileSystemGetPropertiesResponse
        fullName: FileSystemGetPropertiesResponse
        uid: '@azure/storage-file-datalake.FileSystemGetPropertiesResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-file-datalake.ListPathsOptions'
    name: ListPathsOptions
    spec.typeScript:
      - name: ListPathsOptions
        fullName: ListPathsOptions
        uid: '@azure/storage-file-datalake.ListPathsOptions'
  - uid: >-
      PagedAsyncIterableIterator<@azure/storage-file-datalake.Path,
      @azure/storage-file-datalake.FileSystemListPathsResponse>
    name: FileSystemListPathsResponse>
    spec.typeScript:
      - name: PagedAsyncIterableIterator<
        fullName: PagedAsyncIterableIterator<
      - name: Path
        fullName: Path
        uid: '@azure/storage-file-datalake.Path'
      - name: ', '
        fullName: ', '
      - name: FileSystemListPathsResponse
        fullName: FileSystemListPathsResponse
        uid: '@azure/storage-file-datalake.FileSystemListPathsResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-file-datalake.PublicAccessType'
    name: PublicAccessType
    spec.typeScript:
      - name: PublicAccessType
        fullName: PublicAccessType
        uid: '@azure/storage-file-datalake.PublicAccessType'
  - uid: >-
      @azure/storage-file-datalake.SignedIdentifier<@azure/storage-file-datalake.AccessPolicy>[]
    name: 'AccessPolicy>[]'
    spec.typeScript:
      - name: SignedIdentifier
        fullName: SignedIdentifier
        uid: '@azure/storage-file-datalake.SignedIdentifier'
      - name: <
        fullName: <
      - name: AccessPolicy
        fullName: AccessPolicy
        uid: '@azure/storage-file-datalake.AccessPolicy'
      - name: '>[]'
        fullName: '>[]'
  - uid: '@azure/storage-file-datalake.FileSystemSetAccessPolicyOptions'
    name: FileSystemSetAccessPolicyOptions
    spec.typeScript:
      - name: FileSystemSetAccessPolicyOptions
        fullName: FileSystemSetAccessPolicyOptions
        uid: '@azure/storage-file-datalake.FileSystemSetAccessPolicyOptions'
  - uid: Promise<@azure/storage-file-datalake.FileSystemSetAccessPolicyResponse>
    name: FileSystemSetAccessPolicyResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: FileSystemSetAccessPolicyResponse
        fullName: FileSystemSetAccessPolicyResponse
        uid: '@azure/storage-file-datalake.FileSystemSetAccessPolicyResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-file-datalake.Metadata'
    name: Metadata
    spec.typeScript:
      - name: Metadata
        fullName: Metadata
        uid: '@azure/storage-file-datalake.Metadata'
  - uid: '@azure/storage-file-datalake.FileSystemSetMetadataOptions'
    name: FileSystemSetMetadataOptions
    spec.typeScript:
      - name: FileSystemSetMetadataOptions
        fullName: FileSystemSetMetadataOptions
        uid: '@azure/storage-file-datalake.FileSystemSetMetadataOptions'
  - uid: Promise<@azure/storage-file-datalake.FileSystemSetMetadataResponse>
    name: FileSystemSetMetadataResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: FileSystemSetMetadataResponse
        fullName: FileSystemSetMetadataResponse
        uid: '@azure/storage-file-datalake.FileSystemSetMetadataResponse'
      - name: '>'
        fullName: '>'
