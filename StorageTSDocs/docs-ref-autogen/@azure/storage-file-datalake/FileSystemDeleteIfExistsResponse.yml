### YamlMime:UniversalReference
items:
  - uid: '@azure/storage-file-datalake.FileSystemDeleteIfExistsResponse'
    name: FileSystemDeleteIfExistsResponse
    fullName: FileSystemDeleteIfExistsResponse
    children:
      - >-
        @azure/storage-file-datalake.FileSystemDeleteIfExistsResponse.clientRequestId
      - '@azure/storage-file-datalake.FileSystemDeleteIfExistsResponse.date'
      - '@azure/storage-file-datalake.FileSystemDeleteIfExistsResponse.requestId'
      - '@azure/storage-file-datalake.FileSystemDeleteIfExistsResponse.succeeded'
      - '@azure/storage-file-datalake.FileSystemDeleteIfExistsResponse.version'
    langs:
      - typeScript
    type: interface
    summary: >-
      Contains response data for the
      <xref:DataLakeFileSystemClient.deleteIfExists> operation.
    extends:
      name: '@azure/storage-file-datalake.FileSystemDeleteHeaders & Object'
    package: '@azure/storage-file-datalake'
  - uid: >-
      @azure/storage-file-datalake.FileSystemDeleteIfExistsResponse.clientRequestId
    name: clientRequestId
    fullName: clientRequestId
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'clientRequestId?: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/storage-file-datalake'
  - uid: '@azure/storage-file-datalake.FileSystemDeleteIfExistsResponse.date'
    name: date
    fullName: date
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'date?: Date'
      return:
        type:
          - Date
        description: ''
    package: '@azure/storage-file-datalake'
  - uid: '@azure/storage-file-datalake.FileSystemDeleteIfExistsResponse.requestId'
    name: requestId
    fullName: requestId
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'requestId?: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/storage-file-datalake'
  - uid: '@azure/storage-file-datalake.FileSystemDeleteIfExistsResponse.succeeded'
    name: succeeded
    fullName: succeeded
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Indicate whether the file system is successfully deleted. Is false if the
      file system doesn't exist in the first place.
    syntax:
      content: 'succeeded: boolean'
      return:
        type:
          - boolean
        description: ''
    package: '@azure/storage-file-datalake'
  - uid: '@azure/storage-file-datalake.FileSystemDeleteIfExistsResponse.version'
    name: version
    fullName: version
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'version?: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/storage-file-datalake'
references:
  - uid: '@azure/storage-file-datalake.FileSystemDeleteHeaders & Object'
    name: FileSystemDeleteHeaders & Object
    spec.typeScript:
      - name: FileSystemDeleteHeaders
        fullName: FileSystemDeleteHeaders
        uid: '@azure/storage-file-datalake.FileSystemDeleteHeaders'
      - name: ' & Object'
        fullName: ' & Object'
