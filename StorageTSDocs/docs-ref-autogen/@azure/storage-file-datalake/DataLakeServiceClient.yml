### YamlMime:TSType
name: DataLakeServiceClient
uid: '@azure/storage-file-datalake.DataLakeServiceClient'
package: '@azure/storage-file-datalake'
summary: |-
  DataLakeServiceClient allows you to manipulate Azure
  Data Lake service resources and file systems. The storage account provides
  the top-level namespace for the Data Lake service.
fullName: DataLakeServiceClient
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: 'DataLakeServiceClient(string, Pipeline)'
    uid: '@azure/storage-file-datalake.DataLakeServiceClient.constructor_1'
    package: '@azure/storage-file-datalake'
    summary: Creates an instance of DataLakeServiceClient from url and pipeline.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'new DataLakeServiceClient(url: string, pipeline: Pipeline)'
      parameters:
        - id: url
          type: string
          description: |-
            A Client string pointing to Azure Storage data lake service, such as
                                "https://myaccount.dfs.core.windows.net". You can append a SAS
                                if using AnonymousCredential, such as "https://myaccount.dfs.core.windows.net?sasString".
        - id: pipeline
          type: <xref uid="@azure/storage-file-datalake.Pipeline" />
          description: |-
            Call newPipeline() to create a default
                                       pipeline, or provide a customized pipeline.
  - name: >-
      DataLakeServiceClient(string, StorageSharedKeyCredential |
      AnonymousCredential | TokenCredential, StoragePipelineOptions)
    uid: '@azure/storage-file-datalake.DataLakeServiceClient.constructor'
    package: '@azure/storage-file-datalake'
    summary: Creates an instance of DataLakeServiceClient from url.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        new DataLakeServiceClient(url: string, credential?:
        StorageSharedKeyCredential | AnonymousCredential | TokenCredential,
        options?: StoragePipelineOptions)
      parameters:
        - id: url
          type: string
          description: |-
            A Client string pointing to Azure Storage data lake service, such as
                                "https://myaccount.dfs.core.windows.net". You can append a SAS
                                if using AnonymousCredential, such as "https://myaccount.dfs.core.windows.net?sasString".
        - id: credential
          type: >-
            <xref uid="@azure/storage-file-datalake.StorageSharedKeyCredential"
            /> | <xref uid="@azure/storage-file-datalake.AnonymousCredential" />
            | TokenCredential
          description: ''
        - id: options
          type: <xref uid="@azure/storage-file-datalake.StoragePipelineOptions" />
          description: ''
properties:
  - name: accountName
    uid: '@azure/storage-file-datalake.DataLakeServiceClient.accountName'
    package: '@azure/storage-file-datalake'
    summary: ''
    fullName: accountName
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'accountName: string'
      return:
        type: string
        description: ''
  - name: credential
    uid: '@azure/storage-file-datalake.DataLakeServiceClient.credential'
    package: '@azure/storage-file-datalake'
    summary: >-
      Such as AnonymousCredential, StorageSharedKeyCredential or any credential
      from the @azure/identity package to authenticate requests to the service.
      You can also provide an object that implements the TokenCredential
      interface. If not specified, AnonymousCredential is used.
    fullName: credential
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        credential: StorageSharedKeyCredential | AnonymousCredential |
        TokenCredential
      return:
        type: >-
          <xref uid="@azure/storage-file-datalake.StorageSharedKeyCredential" />
          | <xref uid="@azure/storage-file-datalake.AnonymousCredential" /> |
          TokenCredential
        description: ''
  - name: url
    uid: '@azure/storage-file-datalake.DataLakeServiceClient.url'
    package: '@azure/storage-file-datalake'
    summary: Encoded URL string value.
    fullName: url
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'url: string'
      return:
        type: string
        description: ''
methods:
  - name: getFileSystemClient(string)
    uid: '@azure/storage-file-datalake.DataLakeServiceClient.getFileSystemClient'
    package: '@azure/storage-file-datalake'
    summary: 'Creates a <xref:DataLakeFileSystemClient> object.'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getFileSystemClient(fileSystemName: string)'
      parameters:
        - id: fileSystemName
          type: string
          description: File system name.
      return:
        type: <xref uid="@azure/storage-file-datalake.DataLakeFileSystemClient" />
        description: ''
  - name: 'getUserDelegationKey(Date, Date, ServiceGetUserDelegationKeyOptions)'
    uid: '@azure/storage-file-datalake.DataLakeServiceClient.getUserDelegationKey'
    package: '@azure/storage-file-datalake'
    summary: >
      ONLY AVAILABLE WHEN USING BEARER TOKEN AUTHENTICATION (TokenCredential).

      Retrieves a user delegation key for the Data Lake service. This is only a
      valid operation when using

      bearer token authentication.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getUserDelegationKey(startsOn: Date, expiresOn: Date, options?:
        ServiceGetUserDelegationKeyOptions)
      parameters:
        - id: startsOn
          type: Date
          description: >-
            The start time for the user delegation SAS. Must be within 7 days of
            the current time.
        - id: expiresOn
          type: Date
          description: >-
            The end time for the user delegation SAS. Must be within 7 days of
            the current time.
        - id: options
          type: >-
            <xref
            uid="@azure/storage-file-datalake.ServiceGetUserDelegationKeyOptions"
            />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-datalake.ServiceGetUserDelegationKeyResponse"
          />&gt;
        description: ''
  - name: listFileSystems(ServiceListFileSystemsOptions)
    uid: '@azure/storage-file-datalake.DataLakeServiceClient.listFileSystems'
    package: '@azure/storage-file-datalake'
    summary: >
      Returns an async iterable iterator to list all the file systems

      under the specified account.

      .byPage() returns an async iterable iterator to list the file systems in
      pages.


      Example using `for await` syntax:


      ```js

      let i = 1;

      for await (const fileSystem of serviceClient.listFileSystems()) {
        console.log(`FileSystem ${i++}: ${fileSystem.name}`);
      }

      ```


      Example using `iter.next()`:


      ```js

      let i = 1;

      const iter = serviceClient.listFileSystems();

      let fileSystemItem = await iter.next();

      while (!fileSystemItem.done) {
        console.log(`FileSystem ${i++}: ${fileSystemItem.value.name}`);
        fileSystemItem = await iter.next();
      }

      ```


      Example using `byPage()`:


      ```js

      // passing optional maxPageSize in the page settings

      let i = 1;

      for await (const response of serviceClient.listFileSystems().byPage({
      maxPageSize: 20 })) {
        if (response.fileSystemItems) {
          for (const fileSystem of response.fileSystemItems) {
            console.log(`FileSystem ${i++}: ${fileSystem.name}`);
          }
        }
      }

      ```


      Example using paging with a marker:


      ```js

      let i = 1;

      let iterator = serviceClient.listFileSystems().byPage({ maxPageSize: 2 });

      let response = (await iterator.next()).value;


      // Prints 2 file system names

      if (response.fileSystemItems) {
        for (const fileSystem of response.fileSystemItems) {
          console.log(`FileSystem ${i++}: ${fileSystem.name}`);
        }
      }


      // Gets next marker

      let marker = response.continuationToken;

      // Passing next marker as continuationToken

      iterator = serviceClient
        .listContainers()
        .byPage({ continuationToken: marker, maxPageSize: 10 });
      response = (await iterator.next()).value;


      // Prints 10 file system names

      if (response.fileSystemItems) {
        for (const fileSystem of response.fileSystemItems) {
           console.log(`FileSystem ${i++}: ${fileSystem.name}`);
        }
      }

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function listFileSystems(options?: ServiceListFileSystemsOptions)'
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/storage-file-datalake.ServiceListFileSystemsOptions" />
          description: ''
      return:
        type: >-
          PagedAsyncIterableIterator&lt;<xref
          uid="@azure/storage-file-datalake.FileSystemItem" />, <xref
          uid="@azure/storage-file-datalake.ServiceListFileSystemsSegmentResponse"
          />&gt;
        description: ''
extends: <xref uid="@azure/storage-file-datalake.StorageClient" />
