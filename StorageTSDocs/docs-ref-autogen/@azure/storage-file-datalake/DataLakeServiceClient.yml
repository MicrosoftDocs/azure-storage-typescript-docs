### YamlMime:UniversalReference
items:
  - uid: '@azure/storage-file-datalake.DataLakeServiceClient'
    name: DataLakeServiceClient
    fullName: DataLakeServiceClient
    children:
      - '@azure/storage-file-datalake.DataLakeServiceClient.accountName'
      - '@azure/storage-file-datalake.DataLakeServiceClient.credential'
      - '@azure/storage-file-datalake.DataLakeServiceClient.constructor_1'
      - '@azure/storage-file-datalake.DataLakeServiceClient.constructor'
      - '@azure/storage-file-datalake.DataLakeServiceClient.getFileSystemClient'
      - '@azure/storage-file-datalake.DataLakeServiceClient.getUserDelegationKey'
      - '@azure/storage-file-datalake.DataLakeServiceClient.listFileSystems'
      - '@azure/storage-file-datalake.DataLakeServiceClient.url'
    langs:
      - typeScript
    type: class
    summary: |-
      DataLakeServiceClient allows you to manipulate Azure
      Data Lake service resources and file systems. The storage account provides
      the top-level namespace for the Data Lake service.
    extends:
      name: '@azure/storage-file-datalake.StorageClient'
    package: '@azure/storage-file-datalake'
  - uid: '@azure/storage-file-datalake.DataLakeServiceClient.accountName'
    name: accountName
    fullName: accountName
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'accountName: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/storage-file-datalake'
  - uid: '@azure/storage-file-datalake.DataLakeServiceClient.credential'
    name: credential
    fullName: credential
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Such as AnonymousCredential, StorageSharedKeyCredential or any credential
      from the @azure/identity package to authenticate requests to the service.
      You can also provide an object that implements the TokenCredential
      interface. If not specified, AnonymousCredential is used.
    syntax:
      content: >-
        credential: StorageSharedKeyCredential | AnonymousCredential |
        TokenCredential
      return:
        type:
          - >-
            @azure/storage-file-datalake.StorageSharedKeyCredential |
            @azure/storage-file-datalake.AnonymousCredential | TokenCredential
        description: ''
    package: '@azure/storage-file-datalake'
  - uid: '@azure/storage-file-datalake.DataLakeServiceClient.constructor_1'
    name: 'DataLakeServiceClient(string, Pipeline)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Creates an instance of DataLakeServiceClient from url and pipeline.
    syntax:
      content: 'new DataLakeServiceClient(url: string, pipeline: Pipeline)'
      parameters:
        - id: url
          type:
            - string
          description: |-
            A Client string pointing to Azure Storage data lake service, such as
                                "https://myaccount.dfs.core.windows.net". You can append a SAS
                                if using AnonymousCredential, such as "https://myaccount.dfs.core.windows.net?sasString".
        - id: pipeline
          type:
            - '@azure/storage-file-datalake.Pipeline'
          description: |-
            Call newPipeline() to create a default
                                       pipeline, or provide a customized pipeline.
    package: '@azure/storage-file-datalake'
  - uid: '@azure/storage-file-datalake.DataLakeServiceClient.constructor'
    name: >-
      DataLakeServiceClient(string, StorageSharedKeyCredential |
      AnonymousCredential | TokenCredential, StoragePipelineOptions)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Creates an instance of DataLakeServiceClient from url.
    syntax:
      content: >-
        new DataLakeServiceClient(url: string, credential?:
        StorageSharedKeyCredential | AnonymousCredential | TokenCredential,
        options?: StoragePipelineOptions)
      parameters:
        - id: url
          type:
            - string
          description: |-
            A Client string pointing to Azure Storage data lake service, such as
                                "https://myaccount.dfs.core.windows.net". You can append a SAS
                                if using AnonymousCredential, such as "https://myaccount.dfs.core.windows.net?sasString".
        - id: credential
          type:
            - >-
              @azure/storage-file-datalake.StorageSharedKeyCredential |
              @azure/storage-file-datalake.AnonymousCredential | TokenCredential
          description: ''
          optional: true
        - id: options
          type:
            - '@azure/storage-file-datalake.StoragePipelineOptions'
          description: ''
          optional: true
    package: '@azure/storage-file-datalake'
  - uid: '@azure/storage-file-datalake.DataLakeServiceClient.getFileSystemClient'
    name: getFileSystemClient(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Creates a <xref:DataLakeFileSystemClient> object.'
    syntax:
      content: 'function getFileSystemClient(fileSystemName: string)'
      parameters:
        - id: fileSystemName
          type:
            - string
          description: File system name.
      return:
        type:
          - '@azure/storage-file-datalake.DataLakeFileSystemClient'
        description: ''
    package: '@azure/storage-file-datalake'
  - uid: '@azure/storage-file-datalake.DataLakeServiceClient.getUserDelegationKey'
    name: 'getUserDelegationKey(Date, Date, ServiceGetUserDelegationKeyOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      ONLY AVAILABLE WHEN USING BEARER TOKEN AUTHENTICATION (TokenCredential).

      Retrieves a user delegation key for the Data Lake service. This is only a
      valid operation when using

      bearer token authentication.
    syntax:
      content: >-
        function getUserDelegationKey(startsOn: Date, expiresOn: Date, options?:
        ServiceGetUserDelegationKeyOptions)
      parameters:
        - id: startsOn
          type:
            - Date
          description: >-
            The start time for the user delegation SAS. Must be within 7 days of
            the current time.
        - id: expiresOn
          type:
            - Date
          description: >-
            The end time for the user delegation SAS. Must be within 7 days of
            the current time.
        - id: options
          type:
            - '@azure/storage-file-datalake.ServiceGetUserDelegationKeyOptions'
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<@azure/storage-file-datalake.ServiceGetUserDelegationKeyResponse>
        description: ''
    package: '@azure/storage-file-datalake'
  - uid: '@azure/storage-file-datalake.DataLakeServiceClient.listFileSystems'
    name: listFileSystems(ServiceListFileSystemsOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Returns an async iterable iterator to list all the file systems

      under the specified account.

      .byPage() returns an async iterable iterator to list the file systems in
      pages.


      Example using `for await` syntax:


      ```js

      let i = 1;

      for await (const fileSystem of serviceClient.listFileSystems()) {
        console.log(`FileSystem ${i++}: ${fileSystem.name}`);
      }

      ```


      Example using `iter.next()`:


      ```js

      let i = 1;

      const iter = serviceClient.listFileSystems();

      let fileSystemItem = await iter.next();

      while (!fileSystemItem.done) {
        console.log(`FileSystem ${i++}: ${fileSystemItem.value.name}`);
        fileSystemItem = await iter.next();
      }

      ```


      Example using `byPage()`:


      ```js

      // passing optional maxPageSize in the page settings

      let i = 1;

      for await (const response of serviceClient.listFileSystems().byPage({
      maxPageSize: 20 })) {
        if (response.fileSystemItems) {
          for (const fileSystem of response.fileSystemItems) {
            console.log(`FileSystem ${i++}: ${fileSystem.name}`);
          }
        }
      }

      ```


      Example using paging with a marker:


      ```js

      let i = 1;

      let iterator = serviceClient.listFileSystems().byPage({ maxPageSize: 2 });

      let response = (await iterator.next()).value;


      // Prints 2 file system names

      if (response.fileSystemItems) {
        for (const fileSystem of response.fileSystemItems) {
          console.log(`FileSystem ${i++}: ${fileSystem.name}`);
        }
      }


      // Gets next marker

      let marker = response.continuationToken;

      // Passing next marker as continuationToken

      iterator = serviceClient
        .listContainers()
        .byPage({ continuationToken: marker, maxPageSize: 10 });
      response = (await iterator.next()).value;


      // Prints 10 file system names

      if (response.fileSystemItems) {
        for (const fileSystem of response.fileSystemItems) {
           console.log(`FileSystem ${i++}: ${fileSystem.name}`);
        }
      }

      ```
    syntax:
      content: 'function listFileSystems(options?: ServiceListFileSystemsOptions)'
      parameters:
        - id: options
          type:
            - '@azure/storage-file-datalake.ServiceListFileSystemsOptions'
          description: ''
          optional: true
      return:
        type:
          - >-
            PagedAsyncIterableIterator<@azure/storage-file-datalake.FileSystemItem,
            @azure/storage-file-datalake.ServiceListFileSystemsSegmentResponse>
        description: ''
    package: '@azure/storage-file-datalake'
  - uid: '@azure/storage-file-datalake.DataLakeServiceClient.url'
    name: url
    fullName: url
    children: []
    langs:
      - typeScript
    type: property
    summary: Encoded URL string value.
    syntax:
      content: 'url: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/storage-file-datalake'
references:
  - uid: '@azure/storage-file-datalake.StorageClient'
    name: StorageClient
    spec.typeScript:
      - name: StorageClient
        fullName: StorageClient
        uid: '@azure/storage-file-datalake.StorageClient'
  - uid: >-
      @azure/storage-file-datalake.StorageSharedKeyCredential |
      @azure/storage-file-datalake.AnonymousCredential | TokenCredential
    name: AnonymousCredential | TokenCredential
    spec.typeScript:
      - name: StorageSharedKeyCredential
        fullName: StorageSharedKeyCredential
        uid: '@azure/storage-file-datalake.StorageSharedKeyCredential'
      - name: ' | '
        fullName: ' | '
      - name: AnonymousCredential
        fullName: AnonymousCredential
        uid: '@azure/storage-file-datalake.AnonymousCredential'
      - name: ' | TokenCredential'
        fullName: ' | TokenCredential'
  - uid: '@azure/storage-file-datalake.StoragePipelineOptions'
    name: StoragePipelineOptions
    spec.typeScript:
      - name: StoragePipelineOptions
        fullName: StoragePipelineOptions
        uid: '@azure/storage-file-datalake.StoragePipelineOptions'
  - uid: '@azure/storage-file-datalake.Pipeline'
    name: Pipeline
    spec.typeScript:
      - name: Pipeline
        fullName: Pipeline
        uid: '@azure/storage-file-datalake.Pipeline'
  - uid: '@azure/storage-file-datalake.DataLakeFileSystemClient'
    name: DataLakeFileSystemClient
    spec.typeScript:
      - name: DataLakeFileSystemClient
        fullName: DataLakeFileSystemClient
        uid: '@azure/storage-file-datalake.DataLakeFileSystemClient'
  - uid: '@azure/storage-file-datalake.ServiceGetUserDelegationKeyOptions'
    name: ServiceGetUserDelegationKeyOptions
    spec.typeScript:
      - name: ServiceGetUserDelegationKeyOptions
        fullName: ServiceGetUserDelegationKeyOptions
        uid: '@azure/storage-file-datalake.ServiceGetUserDelegationKeyOptions'
  - uid: Promise<@azure/storage-file-datalake.ServiceGetUserDelegationKeyResponse>
    name: ServiceGetUserDelegationKeyResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ServiceGetUserDelegationKeyResponse
        fullName: ServiceGetUserDelegationKeyResponse
        uid: '@azure/storage-file-datalake.ServiceGetUserDelegationKeyResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-file-datalake.ServiceListFileSystemsOptions'
    name: ServiceListFileSystemsOptions
    spec.typeScript:
      - name: ServiceListFileSystemsOptions
        fullName: ServiceListFileSystemsOptions
        uid: '@azure/storage-file-datalake.ServiceListFileSystemsOptions'
  - uid: >-
      PagedAsyncIterableIterator<@azure/storage-file-datalake.FileSystemItem,
      @azure/storage-file-datalake.ServiceListFileSystemsSegmentResponse>
    name: ServiceListFileSystemsSegmentResponse>
    spec.typeScript:
      - name: PagedAsyncIterableIterator<
        fullName: PagedAsyncIterableIterator<
      - name: FileSystemItem
        fullName: FileSystemItem
        uid: '@azure/storage-file-datalake.FileSystemItem'
      - name: ', '
        fullName: ', '
      - name: ServiceListFileSystemsSegmentResponse
        fullName: ServiceListFileSystemsSegmentResponse
        uid: '@azure/storage-file-datalake.ServiceListFileSystemsSegmentResponse'
      - name: '>'
        fullName: '>'
