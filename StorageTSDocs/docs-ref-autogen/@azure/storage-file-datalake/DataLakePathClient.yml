### YamlMime:UniversalReference
items:
  - uid: '@azure/storage-file-datalake.DataLakePathClient'
    name: DataLakePathClient
    fullName: DataLakePathClient
    children:
      - '@azure/storage-file-datalake.DataLakePathClient.accountName'
      - '@azure/storage-file-datalake.DataLakePathClient.create'
      - '@azure/storage-file-datalake.DataLakePathClient.createIfNotExists'
      - '@azure/storage-file-datalake.DataLakePathClient.credential'
      - '@azure/storage-file-datalake.DataLakePathClient.constructor_1'
      - '@azure/storage-file-datalake.DataLakePathClient.constructor'
      - '@azure/storage-file-datalake.DataLakePathClient.delete'
      - '@azure/storage-file-datalake.DataLakePathClient.deleteIfExists'
      - '@azure/storage-file-datalake.DataLakePathClient.exists'
      - '@azure/storage-file-datalake.DataLakePathClient.fileSystemName'
      - '@azure/storage-file-datalake.DataLakePathClient.getAccessControl'
      - '@azure/storage-file-datalake.DataLakePathClient.getDataLakeLeaseClient'
      - '@azure/storage-file-datalake.DataLakePathClient.getProperties'
      - '@azure/storage-file-datalake.DataLakePathClient.move'
      - '@azure/storage-file-datalake.DataLakePathClient.move_1'
      - '@azure/storage-file-datalake.DataLakePathClient.name'
      - '@azure/storage-file-datalake.DataLakePathClient.setAccessControl'
      - '@azure/storage-file-datalake.DataLakePathClient.setHttpHeaders'
      - '@azure/storage-file-datalake.DataLakePathClient.setMetadata'
      - '@azure/storage-file-datalake.DataLakePathClient.setPermissions'
      - '@azure/storage-file-datalake.DataLakePathClient.toDirectoryClient'
      - '@azure/storage-file-datalake.DataLakePathClient.toFileClient'
      - '@azure/storage-file-datalake.DataLakePathClient.url'
    langs:
      - typeScript
    type: class
    summary: >-
      A DataLakePathClient represents a URL to the Azure Storage path (directory
      or file).
    extends:
      name: '@azure/storage-file-datalake.StorageClient'
    package: '@azure/storage-file-datalake'
  - uid: '@azure/storage-file-datalake.DataLakePathClient.accountName'
    name: accountName
    fullName: accountName
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'accountName: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/storage-file-datalake'
  - uid: '@azure/storage-file-datalake.DataLakePathClient.create'
    name: 'create(PathResourceType, PathCreateOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Create a directory or path.
    syntax:
      content: >-
        function create(resourceType: PathResourceType, options?:
        PathCreateOptions)
      parameters:
        - id: resourceType
          type:
            - '@azure/storage-file-datalake.PathResourceType'
          description: 'Resource type, "directory" or "file".'
        - id: options
          type:
            - '@azure/storage-file-datalake.PathCreateOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-file-datalake.PathCreateResponse>
        description: ''
    package: '@azure/storage-file-datalake'
  - uid: '@azure/storage-file-datalake.DataLakePathClient.createIfNotExists'
    name: 'createIfNotExists(PathResourceType, PathCreateIfNotExistsOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Create a directory or file. If the resource already exists, it is not
      changed.
    syntax:
      content: >-
        function createIfNotExists(resourceType: PathResourceType, options?:
        PathCreateIfNotExistsOptions)
      parameters:
        - id: resourceType
          type:
            - '@azure/storage-file-datalake.PathResourceType'
          description: 'Resource type, "directory" or "file".'
        - id: options
          type:
            - '@azure/storage-file-datalake.PathCreateIfNotExistsOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-file-datalake.PathCreateIfNotExistsResponse>
        description: ''
    package: '@azure/storage-file-datalake'
  - uid: '@azure/storage-file-datalake.DataLakePathClient.credential'
    name: credential
    fullName: credential
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Such as AnonymousCredential, StorageSharedKeyCredential or any credential
      from the @azure/identity package to authenticate requests to the service.
      You can also provide an object that implements the TokenCredential
      interface. If not specified, AnonymousCredential is used.
    syntax:
      content: >-
        credential: StorageSharedKeyCredential | AnonymousCredential |
        TokenCredential
      return:
        type:
          - >-
            @azure/storage-file-datalake.StorageSharedKeyCredential |
            @azure/storage-file-datalake.AnonymousCredential | TokenCredential
        description: ''
    package: '@azure/storage-file-datalake'
  - uid: '@azure/storage-file-datalake.DataLakePathClient.constructor_1'
    name: 'DataLakePathClient(string, Pipeline)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Creates an instance of DataLakePathClient from url and pipeline.
    syntax:
      content: 'new DataLakePathClient(url: string, pipeline: Pipeline)'
      parameters:
        - id: url
          type:
            - string
          description: >-
            A Client string pointing to Azure Storage data lake path (directory
            or file), such as
                                "https://myaccount.dfs.core.windows.net/filesystem/directory" or "https://myaccount.dfs.core.windows.net/filesystem/file".
                                You can append a SAS if using AnonymousCredential, such as "https://myaccount.dfs.core.windows.net/filesystem/directory?sasString".
        - id: pipeline
          type:
            - '@azure/storage-file-datalake.Pipeline'
          description: |-
            Call newPipeline() to create a default
                                       pipeline, or provide a customized pipeline.
    package: '@azure/storage-file-datalake'
  - uid: '@azure/storage-file-datalake.DataLakePathClient.constructor'
    name: >-
      DataLakePathClient(string, StorageSharedKeyCredential |
      AnonymousCredential | TokenCredential, StoragePipelineOptions)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Creates an instance of DataLakePathClient from url and credential.
    syntax:
      content: >-
        new DataLakePathClient(url: string, credential?:
        StorageSharedKeyCredential | AnonymousCredential | TokenCredential,
        options?: StoragePipelineOptions)
      parameters:
        - id: url
          type:
            - string
          description: >-
            A Client string pointing to Azure Storage data lake path (directory
            or file), such as
                                "https://myaccount.dfs.core.windows.net/filesystem/directory" or "https://myaccount.dfs.core.windows.net/filesystem/file".
                                You can append a SAS if using AnonymousCredential, such as "https://myaccount.dfs.core.windows.net/filesystem/directory?sasString".
        - id: credential
          type:
            - >-
              @azure/storage-file-datalake.StorageSharedKeyCredential |
              @azure/storage-file-datalake.AnonymousCredential | TokenCredential
          description: ''
          optional: true
        - id: options
          type:
            - '@azure/storage-file-datalake.StoragePipelineOptions'
          description: ''
          optional: true
    package: '@azure/storage-file-datalake'
  - uid: '@azure/storage-file-datalake.DataLakePathClient.delete'
    name: 'delete(boolean, PathDeleteOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Delete current path (directory or file).
    syntax:
      content: 'function delete(recursive?: boolean, options?: PathDeleteOptions)'
      parameters:
        - id: recursive
          type:
            - boolean
          description: ''
          optional: true
        - id: options
          type:
            - '@azure/storage-file-datalake.PathDeleteOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-file-datalake.PathDeleteResponse>
        description: ''
    package: '@azure/storage-file-datalake'
  - uid: '@azure/storage-file-datalake.DataLakePathClient.deleteIfExists'
    name: 'deleteIfExists(boolean, PathDeleteOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Delete current path (directory or file) if it exists.
    syntax:
      content: >-
        function deleteIfExists(recursive?: boolean, options?:
        PathDeleteOptions)
      parameters:
        - id: recursive
          type:
            - boolean
          description: ''
          optional: true
        - id: options
          type:
            - '@azure/storage-file-datalake.PathDeleteOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-file-datalake.PathDeleteIfExistsResponse>
        description: ''
    package: '@azure/storage-file-datalake'
  - uid: '@azure/storage-file-datalake.DataLakePathClient.exists'
    name: exists(PathExistsOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Returns true if the Data Lake file represented by this client exists;
      false otherwise.

      NOTE: use this function with care since an existing file might be deleted
      by other clients or

      applications. Vice versa new files might be added by other clients or
      applications after this

      function completes.
    syntax:
      content: 'function exists(options?: PathExistsOptions)'
      parameters:
        - id: options
          type:
            - '@azure/storage-file-datalake.PathExistsOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<boolean>
        description: ''
    package: '@azure/storage-file-datalake'
  - uid: '@azure/storage-file-datalake.DataLakePathClient.fileSystemName'
    name: fileSystemName
    fullName: fileSystemName
    children: []
    langs:
      - typeScript
    type: property
    summary: Name of current file system.
    syntax:
      content: string fileSystemName
      return:
        type:
          - string
        description: ''
    package: '@azure/storage-file-datalake'
  - uid: '@azure/storage-file-datalake.DataLakePathClient.getAccessControl'
    name: getAccessControl(PathGetAccessControlOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: Returns the access control data for a path (directory of file).
    syntax:
      content: 'function getAccessControl(options?: PathGetAccessControlOptions)'
      parameters:
        - id: options
          type:
            - '@azure/storage-file-datalake.PathGetAccessControlOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-file-datalake.PathGetAccessControlResponse>
        description: ''
    package: '@azure/storage-file-datalake'
  - uid: '@azure/storage-file-datalake.DataLakePathClient.getDataLakeLeaseClient'
    name: getDataLakeLeaseClient(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Get a <xref:DataLakeLeaseClient> that manages leases on the path
      (directory or file).
    syntax:
      content: 'function getDataLakeLeaseClient(proposeLeaseId?: string)'
      parameters:
        - id: proposeLeaseId
          type:
            - string
          description: ''
          optional: true
      return:
        type:
          - '@azure/storage-file-datalake.DataLakeLeaseClient'
        description: ''
    package: '@azure/storage-file-datalake'
  - uid: '@azure/storage-file-datalake.DataLakePathClient.getProperties'
    name: getProperties(PathGetPropertiesOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Returns all user-defined metadata, standard HTTP properties, and system
      properties

      for the path (directory or file).

      WARNING: The `metadata` object returned in the response will have its keys
      in lowercase, even if

      they originally contained uppercase characters. This differs from the
      metadata keys returned by

      the methods of <xref:DataLakeFileSystemClient> that list paths using the
      `includeMetadata` option, which

      will retain their original casing.
    syntax:
      content: 'function getProperties(options?: PathGetPropertiesOptions)'
      parameters:
        - id: options
          type:
            - '@azure/storage-file-datalake.PathGetPropertiesOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-file-datalake.PathGetPropertiesResponse>
        description: ''
    package: '@azure/storage-file-datalake'
  - uid: '@azure/storage-file-datalake.DataLakePathClient.move'
    name: 'move(string, PathMoveOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Move directory or file within same file system.
    syntax:
      content: 'function move(destinationPath: string, options?: PathMoveOptions)'
      parameters:
        - id: destinationPath
          type:
            - string
          description: >-
            Destination directory path like "directory" or file path
            "directory/file"
        - id: options
          type:
            - '@azure/storage-file-datalake.PathMoveOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-file-datalake.PathMoveResponse>
        description: ''
    package: '@azure/storage-file-datalake'
  - uid: '@azure/storage-file-datalake.DataLakePathClient.move_1'
    name: 'move(string, string, PathMoveOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Move directory or file to another file system.
    syntax:
      content: >-
        function move(destinationFileSystem: string, destinationPath: string,
        options?: PathMoveOptions)
      parameters:
        - id: destinationFileSystem
          type:
            - string
          description: Destination file system like "filesystem".
        - id: destinationPath
          type:
            - string
          description: >-
            Destination directory path like "directory" or file path
            "directory/file"
        - id: options
          type:
            - '@azure/storage-file-datalake.PathMoveOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-file-datalake.PathMoveResponse>
        description: ''
    package: '@azure/storage-file-datalake'
  - uid: '@azure/storage-file-datalake.DataLakePathClient.name'
    name: name
    fullName: name
    children: []
    langs:
      - typeScript
    type: property
    summary: Name of current path (directory or file).
    syntax:
      content: string name
      return:
        type:
          - string
        description: ''
    package: '@azure/storage-file-datalake'
  - uid: '@azure/storage-file-datalake.DataLakePathClient.setAccessControl'
    name: 'setAccessControl(PathAccessControlItem[], PathSetAccessControlOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Set the access control data for a path (directory of file).
    syntax:
      content: >-
        function setAccessControl(acl: PathAccessControlItem[], options?:
        PathSetAccessControlOptions)
      parameters:
        - id: acl
          type:
            - '@azure/storage-file-datalake.PathAccessControlItem[]'
          description: The POSIX access control list for the file or directory.
        - id: options
          type:
            - '@azure/storage-file-datalake.PathSetAccessControlOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-file-datalake.PathSetAccessControlResponse>
        description: ''
    package: '@azure/storage-file-datalake'
  - uid: '@azure/storage-file-datalake.DataLakePathClient.setHttpHeaders'
    name: 'setHttpHeaders(PathHttpHeaders, PathSetHttpHeadersOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Sets system properties on the path (directory or file).

      If no value provided, or no value provided for the specified blob HTTP
      headers,

      these blob HTTP headers without a value will be cleared.
    syntax:
      content: >-
        function setHttpHeaders(httpHeaders: PathHttpHeaders, options?:
        PathSetHttpHeadersOptions)
      parameters:
        - id: httpHeaders
          type:
            - '@azure/storage-file-datalake.PathHttpHeaders'
          description: ''
        - id: options
          type:
            - '@azure/storage-file-datalake.PathSetHttpHeadersOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-file-datalake.PathSetHttpHeadersResponse>
        description: ''
    package: '@azure/storage-file-datalake'
  - uid: '@azure/storage-file-datalake.DataLakePathClient.setMetadata'
    name: 'setMetadata(Metadata, PathSetMetadataOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Sets user-defined metadata for the specified path (directory of file) as
      one or more name-value pairs.

      If no option provided, or no metadata defined in the parameter, the path

      metadata will be removed.
    syntax:
      content: >-
        function setMetadata(metadata?: Metadata, options?:
        PathSetMetadataOptions)
      parameters:
        - id: metadata
          type:
            - '@azure/storage-file-datalake.Metadata'
          description: ''
          optional: true
        - id: options
          type:
            - '@azure/storage-file-datalake.PathSetMetadataOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-file-datalake.PathSetMetadataResponse>
        description: ''
    package: '@azure/storage-file-datalake'
  - uid: '@azure/storage-file-datalake.DataLakePathClient.setPermissions'
    name: 'setPermissions(PathPermissions, PathSetPermissionsOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Sets the file permissions on a path.
    syntax:
      content: >-
        function setPermissions(permissions: PathPermissions, options?:
        PathSetPermissionsOptions)
      parameters:
        - id: permissions
          type:
            - '@azure/storage-file-datalake.PathPermissions'
          description: >-
            The POSIX access permissions for the file owner, the file owning
            group, and others.
        - id: options
          type:
            - '@azure/storage-file-datalake.PathSetPermissionsOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-file-datalake.PathSetAccessControlResponse>
        description: ''
    package: '@azure/storage-file-datalake'
  - uid: '@azure/storage-file-datalake.DataLakePathClient.toDirectoryClient'
    name: toDirectoryClient()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Convert current DataLakePathClient to DataLakeDirectoryClient if current
      path is a directory.
    syntax:
      content: function toDirectoryClient()
      parameters: []
      return:
        type:
          - '@azure/storage-file-datalake.DataLakeDirectoryClient'
        description: ''
    package: '@azure/storage-file-datalake'
  - uid: '@azure/storage-file-datalake.DataLakePathClient.toFileClient'
    name: toFileClient()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Convert current DataLakePathClient to DataLakeFileClient if current path
      is a file.
    syntax:
      content: function toFileClient()
      parameters: []
      return:
        type:
          - '@azure/storage-file-datalake.DataLakeFileClient'
        description: ''
    package: '@azure/storage-file-datalake'
  - uid: '@azure/storage-file-datalake.DataLakePathClient.url'
    name: url
    fullName: url
    children: []
    langs:
      - typeScript
    type: property
    summary: Encoded URL string value.
    syntax:
      content: 'url: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/storage-file-datalake'
references:
  - uid: '@azure/storage-file-datalake.StorageClient'
    name: StorageClient
    spec.typeScript:
      - name: StorageClient
        fullName: StorageClient
        uid: '@azure/storage-file-datalake.StorageClient'
  - uid: >-
      @azure/storage-file-datalake.StorageSharedKeyCredential |
      @azure/storage-file-datalake.AnonymousCredential | TokenCredential
    name: AnonymousCredential | TokenCredential
    spec.typeScript:
      - name: StorageSharedKeyCredential
        fullName: StorageSharedKeyCredential
        uid: '@azure/storage-file-datalake.StorageSharedKeyCredential'
      - name: ' | '
        fullName: ' | '
      - name: AnonymousCredential
        fullName: AnonymousCredential
        uid: '@azure/storage-file-datalake.AnonymousCredential'
      - name: ' | TokenCredential'
        fullName: ' | TokenCredential'
  - uid: '@azure/storage-file-datalake.StoragePipelineOptions'
    name: StoragePipelineOptions
    spec.typeScript:
      - name: StoragePipelineOptions
        fullName: StoragePipelineOptions
        uid: '@azure/storage-file-datalake.StoragePipelineOptions'
  - uid: '@azure/storage-file-datalake.Pipeline'
    name: Pipeline
    spec.typeScript:
      - name: Pipeline
        fullName: Pipeline
        uid: '@azure/storage-file-datalake.Pipeline'
  - uid: '@azure/storage-file-datalake.PathResourceType'
    name: PathResourceType
    spec.typeScript:
      - name: PathResourceType
        fullName: PathResourceType
        uid: '@azure/storage-file-datalake.PathResourceType'
  - uid: '@azure/storage-file-datalake.PathCreateOptions'
    name: PathCreateOptions
    spec.typeScript:
      - name: PathCreateOptions
        fullName: PathCreateOptions
        uid: '@azure/storage-file-datalake.PathCreateOptions'
  - uid: Promise<@azure/storage-file-datalake.PathCreateResponse>
    name: PathCreateResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: PathCreateResponse
        fullName: PathCreateResponse
        uid: '@azure/storage-file-datalake.PathCreateResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-file-datalake.PathCreateIfNotExistsOptions'
    name: PathCreateIfNotExistsOptions
    spec.typeScript:
      - name: PathCreateIfNotExistsOptions
        fullName: PathCreateIfNotExistsOptions
        uid: '@azure/storage-file-datalake.PathCreateIfNotExistsOptions'
  - uid: Promise<@azure/storage-file-datalake.PathCreateIfNotExistsResponse>
    name: PathCreateIfNotExistsResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: PathCreateIfNotExistsResponse
        fullName: PathCreateIfNotExistsResponse
        uid: '@azure/storage-file-datalake.PathCreateIfNotExistsResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-file-datalake.PathDeleteOptions'
    name: PathDeleteOptions
    spec.typeScript:
      - name: PathDeleteOptions
        fullName: PathDeleteOptions
        uid: '@azure/storage-file-datalake.PathDeleteOptions'
  - uid: Promise<@azure/storage-file-datalake.PathDeleteResponse>
    name: PathDeleteResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: PathDeleteResponse
        fullName: PathDeleteResponse
        uid: '@azure/storage-file-datalake.PathDeleteResponse'
      - name: '>'
        fullName: '>'
  - uid: Promise<@azure/storage-file-datalake.PathDeleteIfExistsResponse>
    name: PathDeleteIfExistsResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: PathDeleteIfExistsResponse
        fullName: PathDeleteIfExistsResponse
        uid: '@azure/storage-file-datalake.PathDeleteIfExistsResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-file-datalake.PathExistsOptions'
    name: PathExistsOptions
    spec.typeScript:
      - name: PathExistsOptions
        fullName: PathExistsOptions
        uid: '@azure/storage-file-datalake.PathExistsOptions'
  - uid: '@azure/storage-file-datalake.PathGetAccessControlOptions'
    name: PathGetAccessControlOptions
    spec.typeScript:
      - name: PathGetAccessControlOptions
        fullName: PathGetAccessControlOptions
        uid: '@azure/storage-file-datalake.PathGetAccessControlOptions'
  - uid: Promise<@azure/storage-file-datalake.PathGetAccessControlResponse>
    name: PathGetAccessControlResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: PathGetAccessControlResponse
        fullName: PathGetAccessControlResponse
        uid: '@azure/storage-file-datalake.PathGetAccessControlResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-file-datalake.DataLakeLeaseClient'
    name: DataLakeLeaseClient
    spec.typeScript:
      - name: DataLakeLeaseClient
        fullName: DataLakeLeaseClient
        uid: '@azure/storage-file-datalake.DataLakeLeaseClient'
  - uid: '@azure/storage-file-datalake.PathGetPropertiesOptions'
    name: PathGetPropertiesOptions
    spec.typeScript:
      - name: PathGetPropertiesOptions
        fullName: PathGetPropertiesOptions
        uid: '@azure/storage-file-datalake.PathGetPropertiesOptions'
  - uid: Promise<@azure/storage-file-datalake.PathGetPropertiesResponse>
    name: PathGetPropertiesResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: PathGetPropertiesResponse
        fullName: PathGetPropertiesResponse
        uid: '@azure/storage-file-datalake.PathGetPropertiesResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-file-datalake.PathMoveOptions'
    name: PathMoveOptions
    spec.typeScript:
      - name: PathMoveOptions
        fullName: PathMoveOptions
        uid: '@azure/storage-file-datalake.PathMoveOptions'
  - uid: Promise<@azure/storage-file-datalake.PathMoveResponse>
    name: PathMoveResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: PathMoveResponse
        fullName: PathMoveResponse
        uid: '@azure/storage-file-datalake.PathMoveResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-file-datalake.PathAccessControlItem[]'
    name: 'PathAccessControlItem[]'
    spec.typeScript:
      - name: PathAccessControlItem
        fullName: PathAccessControlItem
        uid: '@azure/storage-file-datalake.PathAccessControlItem'
      - name: '[]'
        fullName: '[]'
  - uid: '@azure/storage-file-datalake.PathSetAccessControlOptions'
    name: PathSetAccessControlOptions
    spec.typeScript:
      - name: PathSetAccessControlOptions
        fullName: PathSetAccessControlOptions
        uid: '@azure/storage-file-datalake.PathSetAccessControlOptions'
  - uid: Promise<@azure/storage-file-datalake.PathSetAccessControlResponse>
    name: PathSetAccessControlResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: PathSetAccessControlResponse
        fullName: PathSetAccessControlResponse
        uid: '@azure/storage-file-datalake.PathSetAccessControlResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-file-datalake.PathHttpHeaders'
    name: PathHttpHeaders
    spec.typeScript:
      - name: PathHttpHeaders
        fullName: PathHttpHeaders
        uid: '@azure/storage-file-datalake.PathHttpHeaders'
  - uid: '@azure/storage-file-datalake.PathSetHttpHeadersOptions'
    name: PathSetHttpHeadersOptions
    spec.typeScript:
      - name: PathSetHttpHeadersOptions
        fullName: PathSetHttpHeadersOptions
        uid: '@azure/storage-file-datalake.PathSetHttpHeadersOptions'
  - uid: Promise<@azure/storage-file-datalake.PathSetHttpHeadersResponse>
    name: PathSetHttpHeadersResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: PathSetHttpHeadersResponse
        fullName: PathSetHttpHeadersResponse
        uid: '@azure/storage-file-datalake.PathSetHttpHeadersResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-file-datalake.Metadata'
    name: Metadata
    spec.typeScript:
      - name: Metadata
        fullName: Metadata
        uid: '@azure/storage-file-datalake.Metadata'
  - uid: '@azure/storage-file-datalake.PathSetMetadataOptions'
    name: PathSetMetadataOptions
    spec.typeScript:
      - name: PathSetMetadataOptions
        fullName: PathSetMetadataOptions
        uid: '@azure/storage-file-datalake.PathSetMetadataOptions'
  - uid: Promise<@azure/storage-file-datalake.PathSetMetadataResponse>
    name: PathSetMetadataResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: PathSetMetadataResponse
        fullName: PathSetMetadataResponse
        uid: '@azure/storage-file-datalake.PathSetMetadataResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-file-datalake.PathPermissions'
    name: PathPermissions
    spec.typeScript:
      - name: PathPermissions
        fullName: PathPermissions
        uid: '@azure/storage-file-datalake.PathPermissions'
  - uid: '@azure/storage-file-datalake.PathSetPermissionsOptions'
    name: PathSetPermissionsOptions
    spec.typeScript:
      - name: PathSetPermissionsOptions
        fullName: PathSetPermissionsOptions
        uid: '@azure/storage-file-datalake.PathSetPermissionsOptions'
  - uid: '@azure/storage-file-datalake.DataLakeDirectoryClient'
    name: DataLakeDirectoryClient
    spec.typeScript:
      - name: DataLakeDirectoryClient
        fullName: DataLakeDirectoryClient
        uid: '@azure/storage-file-datalake.DataLakeDirectoryClient'
  - uid: '@azure/storage-file-datalake.DataLakeFileClient'
    name: DataLakeFileClient
    spec.typeScript:
      - name: DataLakeFileClient
        fullName: DataLakeFileClient
        uid: '@azure/storage-file-datalake.DataLakeFileClient'
