### YamlMime:UniversalReference
items:
  - uid: '@azure/storage-file-share.ShareDirectoryClient'
    name: ShareDirectoryClient
    fullName: ShareDirectoryClient
    children:
      - '@azure/storage-file-share.ShareDirectoryClient.accountName'
      - '@azure/storage-file-share.ShareDirectoryClient.create'
      - '@azure/storage-file-share.ShareDirectoryClient.createFile'
      - '@azure/storage-file-share.ShareDirectoryClient.createIfNotExists'
      - '@azure/storage-file-share.ShareDirectoryClient.createSubdirectory'
      - '@azure/storage-file-share.ShareDirectoryClient.delete'
      - '@azure/storage-file-share.ShareDirectoryClient.deleteFile'
      - '@azure/storage-file-share.ShareDirectoryClient.deleteIfExists'
      - '@azure/storage-file-share.ShareDirectoryClient.deleteSubdirectory'
      - '@azure/storage-file-share.ShareDirectoryClient.exists'
      - '@azure/storage-file-share.ShareDirectoryClient.forceCloseAllHandles'
      - '@azure/storage-file-share.ShareDirectoryClient.forceCloseHandle'
      - '@azure/storage-file-share.ShareDirectoryClient.getDirectoryClient'
      - '@azure/storage-file-share.ShareDirectoryClient.getFileClient'
      - '@azure/storage-file-share.ShareDirectoryClient.getProperties'
      - '@azure/storage-file-share.ShareDirectoryClient.listFilesAndDirectories'
      - '@azure/storage-file-share.ShareDirectoryClient.listHandles'
      - '@azure/storage-file-share.ShareDirectoryClient.name'
      - '@azure/storage-file-share.ShareDirectoryClient.path'
      - '@azure/storage-file-share.ShareDirectoryClient.setMetadata'
      - '@azure/storage-file-share.ShareDirectoryClient.setProperties'
      - '@azure/storage-file-share.ShareDirectoryClient.constructor'
      - '@azure/storage-file-share.ShareDirectoryClient.constructor_1'
      - '@azure/storage-file-share.ShareDirectoryClient.shareName'
      - '@azure/storage-file-share.ShareDirectoryClient.url'
    langs:
      - typeScript
    type: class
    summary: >-
      A ShareDirectoryClient represents a URL to the Azure Storage directory
      allowing you to manipulate its files and directories.
    extends:
      name: '@azure/storage-file-share.StorageClient'
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.ShareDirectoryClient.accountName'
    name: accountName
    fullName: accountName
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'accountName: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.ShareDirectoryClient.create'
    name: create(DirectoryCreateOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: Creates a new directory under the specified share or parent directory.
    syntax:
      content: 'function create(options?: DirectoryCreateOptions)'
      parameters:
        - id: options
          type:
            - '@azure/storage-file-share.DirectoryCreateOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-file-share.DirectoryCreateResponse>
        description: Response data for the Directory  operation.
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.ShareDirectoryClient.createFile'
    name: 'createFile(string, number, FileCreateOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates a new file or replaces a file under this directory. Note it only
      initializes the file with no content.
    syntax:
      content: >-
        function createFile(fileName: string, size: number, options?:
        FileCreateOptions)
      parameters:
        - id: fileName
          type:
            - string
          description: ''
        - id: size
          type:
            - number
          description: 'Specifies the maximum size in bytes for the file, up to 1 TB.'
        - id: options
          type:
            - '@azure/storage-file-share.FileCreateOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<Object>
        description: '>} File creation response data and the corresponding file client.'
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.ShareDirectoryClient.createIfNotExists'
    name: createIfNotExists(DirectoryCreateOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates a new directory under the specified share or parent directory if
      it does not already exists.

      If the directory already exists, it is not modified.
    syntax:
      content: 'function createIfNotExists(options?: DirectoryCreateOptions)'
      parameters:
        - id: options
          type:
            - '@azure/storage-file-share.DirectoryCreateOptions'
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<@azure/storage-file-share.DirectoryCreateIfNotExistsResponse>
        description: ''
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.ShareDirectoryClient.createSubdirectory'
    name: 'createSubdirectory(string, DirectoryCreateOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Creates a new subdirectory under this directory.
    syntax:
      content: >-
        function createSubdirectory(directoryName: string, options?:
        DirectoryCreateOptions)
      parameters:
        - id: directoryName
          type:
            - string
          description: ''
        - id: options
          type:
            - '@azure/storage-file-share.DirectoryCreateOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<Object>
        description: >-
          >} Directory create response data and the corresponding
          DirectoryClient instance.
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.ShareDirectoryClient.delete'
    name: delete(DirectoryDeleteOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Removes the specified empty directory. Note that the directory must be
      empty before it can be

      deleted.
    syntax:
      content: 'function delete(options?: DirectoryDeleteOptions)'
      parameters:
        - id: options
          type:
            - '@azure/storage-file-share.DirectoryDeleteOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-file-share.DirectoryDeleteResponse>
        description: Response data for the Directory Delete operation.
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.ShareDirectoryClient.deleteFile'
    name: 'deleteFile(string, FileDeleteOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Removes the specified file under this directory from the storage account.

      When a file is successfully deleted, it is immediately removed from the
      storage

      account's index and is no longer accessible to clients. The file's data is
      later

      removed from the service during garbage collection.

      Delete File will fail with status code 409 (Conflict) and error code
      SharingViolation

      if the file is open on an SMB client.


      Delete File is not supported on a share snapshot, which is a read-only
      copy of

      a share. An attempt to perform this operation on a share snapshot will
      fail with 400 (InvalidQueryParameterValue)
    syntax:
      content: 'function deleteFile(fileName: string, options?: FileDeleteOptions)'
      parameters:
        - id: fileName
          type:
            - string
          description: Name of the file to delete
        - id: options
          type:
            - '@azure/storage-file-share.FileDeleteOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-file-share.FileDeleteResponse>
        description: File deletion response data.
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.ShareDirectoryClient.deleteIfExists'
    name: deleteIfExists(DirectoryDeleteOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Removes the specified empty directory if it exists. Note that the
      directory must be empty before it can be

      deleted.
    syntax:
      content: 'function deleteIfExists(options?: DirectoryDeleteOptions)'
      parameters:
        - id: options
          type:
            - '@azure/storage-file-share.DirectoryDeleteOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-file-share.DirectoryDeleteIfExistsResponse>
        description: ''
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.ShareDirectoryClient.deleteSubdirectory'
    name: 'deleteSubdirectory(string, DirectoryDeleteOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Removes the specified empty sub directory under this directory.
      Note that the directory must be empty before it can be deleted.
    syntax:
      content: >-
        function deleteSubdirectory(directoryName: string, options?:
        DirectoryDeleteOptions)
      parameters:
        - id: directoryName
          type:
            - string
          description: ''
        - id: options
          type:
            - '@azure/storage-file-share.DirectoryDeleteOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-file-share.DirectoryDeleteResponse>
        description: Directory deletion response data.
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.ShareDirectoryClient.exists'
    name: exists(DirectoryExistsOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Returns true if the specified directory exists; false otherwise.

      NOTE: use this function with care since an existing directory might be
      deleted by other clients or

      applications. Vice versa new directories might be added by other clients
      or applications after this

      function completes.
    syntax:
      content: 'function exists(options?: DirectoryExistsOptions)'
      parameters:
        - id: options
          type:
            - '@azure/storage-file-share.DirectoryExistsOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<boolean>
        description: ''
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.ShareDirectoryClient.forceCloseAllHandles'
    name: forceCloseAllHandles(DirectoryForceCloseHandlesSegmentOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: Force close all handles for a directory.
    syntax:
      content: >-
        function forceCloseAllHandles(options?:
        DirectoryForceCloseHandlesSegmentOptions)
      parameters:
        - id: options
          type:
            - '@azure/storage-file-share.DirectoryForceCloseHandlesSegmentOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-file-share.CloseHandlesInfo>
        description: ''
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.ShareDirectoryClient.forceCloseHandle'
    name: 'forceCloseHandle(string, DirectoryForceCloseHandlesOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Force close a specific handle for a directory.
    syntax:
      content: >-
        function forceCloseHandle(handleId: string, options?:
        DirectoryForceCloseHandlesOptions)
      parameters:
        - id: handleId
          type:
            - string
          description: |-
            Specific handle ID, cannot be asterisk "*".
                                     Use forceCloseHandlesSegment() to close all handles.
        - id: options
          type:
            - '@azure/storage-file-share.DirectoryForceCloseHandlesOptions'
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<@azure/storage-file-share.DirectoryForceCloseHandlesResponse>
        description: ''
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.ShareDirectoryClient.getDirectoryClient'
    name: getDirectoryClient(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: Creates a ShareDirectoryClient object for a sub directory.
    syntax:
      content: 'function getDirectoryClient(subDirectoryName: string)'
      parameters:
        - id: subDirectoryName
          type:
            - string
          description: A subdirectory name
      return:
        type:
          - '@azure/storage-file-share.ShareDirectoryClient'
        description: The ShareDirectoryClient object for the given subdirectory name.
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.ShareDirectoryClient.getFileClient'
    name: getFileClient(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Creates a <xref:ShareFileClient> object.'
    syntax:
      content: 'function getFileClient(fileName: string)'
      parameters:
        - id: fileName
          type:
            - string
          description: A file name.
      return:
        type:
          - '@azure/storage-file-share.ShareFileClient'
        description: A new ShareFileClient object for the given file name.
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.ShareDirectoryClient.getProperties'
    name: getProperties(DirectoryGetPropertiesOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns all system properties for the specified directory, and can also be
      used to check the

      existence of a directory. The data returned does not include the files in
      the directory or any

      subdirectories.
    syntax:
      content: 'function getProperties(options?: DirectoryGetPropertiesOptions)'
      parameters:
        - id: options
          type:
            - '@azure/storage-file-share.DirectoryGetPropertiesOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-file-share.DirectoryGetPropertiesResponse>
        description: Response data for the Directory Get Properties operation.
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.ShareDirectoryClient.listFilesAndDirectories'
    name: listFilesAndDirectories(DirectoryListFilesAndDirectoriesOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Returns an async iterable iterator to list all the files and directories

      under the specified account.

      .byPage() returns an async iterable iterator to list the files and
      directories in pages.


      Example using `for await` syntax:


      ```js

      let i = 1;

      for await (const entity of directoryClient.listFilesAndDirectories()) {
        if (entity.kind === "directory") {
          console.log(`${i++} - directory\t: ${entity.name}`);
        } else {
          console.log(`${i++} - file\t: ${entity.name}`);
        }
      }

      ```


      Example using `iter.next()`:


      ```js

      let i = 1;

      let iter = directoryClient.listFilesAndDirectories();

      let entity = await iter.next();

      while (!entity.done) {
        if (entity.value.kind === "directory") {
          console.log(`${i++} - directory\t: ${entity.value.name}`);
        } else {
          console.log(`${i++} - file\t: ${entity.value.name}`);
        }
        entity = await iter.next();
      }

      ```


      Example using `byPage()`:


      ```js

      // passing optional maxPageSize in the page settings

      let i = 1;

      for await (const response of directoryClient
        .listFilesAndDirectories()
        .byPage({ maxPageSize: 20 })) {
        for (const fileItem of response.segment.fileItems) {
          console.log(`${i++} - file\t: ${fileItem.name}`);
        }
        for (const dirItem of response.segment.directoryItems) {
          console.log(`${i++} - directory\t: ${dirItem.name}`);
        }
      }

      ```


      Example using paging with a marker:


      ```js

      let i = 1;

      let iterator = directoryClient.listFilesAndDirectories().byPage({
      maxPageSize: 3 });

      let response = (await iterator.next()).value;


      // Prints 3 file and directory names

      for (const fileItem of response.segment.fileItems) {
        console.log(`${i++} - file\t: ${fileItem.name}`);
      }


      for (const dirItem of response.segment.directoryItems) {
        console.log(`${i++} - directory\t: ${dirItem.name}`);
      }


      // Gets next marker

      let dirMarker = response.continuationToken;


      // Passing next marker as continuationToken

      iterator = directoryClient
        .listFilesAndDirectories()
        .byPage({ continuationToken: dirMarker, maxPageSize: 4 });
      response = (await iterator.next()).value;


      // Prints 10 file and directory names

      for (const fileItem of response.segment.fileItems) {
        console.log(`${i++} - file\t: ${fileItem.name}`);
      }


      for (const dirItem of response.segment.directoryItems) {
        console.log(`${i++} - directory\t: ${dirItem.name}`);
      }

      ```
    syntax:
      content: >-
        function listFilesAndDirectories(options?:
        DirectoryListFilesAndDirectoriesOptions)
      parameters:
        - id: options
          type:
            - '@azure/storage-file-share.DirectoryListFilesAndDirectoriesOptions'
          description: ''
          optional: true
      return:
        type:
          - >-
            PagedAsyncIterableIterator<Object &
            @azure/storage-file-share.FileItem | Object &
            @azure/storage-file-share.DirectoryItem,
            @azure/storage-file-share.DirectoryListFilesAndDirectoriesSegmentResponse>
        description: >-
          & FileItem | { kind: "directory" } ,
          DirectoryListFilesAndDirectoriesSegmentResponse>}

          An asyncIterableIterator that supports paging.
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.ShareDirectoryClient.listHandles'
    name: listHandles(DirectoryListHandlesOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Returns an async iterable iterator to list all the handles.

      under the specified account.

      .byPage() returns an async iterable iterator to list the handles in pages.


      Example using `for await` syntax:


      ```js

      let i = 1;

      let iter = dirClient.listHandles();

      for await (const handle of iter) {
        console.log(`Handle ${i++}: ${handle.path}, opened time ${handle.openTime}, clientIp ${handle.clientIp}`);
      }

      ```


      Example using `iter.next()`:


      ```js

      let i = 1;

      let iter = dirClient.listHandles();

      let handleItem = await iter.next();

      while (!handleItem.done) {
        console.log(`Handle ${i++}: ${handleItem.value.path}, opened time ${handleItem.value.openTime}, clientIp ${handleItem.value.clientIp}`);
        handleItem = await iter.next();
      }

      ```


      Example using `byPage()`:


      ```js

      // passing optional maxPageSize in the page settings

      let i = 1;

      for await (const response of dirClient.listHandles({ recursive: true
      }).byPage({ maxPageSize: 20 })) {
        if (response.handleList) {
          for (const handle of response.handleList) {
            console.log(`Handle ${i++}: ${handle.path}, opened time ${handle.openTime}, clientIp ${handle.clientIp}`);
          }
        }
      }

      ```


      Example using paging with a marker:


      ```js

      let i = 1;

      let iterator = dirClient.listHandles().byPage({ maxPageSize: 2 });

      let response = await iterator.next();


      // Prints 2 handles

      if (response.value.handleList) {
        for (const handle of response.value.handleList) {
          console.log(`Handle ${i++}: ${handle.path}, opened time ${handle.openTime}, clientIp ${handle.clientIp}`);
        }
      }


      // Gets next marker

      let marker = response.value.continuationToken;


      // Passing next marker as continuationToken

      console.log(`    continuation`);

      iterator = dirClient.listHandles().byPage({ continuationToken: marker,
      maxPageSize: 10 });

      response = await iterator.next();


      // Prints 2 more handles assuming you have more than four directory/files
      opened

      if (!response.done && response.value.handleList) {
        for (const handle of response.value.handleList) {
          console.log(`Handle ${i++}: ${handle.path}, opened time ${handle.openTime}, clientIp ${handle.clientIp}`);
        }
      }

      ```
    syntax:
      content: 'function listHandles(options?: DirectoryListHandlesOptions)'
      parameters:
        - id: options
          type:
            - '@azure/storage-file-share.DirectoryListHandlesOptions'
          description: ''
          optional: true
      return:
        type:
          - >-
            PagedAsyncIterableIterator<@azure/storage-file-share.HandleItem,
            @azure/storage-file-share.DirectoryListHandlesResponse>
        description: An asyncIterableIterator that supports paging.
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.ShareDirectoryClient.name'
    name: name
    fullName: name
    children: []
    langs:
      - typeScript
    type: property
    summary: The name of the directory
    syntax:
      content: string name
      return:
        type:
          - string
        description: ''
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.ShareDirectoryClient.path'
    name: path
    fullName: path
    children: []
    langs:
      - typeScript
    type: property
    summary: The full path of the directory
    syntax:
      content: string path
      return:
        type:
          - string
        description: ''
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.ShareDirectoryClient.setMetadata'
    name: 'setMetadata(Metadata, DirectorySetMetadataOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Updates user defined metadata for the specified directory.
    syntax:
      content: >-
        function setMetadata(metadata?: Metadata, options?:
        DirectorySetMetadataOptions)
      parameters:
        - id: metadata
          type:
            - '@azure/storage-file-share.Metadata'
          description: ''
          optional: true
        - id: options
          type:
            - '@azure/storage-file-share.DirectorySetMetadataOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-file-share.DirectorySetMetadataResponse>
        description: Response data for the Directory Set Metadata operation.
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.ShareDirectoryClient.setProperties'
    name: setProperties(DirectoryProperties)
    children: []
    type: method
    langs:
      - typeScript
    summary: Sets properties on the directory.
    syntax:
      content: 'function setProperties(properties?: DirectoryProperties)'
      parameters:
        - id: properties
          type:
            - '@azure/storage-file-share.DirectoryProperties'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-file-share.DirectorySetPropertiesResponse>
        description: ''
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.ShareDirectoryClient.constructor'
    name: 'ShareDirectoryClient(string, Credential, StoragePipelineOptions)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Creates an instance of DirectoryClient.
    syntax:
      content: >-
        new ShareDirectoryClient(url: string, credential?: Credential, options?:
        StoragePipelineOptions)
      parameters:
        - id: url
          type:
            - string
          description: |-
            A URL string pointing to Azure Storage file directory, such as
                                "https://myaccount.file.core.windows.net/myshare/mydirectory". You can
                                append a SAS if using AnonymousCredential, such as
                                "https://myaccount.file.core.windows.net/myshare/mydirectory?sasString".
                                This method accepts an encoded URL or non-encoded URL pointing to a directory.
                                Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.
                                However, if a directory name includes %, directory name must be encoded in the URL.
                                Such as a directory named "mydir%", the URL should be "https://myaccount.file.core.windows.net/myshare/mydir%25".
        - id: credential
          type:
            - '@azure/storage-file-share.Credential'
          description: ''
          optional: true
        - id: options
          type:
            - '@azure/storage-file-share.StoragePipelineOptions'
          description: ''
          optional: true
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.ShareDirectoryClient.constructor_1'
    name: 'ShareDirectoryClient(string, Pipeline)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Creates an instance of DirectoryClient.
    syntax:
      content: 'new ShareDirectoryClient(url: string, pipeline: Pipeline)'
      parameters:
        - id: url
          type:
            - string
          description: |-
            A URL string pointing to Azure Storage file directory, such as
                                "https://myaccount.file.core.windows.net/myshare/mydirectory". You can
                                append a SAS if using AnonymousCredential, such as
                                "https://myaccount.file.core.windows.net/myshare/mydirectory?sasString".
                                This method accepts an encoded URL or non-encoded URL pointing to a directory.
                                Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.
                                However, if a directory name includes %, directory name must be encoded in the URL.
                                Such as a directory named "mydir%", the URL should be "https://myaccount.file.core.windows.net/myshare/mydir%25".
        - id: pipeline
          type:
            - '@azure/storage-file-share.Pipeline'
          description: |-
            Call newPipeline() to create a default
                                       pipeline, or provide a customized pipeline.
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.ShareDirectoryClient.shareName'
    name: shareName
    fullName: shareName
    children: []
    langs:
      - typeScript
    type: property
    summary: The share name corresponding to this directory client
    syntax:
      content: string shareName
      return:
        type:
          - string
        description: ''
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.ShareDirectoryClient.url'
    name: url
    fullName: url
    children: []
    langs:
      - typeScript
    type: property
    summary: URL string value.
    syntax:
      content: 'url: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/storage-file-share'
references:
  - uid: '@azure/storage-file-share.StorageClient'
    name: StorageClient
    spec.typeScript:
      - name: StorageClient
        fullName: StorageClient
        uid: '@azure/storage-file-share.StorageClient'
  - uid: '@azure/storage-file-share.Credential'
    name: Credential
    spec.typeScript:
      - name: Credential
        fullName: Credential
        uid: '@azure/storage-file-share.Credential'
  - uid: '@azure/storage-file-share.StoragePipelineOptions'
    name: StoragePipelineOptions
    spec.typeScript:
      - name: StoragePipelineOptions
        fullName: StoragePipelineOptions
        uid: '@azure/storage-file-share.StoragePipelineOptions'
  - uid: '@azure/storage-file-share.Pipeline'
    name: Pipeline
    spec.typeScript:
      - name: Pipeline
        fullName: Pipeline
        uid: '@azure/storage-file-share.Pipeline'
  - uid: '@azure/storage-file-share.DirectoryCreateOptions'
    name: DirectoryCreateOptions
    spec.typeScript:
      - name: DirectoryCreateOptions
        fullName: DirectoryCreateOptions
        uid: '@azure/storage-file-share.DirectoryCreateOptions'
  - uid: Promise<@azure/storage-file-share.DirectoryCreateResponse>
    name: DirectoryCreateResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: DirectoryCreateResponse
        fullName: DirectoryCreateResponse
        uid: '@azure/storage-file-share.DirectoryCreateResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-file-share.FileCreateOptions'
    name: FileCreateOptions
    spec.typeScript:
      - name: FileCreateOptions
        fullName: FileCreateOptions
        uid: '@azure/storage-file-share.FileCreateOptions'
  - uid: Promise<@azure/storage-file-share.DirectoryCreateIfNotExistsResponse>
    name: DirectoryCreateIfNotExistsResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: DirectoryCreateIfNotExistsResponse
        fullName: DirectoryCreateIfNotExistsResponse
        uid: '@azure/storage-file-share.DirectoryCreateIfNotExistsResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-file-share.DirectoryDeleteOptions'
    name: DirectoryDeleteOptions
    spec.typeScript:
      - name: DirectoryDeleteOptions
        fullName: DirectoryDeleteOptions
        uid: '@azure/storage-file-share.DirectoryDeleteOptions'
  - uid: Promise<@azure/storage-file-share.DirectoryDeleteResponse>
    name: DirectoryDeleteResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: DirectoryDeleteResponse
        fullName: DirectoryDeleteResponse
        uid: '@azure/storage-file-share.DirectoryDeleteResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-file-share.FileDeleteOptions'
    name: FileDeleteOptions
    spec.typeScript:
      - name: FileDeleteOptions
        fullName: FileDeleteOptions
        uid: '@azure/storage-file-share.FileDeleteOptions'
  - uid: Promise<@azure/storage-file-share.FileDeleteResponse>
    name: FileDeleteResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: FileDeleteResponse
        fullName: FileDeleteResponse
        uid: '@azure/storage-file-share.FileDeleteResponse'
      - name: '>'
        fullName: '>'
  - uid: Promise<@azure/storage-file-share.DirectoryDeleteIfExistsResponse>
    name: DirectoryDeleteIfExistsResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: DirectoryDeleteIfExistsResponse
        fullName: DirectoryDeleteIfExistsResponse
        uid: '@azure/storage-file-share.DirectoryDeleteIfExistsResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-file-share.DirectoryExistsOptions'
    name: DirectoryExistsOptions
    spec.typeScript:
      - name: DirectoryExistsOptions
        fullName: DirectoryExistsOptions
        uid: '@azure/storage-file-share.DirectoryExistsOptions'
  - uid: '@azure/storage-file-share.DirectoryForceCloseHandlesSegmentOptions'
    name: DirectoryForceCloseHandlesSegmentOptions
    spec.typeScript:
      - name: DirectoryForceCloseHandlesSegmentOptions
        fullName: DirectoryForceCloseHandlesSegmentOptions
        uid: '@azure/storage-file-share.DirectoryForceCloseHandlesSegmentOptions'
  - uid: Promise<@azure/storage-file-share.CloseHandlesInfo>
    name: CloseHandlesInfo>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: CloseHandlesInfo
        fullName: CloseHandlesInfo
        uid: '@azure/storage-file-share.CloseHandlesInfo'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-file-share.DirectoryForceCloseHandlesOptions'
    name: DirectoryForceCloseHandlesOptions
    spec.typeScript:
      - name: DirectoryForceCloseHandlesOptions
        fullName: DirectoryForceCloseHandlesOptions
        uid: '@azure/storage-file-share.DirectoryForceCloseHandlesOptions'
  - uid: Promise<@azure/storage-file-share.DirectoryForceCloseHandlesResponse>
    name: DirectoryForceCloseHandlesResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: DirectoryForceCloseHandlesResponse
        fullName: DirectoryForceCloseHandlesResponse
        uid: '@azure/storage-file-share.DirectoryForceCloseHandlesResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-file-share.ShareDirectoryClient'
    name: ShareDirectoryClient
    spec.typeScript:
      - name: ShareDirectoryClient
        fullName: ShareDirectoryClient
        uid: '@azure/storage-file-share.ShareDirectoryClient'
  - uid: '@azure/storage-file-share.ShareFileClient'
    name: ShareFileClient
    spec.typeScript:
      - name: ShareFileClient
        fullName: ShareFileClient
        uid: '@azure/storage-file-share.ShareFileClient'
  - uid: '@azure/storage-file-share.DirectoryGetPropertiesOptions'
    name: DirectoryGetPropertiesOptions
    spec.typeScript:
      - name: DirectoryGetPropertiesOptions
        fullName: DirectoryGetPropertiesOptions
        uid: '@azure/storage-file-share.DirectoryGetPropertiesOptions'
  - uid: Promise<@azure/storage-file-share.DirectoryGetPropertiesResponse>
    name: DirectoryGetPropertiesResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: DirectoryGetPropertiesResponse
        fullName: DirectoryGetPropertiesResponse
        uid: '@azure/storage-file-share.DirectoryGetPropertiesResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-file-share.DirectoryListFilesAndDirectoriesOptions'
    name: DirectoryListFilesAndDirectoriesOptions
    spec.typeScript:
      - name: DirectoryListFilesAndDirectoriesOptions
        fullName: DirectoryListFilesAndDirectoriesOptions
        uid: '@azure/storage-file-share.DirectoryListFilesAndDirectoriesOptions'
  - uid: >-
      PagedAsyncIterableIterator<Object & @azure/storage-file-share.FileItem |
      Object & @azure/storage-file-share.DirectoryItem,
      @azure/storage-file-share.DirectoryListFilesAndDirectoriesSegmentResponse>
    name: DirectoryListFilesAndDirectoriesSegmentResponse>
    spec.typeScript:
      - name: 'PagedAsyncIterableIterator<Object & '
        fullName: 'PagedAsyncIterableIterator<Object & '
      - name: FileItem
        fullName: FileItem
        uid: '@azure/storage-file-share.FileItem'
      - name: ' | Object & '
        fullName: ' | Object & '
      - name: DirectoryItem
        fullName: DirectoryItem
        uid: '@azure/storage-file-share.DirectoryItem'
      - name: ', '
        fullName: ', '
      - name: DirectoryListFilesAndDirectoriesSegmentResponse
        fullName: DirectoryListFilesAndDirectoriesSegmentResponse
        uid: >-
          @azure/storage-file-share.DirectoryListFilesAndDirectoriesSegmentResponse
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-file-share.DirectoryListHandlesOptions'
    name: DirectoryListHandlesOptions
    spec.typeScript:
      - name: DirectoryListHandlesOptions
        fullName: DirectoryListHandlesOptions
        uid: '@azure/storage-file-share.DirectoryListHandlesOptions'
  - uid: >-
      PagedAsyncIterableIterator<@azure/storage-file-share.HandleItem,
      @azure/storage-file-share.DirectoryListHandlesResponse>
    name: DirectoryListHandlesResponse>
    spec.typeScript:
      - name: PagedAsyncIterableIterator<
        fullName: PagedAsyncIterableIterator<
      - name: HandleItem
        fullName: HandleItem
        uid: '@azure/storage-file-share.HandleItem'
      - name: ', '
        fullName: ', '
      - name: DirectoryListHandlesResponse
        fullName: DirectoryListHandlesResponse
        uid: '@azure/storage-file-share.DirectoryListHandlesResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-file-share.Metadata'
    name: Metadata
    spec.typeScript:
      - name: Metadata
        fullName: Metadata
        uid: '@azure/storage-file-share.Metadata'
  - uid: '@azure/storage-file-share.DirectorySetMetadataOptions'
    name: DirectorySetMetadataOptions
    spec.typeScript:
      - name: DirectorySetMetadataOptions
        fullName: DirectorySetMetadataOptions
        uid: '@azure/storage-file-share.DirectorySetMetadataOptions'
  - uid: Promise<@azure/storage-file-share.DirectorySetMetadataResponse>
    name: DirectorySetMetadataResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: DirectorySetMetadataResponse
        fullName: DirectorySetMetadataResponse
        uid: '@azure/storage-file-share.DirectorySetMetadataResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-file-share.DirectoryProperties'
    name: DirectoryProperties
    spec.typeScript:
      - name: DirectoryProperties
        fullName: DirectoryProperties
        uid: '@azure/storage-file-share.DirectoryProperties'
  - uid: Promise<@azure/storage-file-share.DirectorySetPropertiesResponse>
    name: DirectorySetPropertiesResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: DirectorySetPropertiesResponse
        fullName: DirectorySetPropertiesResponse
        uid: '@azure/storage-file-share.DirectorySetPropertiesResponse'
      - name: '>'
        fullName: '>'
