### YamlMime:TSType
name: ShareDirectoryClient
uid: '@azure/storage-file-share.ShareDirectoryClient'
package: '@azure/storage-file-share'
summary: >-
  A ShareDirectoryClient represents a URL to the Azure Storage directory
  allowing you to manipulate its files and directories.
fullName: ShareDirectoryClient
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: 'ShareDirectoryClient(string, Credential, StoragePipelineOptions)'
    uid: '@azure/storage-file-share.ShareDirectoryClient.constructor'
    package: '@azure/storage-file-share'
    summary: Creates an instance of DirectoryClient.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        new ShareDirectoryClient(url: string, credential?: Credential, options?:
        StoragePipelineOptions)
      parameters:
        - id: url
          type: string
          description: |-
            A URL string pointing to Azure Storage file directory, such as
                                "https://myaccount.file.core.windows.net/myshare/mydirectory". You can
                                append a SAS if using AnonymousCredential, such as
                                "https://myaccount.file.core.windows.net/myshare/mydirectory?sasString".
                                This method accepts an encoded URL or non-encoded URL pointing to a directory.
                                Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.
                                However, if a directory name includes %, directory name must be encoded in the URL.
                                Such as a directory named "mydir%", the URL should be "https://myaccount.file.core.windows.net/myshare/mydir%25".
        - id: credential
          type: <xref uid="@azure/storage-file-share.Credential" />
          description: ''
        - id: options
          type: <xref uid="@azure/storage-file-share.StoragePipelineOptions" />
          description: ''
  - name: 'ShareDirectoryClient(string, Pipeline)'
    uid: '@azure/storage-file-share.ShareDirectoryClient.constructor_1'
    package: '@azure/storage-file-share'
    summary: Creates an instance of DirectoryClient.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'new ShareDirectoryClient(url: string, pipeline: Pipeline)'
      parameters:
        - id: url
          type: string
          description: |-
            A URL string pointing to Azure Storage file directory, such as
                                "https://myaccount.file.core.windows.net/myshare/mydirectory". You can
                                append a SAS if using AnonymousCredential, such as
                                "https://myaccount.file.core.windows.net/myshare/mydirectory?sasString".
                                This method accepts an encoded URL or non-encoded URL pointing to a directory.
                                Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.
                                However, if a directory name includes %, directory name must be encoded in the URL.
                                Such as a directory named "mydir%", the URL should be "https://myaccount.file.core.windows.net/myshare/mydir%25".
        - id: pipeline
          type: <xref uid="@azure/storage-file-share.Pipeline" />
          description: |-
            Call newPipeline() to create a default
                                       pipeline, or provide a customized pipeline.
properties:
  - name: accountName
    uid: '@azure/storage-file-share.ShareDirectoryClient.accountName'
    package: '@azure/storage-file-share'
    summary: ''
    fullName: accountName
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'accountName: string'
      return:
        type: string
        description: ''
  - name: name
    uid: '@azure/storage-file-share.ShareDirectoryClient.name'
    package: '@azure/storage-file-share'
    summary: The name of the directory
    fullName: name
    isPreview: false
    isDeprecated: false
    syntax:
      content: string name
      return:
        type: string
        description: ''
  - name: path
    uid: '@azure/storage-file-share.ShareDirectoryClient.path'
    package: '@azure/storage-file-share'
    summary: The full path of the directory
    fullName: path
    isPreview: false
    isDeprecated: false
    syntax:
      content: string path
      return:
        type: string
        description: ''
  - name: shareName
    uid: '@azure/storage-file-share.ShareDirectoryClient.shareName'
    package: '@azure/storage-file-share'
    summary: The share name corresponding to this directory client
    fullName: shareName
    isPreview: false
    isDeprecated: false
    syntax:
      content: string shareName
      return:
        type: string
        description: ''
  - name: url
    uid: '@azure/storage-file-share.ShareDirectoryClient.url'
    package: '@azure/storage-file-share'
    summary: URL string value.
    fullName: url
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'url: string'
      return:
        type: string
        description: ''
methods:
  - name: create(DirectoryCreateOptions)
    uid: '@azure/storage-file-share.ShareDirectoryClient.create'
    package: '@azure/storage-file-share'
    summary: Creates a new directory under the specified share or parent directory.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function create(options?: DirectoryCreateOptions)'
      parameters:
        - id: options
          type: <xref uid="@azure/storage-file-share.DirectoryCreateOptions" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-share.DirectoryCreateResponse" />&gt;
        description: Response data for the Directory  operation.
  - name: 'createFile(string, number, FileCreateOptions)'
    uid: '@azure/storage-file-share.ShareDirectoryClient.createFile'
    package: '@azure/storage-file-share'
    summary: >-
      Creates a new file or replaces a file under this directory. Note it only
      initializes the file with no content.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createFile(fileName: string, size: number, options?:
        FileCreateOptions)
      parameters:
        - id: fileName
          type: string
          description: ''
        - id: size
          type: number
          description: 'Specifies the maximum size in bytes for the file, up to 1 TB.'
        - id: options
          type: <xref uid="@azure/storage-file-share.FileCreateOptions" />
          description: ''
      return:
        type: Promise&lt;Object&gt;
        description: '>} File creation response data and the corresponding file client.'
  - name: createIfNotExists(DirectoryCreateOptions)
    uid: '@azure/storage-file-share.ShareDirectoryClient.createIfNotExists'
    package: '@azure/storage-file-share'
    summary: >-
      Creates a new directory under the specified share or parent directory if
      it does not already exists.

      If the directory already exists, it is not modified.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function createIfNotExists(options?: DirectoryCreateOptions)'
      parameters:
        - id: options
          type: <xref uid="@azure/storage-file-share.DirectoryCreateOptions" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-share.DirectoryCreateIfNotExistsResponse"
          />&gt;
        description: ''
  - name: 'createSubdirectory(string, DirectoryCreateOptions)'
    uid: '@azure/storage-file-share.ShareDirectoryClient.createSubdirectory'
    package: '@azure/storage-file-share'
    summary: Creates a new subdirectory under this directory.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createSubdirectory(directoryName: string, options?:
        DirectoryCreateOptions)
      parameters:
        - id: directoryName
          type: string
          description: ''
        - id: options
          type: <xref uid="@azure/storage-file-share.DirectoryCreateOptions" />
          description: ''
      return:
        type: Promise&lt;Object&gt;
        description: >-
          >} Directory create response data and the corresponding
          DirectoryClient instance.
  - name: delete(DirectoryDeleteOptions)
    uid: '@azure/storage-file-share.ShareDirectoryClient.delete'
    package: '@azure/storage-file-share'
    summary: >-
      Removes the specified empty directory. Note that the directory must be
      empty before it can be

      deleted.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function delete(options?: DirectoryDeleteOptions)'
      parameters:
        - id: options
          type: <xref uid="@azure/storage-file-share.DirectoryDeleteOptions" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-share.DirectoryDeleteResponse" />&gt;
        description: Response data for the Directory Delete operation.
  - name: 'deleteFile(string, FileDeleteOptions)'
    uid: '@azure/storage-file-share.ShareDirectoryClient.deleteFile'
    package: '@azure/storage-file-share'
    summary: >
      Removes the specified file under this directory from the storage account.

      When a file is successfully deleted, it is immediately removed from the
      storage

      account's index and is no longer accessible to clients. The file's data is
      later

      removed from the service during garbage collection.

      Delete File will fail with status code 409 (Conflict) and error code
      SharingViolation

      if the file is open on an SMB client.


      Delete File is not supported on a share snapshot, which is a read-only
      copy of

      a share. An attempt to perform this operation on a share snapshot will
      fail with 400 (InvalidQueryParameterValue)
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function deleteFile(fileName: string, options?: FileDeleteOptions)'
      parameters:
        - id: fileName
          type: string
          description: Name of the file to delete
        - id: options
          type: <xref uid="@azure/storage-file-share.FileDeleteOptions" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref uid="@azure/storage-file-share.FileDeleteResponse"
          />&gt;
        description: File deletion response data.
  - name: deleteIfExists(DirectoryDeleteOptions)
    uid: '@azure/storage-file-share.ShareDirectoryClient.deleteIfExists'
    package: '@azure/storage-file-share'
    summary: >-
      Removes the specified empty directory if it exists. Note that the
      directory must be empty before it can be

      deleted.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function deleteIfExists(options?: DirectoryDeleteOptions)'
      parameters:
        - id: options
          type: <xref uid="@azure/storage-file-share.DirectoryDeleteOptions" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-share.DirectoryDeleteIfExistsResponse" />&gt;
        description: ''
  - name: 'deleteSubdirectory(string, DirectoryDeleteOptions)'
    uid: '@azure/storage-file-share.ShareDirectoryClient.deleteSubdirectory'
    package: '@azure/storage-file-share'
    summary: |-
      Removes the specified empty sub directory under this directory.
      Note that the directory must be empty before it can be deleted.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteSubdirectory(directoryName: string, options?:
        DirectoryDeleteOptions)
      parameters:
        - id: directoryName
          type: string
          description: ''
        - id: options
          type: <xref uid="@azure/storage-file-share.DirectoryDeleteOptions" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-share.DirectoryDeleteResponse" />&gt;
        description: Directory deletion response data.
  - name: exists(DirectoryExistsOptions)
    uid: '@azure/storage-file-share.ShareDirectoryClient.exists'
    package: '@azure/storage-file-share'
    summary: >
      Returns true if the specified directory exists; false otherwise.

      NOTE: use this function with care since an existing directory might be
      deleted by other clients or

      applications. Vice versa new directories might be added by other clients
      or applications after this

      function completes.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function exists(options?: DirectoryExistsOptions)'
      parameters:
        - id: options
          type: <xref uid="@azure/storage-file-share.DirectoryExistsOptions" />
          description: ''
      return:
        type: Promise&lt;boolean&gt;
        description: ''
  - name: forceCloseAllHandles(DirectoryForceCloseHandlesSegmentOptions)
    uid: '@azure/storage-file-share.ShareDirectoryClient.forceCloseAllHandles'
    package: '@azure/storage-file-share'
    summary: Force close all handles for a directory.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function forceCloseAllHandles(options?:
        DirectoryForceCloseHandlesSegmentOptions)
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/storage-file-share.DirectoryForceCloseHandlesSegmentOptions"
            />
          description: ''
      return:
        type: >-
          Promise&lt;<xref uid="@azure/storage-file-share.CloseHandlesInfo"
          />&gt;
        description: ''
  - name: 'forceCloseHandle(string, DirectoryForceCloseHandlesOptions)'
    uid: '@azure/storage-file-share.ShareDirectoryClient.forceCloseHandle'
    package: '@azure/storage-file-share'
    summary: Force close a specific handle for a directory.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function forceCloseHandle(handleId: string, options?:
        DirectoryForceCloseHandlesOptions)
      parameters:
        - id: handleId
          type: string
          description: |-
            Specific handle ID, cannot be asterisk "*".
                                     Use forceCloseHandlesSegment() to close all handles.
        - id: options
          type: >-
            <xref
            uid="@azure/storage-file-share.DirectoryForceCloseHandlesOptions" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-share.DirectoryForceCloseHandlesResponse"
          />&gt;
        description: ''
  - name: getDirectoryClient(string)
    uid: '@azure/storage-file-share.ShareDirectoryClient.getDirectoryClient'
    package: '@azure/storage-file-share'
    summary: Creates a ShareDirectoryClient object for a sub directory.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getDirectoryClient(subDirectoryName: string)'
      parameters:
        - id: subDirectoryName
          type: string
          description: A subdirectory name
      return:
        type: <xref uid="@azure/storage-file-share.ShareDirectoryClient" />
        description: The ShareDirectoryClient object for the given subdirectory name.
  - name: getFileClient(string)
    uid: '@azure/storage-file-share.ShareDirectoryClient.getFileClient'
    package: '@azure/storage-file-share'
    summary: 'Creates a <xref:ShareFileClient> object.'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getFileClient(fileName: string)'
      parameters:
        - id: fileName
          type: string
          description: A file name.
      return:
        type: <xref uid="@azure/storage-file-share.ShareFileClient" />
        description: A new ShareFileClient object for the given file name.
  - name: getProperties(DirectoryGetPropertiesOptions)
    uid: '@azure/storage-file-share.ShareDirectoryClient.getProperties'
    package: '@azure/storage-file-share'
    summary: >-
      Returns all system properties for the specified directory, and can also be
      used to check the

      existence of a directory. The data returned does not include the files in
      the directory or any

      subdirectories.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getProperties(options?: DirectoryGetPropertiesOptions)'
      parameters:
        - id: options
          type: >-
            <xref uid="@azure/storage-file-share.DirectoryGetPropertiesOptions"
            />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-share.DirectoryGetPropertiesResponse" />&gt;
        description: Response data for the Directory Get Properties operation.
  - name: listFilesAndDirectories(DirectoryListFilesAndDirectoriesOptions)
    uid: '@azure/storage-file-share.ShareDirectoryClient.listFilesAndDirectories'
    package: '@azure/storage-file-share'
    summary: >
      Returns an async iterable iterator to list all the files and directories

      under the specified account.

      .byPage() returns an async iterable iterator to list the files and
      directories in pages.


      Example using `for await` syntax:


      ```js

      let i = 1;

      for await (const entity of directoryClient.listFilesAndDirectories()) {
        if (entity.kind === "directory") {
          console.log(`${i++} - directory\t: ${entity.name}`);
        } else {
          console.log(`${i++} - file\t: ${entity.name}`);
        }
      }

      ```


      Example using `iter.next()`:


      ```js

      let i = 1;

      let iter = directoryClient.listFilesAndDirectories();

      let entity = await iter.next();

      while (!entity.done) {
        if (entity.value.kind === "directory") {
          console.log(`${i++} - directory\t: ${entity.value.name}`);
        } else {
          console.log(`${i++} - file\t: ${entity.value.name}`);
        }
        entity = await iter.next();
      }

      ```


      Example using `byPage()`:


      ```js

      // passing optional maxPageSize in the page settings

      let i = 1;

      for await (const response of directoryClient
        .listFilesAndDirectories()
        .byPage({ maxPageSize: 20 })) {
        for (const fileItem of response.segment.fileItems) {
          console.log(`${i++} - file\t: ${fileItem.name}`);
        }
        for (const dirItem of response.segment.directoryItems) {
          console.log(`${i++} - directory\t: ${dirItem.name}`);
        }
      }

      ```


      Example using paging with a marker:


      ```js

      let i = 1;

      let iterator = directoryClient.listFilesAndDirectories().byPage({
      maxPageSize: 3 });

      let response = (await iterator.next()).value;


      // Prints 3 file and directory names

      for (const fileItem of response.segment.fileItems) {
        console.log(`${i++} - file\t: ${fileItem.name}`);
      }


      for (const dirItem of response.segment.directoryItems) {
        console.log(`${i++} - directory\t: ${dirItem.name}`);
      }


      // Gets next marker

      let dirMarker = response.continuationToken;


      // Passing next marker as continuationToken

      iterator = directoryClient
        .listFilesAndDirectories()
        .byPage({ continuationToken: dirMarker, maxPageSize: 4 });
      response = (await iterator.next()).value;


      // Prints 10 file and directory names

      for (const fileItem of response.segment.fileItems) {
        console.log(`${i++} - file\t: ${fileItem.name}`);
      }


      for (const dirItem of response.segment.directoryItems) {
        console.log(`${i++} - directory\t: ${dirItem.name}`);
      }

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listFilesAndDirectories(options?:
        DirectoryListFilesAndDirectoriesOptions)
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/storage-file-share.DirectoryListFilesAndDirectoriesOptions"
            />
          description: ''
      return:
        type: >-
          PagedAsyncIterableIterator&lt;Object & <xref
          uid="@azure/storage-file-share.FileItem" /> | Object & <xref
          uid="@azure/storage-file-share.DirectoryItem" />, <xref
          uid="@azure/storage-file-share.DirectoryListFilesAndDirectoriesSegmentResponse"
          />&gt;
        description: >-
          & FileItem | { kind: "directory" } ,
          DirectoryListFilesAndDirectoriesSegmentResponse>}

          An asyncIterableIterator that supports paging.
  - name: listHandles(DirectoryListHandlesOptions)
    uid: '@azure/storage-file-share.ShareDirectoryClient.listHandles'
    package: '@azure/storage-file-share'
    summary: >
      Returns an async iterable iterator to list all the handles.

      under the specified account.

      .byPage() returns an async iterable iterator to list the handles in pages.


      Example using `for await` syntax:


      ```js

      let i = 1;

      let iter = dirClient.listHandles();

      for await (const handle of iter) {
        console.log(`Handle ${i++}: ${handle.path}, opened time ${handle.openTime}, clientIp ${handle.clientIp}`);
      }

      ```


      Example using `iter.next()`:


      ```js

      let i = 1;

      let iter = dirClient.listHandles();

      let handleItem = await iter.next();

      while (!handleItem.done) {
        console.log(`Handle ${i++}: ${handleItem.value.path}, opened time ${handleItem.value.openTime}, clientIp ${handleItem.value.clientIp}`);
        handleItem = await iter.next();
      }

      ```


      Example using `byPage()`:


      ```js

      // passing optional maxPageSize in the page settings

      let i = 1;

      for await (const response of dirClient.listHandles({ recursive: true
      }).byPage({ maxPageSize: 20 })) {
        if (response.handleList) {
          for (const handle of response.handleList) {
            console.log(`Handle ${i++}: ${handle.path}, opened time ${handle.openTime}, clientIp ${handle.clientIp}`);
          }
        }
      }

      ```


      Example using paging with a marker:


      ```js

      let i = 1;

      let iterator = dirClient.listHandles().byPage({ maxPageSize: 2 });

      let response = await iterator.next();


      // Prints 2 handles

      if (response.value.handleList) {
        for (const handle of response.value.handleList) {
          console.log(`Handle ${i++}: ${handle.path}, opened time ${handle.openTime}, clientIp ${handle.clientIp}`);
        }
      }


      // Gets next marker

      let marker = response.value.continuationToken;


      // Passing next marker as continuationToken

      console.log(`    continuation`);

      iterator = dirClient.listHandles().byPage({ continuationToken: marker,
      maxPageSize: 10 });

      response = await iterator.next();


      // Prints 2 more handles assuming you have more than four directory/files
      opened

      if (!response.done && response.value.handleList) {
        for (const handle of response.value.handleList) {
          console.log(`Handle ${i++}: ${handle.path}, opened time ${handle.openTime}, clientIp ${handle.clientIp}`);
        }
      }

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function listHandles(options?: DirectoryListHandlesOptions)'
      parameters:
        - id: options
          type: <xref uid="@azure/storage-file-share.DirectoryListHandlesOptions" />
          description: ''
      return:
        type: >-
          PagedAsyncIterableIterator&lt;<xref
          uid="@azure/storage-file-share.HandleItem" />, <xref
          uid="@azure/storage-file-share.DirectoryListHandlesResponse" />&gt;
        description: An asyncIterableIterator that supports paging.
  - name: 'setMetadata(Metadata, DirectorySetMetadataOptions)'
    uid: '@azure/storage-file-share.ShareDirectoryClient.setMetadata'
    package: '@azure/storage-file-share'
    summary: Updates user defined metadata for the specified directory.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setMetadata(metadata?: Metadata, options?:
        DirectorySetMetadataOptions)
      parameters:
        - id: metadata
          type: <xref uid="@azure/storage-file-share.Metadata" />
          description: ''
        - id: options
          type: <xref uid="@azure/storage-file-share.DirectorySetMetadataOptions" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-share.DirectorySetMetadataResponse" />&gt;
        description: Response data for the Directory Set Metadata operation.
  - name: setProperties(DirectoryProperties)
    uid: '@azure/storage-file-share.ShareDirectoryClient.setProperties'
    package: '@azure/storage-file-share'
    summary: Sets properties on the directory.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function setProperties(properties?: DirectoryProperties)'
      parameters:
        - id: properties
          type: <xref uid="@azure/storage-file-share.DirectoryProperties" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-share.DirectorySetPropertiesResponse" />&gt;
        description: ''
extends: <xref uid="@azure/storage-file-share.StorageClient" />
