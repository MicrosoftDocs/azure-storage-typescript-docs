### YamlMime:UniversalReference
items:
  - uid: '@azure/storage-file-share.ShareFileClient'
    name: ShareFileClient
    fullName: ShareFileClient
    children:
      - '@azure/storage-file-share.ShareFileClient.abortCopyFromURL'
      - '@azure/storage-file-share.ShareFileClient.accountName'
      - '@azure/storage-file-share.ShareFileClient.clearRange'
      - '@azure/storage-file-share.ShareFileClient.create'
      - '@azure/storage-file-share.ShareFileClient.delete'
      - '@azure/storage-file-share.ShareFileClient.deleteIfExists'
      - '@azure/storage-file-share.ShareFileClient.download'
      - '@azure/storage-file-share.ShareFileClient.downloadToBuffer'
      - '@azure/storage-file-share.ShareFileClient.downloadToBuffer_1'
      - '@azure/storage-file-share.ShareFileClient.downloadToFile'
      - '@azure/storage-file-share.ShareFileClient.exists'
      - '@azure/storage-file-share.ShareFileClient.forceCloseAllHandles'
      - '@azure/storage-file-share.ShareFileClient.forceCloseHandle'
      - '@azure/storage-file-share.ShareFileClient.getProperties'
      - '@azure/storage-file-share.ShareFileClient.getRangeList'
      - '@azure/storage-file-share.ShareFileClient.getShareLeaseClient'
      - '@azure/storage-file-share.ShareFileClient.listHandles'
      - '@azure/storage-file-share.ShareFileClient.name'
      - '@azure/storage-file-share.ShareFileClient.path'
      - '@azure/storage-file-share.ShareFileClient.resize'
      - '@azure/storage-file-share.ShareFileClient.setHttpHeaders'
      - '@azure/storage-file-share.ShareFileClient.setMetadata'
      - '@azure/storage-file-share.ShareFileClient.setProperties'
      - '@azure/storage-file-share.ShareFileClient.constructor'
      - '@azure/storage-file-share.ShareFileClient.constructor_1'
      - '@azure/storage-file-share.ShareFileClient.shareName'
      - '@azure/storage-file-share.ShareFileClient.startCopyFromURL'
      - '@azure/storage-file-share.ShareFileClient.uploadData'
      - '@azure/storage-file-share.ShareFileClient.uploadFile'
      - '@azure/storage-file-share.ShareFileClient.uploadRange'
      - '@azure/storage-file-share.ShareFileClient.uploadRangeFromURL'
      - '@azure/storage-file-share.ShareFileClient.uploadResetableStream'
      - '@azure/storage-file-share.ShareFileClient.uploadSeekableBlob'
      - '@azure/storage-file-share.ShareFileClient.uploadStream'
      - '@azure/storage-file-share.ShareFileClient.url'
    langs:
      - typeScript
    type: class
    summary: A ShareFileClient represents a URL to an Azure Storage file.
    extends:
      name: '@azure/storage-file-share.StorageClient'
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.ShareFileClient.abortCopyFromURL'
    name: 'abortCopyFromURL(string, FileAbortCopyFromURLOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Aborts a pending Copy File operation, and leaves a destination file with
      zero length and full

      metadata.
    syntax:
      content: >-
        function abortCopyFromURL(copyId: string, options?:
        FileAbortCopyFromURLOptions)
      parameters:
        - id: copyId
          type:
            - string
          description: Id of the Copy File operation to abort.
        - id: options
          type:
            - '@azure/storage-file-share.FileAbortCopyFromURLOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-file-share.FileAbortCopyResponse>
        description: ''
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.ShareFileClient.accountName'
    name: accountName
    fullName: accountName
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'accountName: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.ShareFileClient.clearRange'
    name: 'clearRange(number, number, FileClearRangeOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Clears the specified range and
      releases the space used in storage for that range.
    syntax:
      content: >-
        function clearRange(offset: number, contentLength: number, options?:
        FileClearRangeOptions)
      parameters:
        - id: offset
          type:
            - number
          description: ''
        - id: contentLength
          type:
            - number
          description: ''
        - id: options
          type:
            - '@azure/storage-file-share.FileClearRangeOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-file-share.FileUploadRangeResponse>
        description: ''
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.ShareFileClient.create'
    name: 'create(number, FileCreateOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates a new file or replaces a file. Note it only initializes the file
      with no content.
    syntax:
      content: 'function create(size: number, options?: FileCreateOptions)'
      parameters:
        - id: size
          type:
            - number
          description: 'Specifies the maximum size in bytes for the file, up to 1 TB.'
        - id: options
          type:
            - '@azure/storage-file-share.FileCreateOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-file-share.FileCreateResponse>
        description: Response data for the File Create  operation.
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.ShareFileClient.delete'
    name: delete(FileDeleteOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Removes the file from the storage account.

      When a file is successfully deleted, it is immediately removed from the
      storage

      account's index and is no longer accessible to clients. The file's data is
      later

      removed from the service during garbage collection.

      Delete File will fail with status code 409 (Conflict) and error code
      SharingViolation

      if the file is open on an SMB client.


      Delete File is not supported on a share snapshot, which is a read-only
      copy of

      a share. An attempt to perform this operation on a share snapshot will
      fail with 400 (InvalidQueryParameterValue)
    syntax:
      content: 'function delete(options?: FileDeleteOptions)'
      parameters:
        - id: options
          type:
            - '@azure/storage-file-share.FileDeleteOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-file-share.FileDeleteResponse>
        description: Response data for the File Delete operation.
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.ShareFileClient.deleteIfExists'
    name: deleteIfExists(FileDeleteOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Removes the file from the storage account if it exists.

      When a file is successfully deleted, it is immediately removed from the
      storage

      account's index and is no longer accessible to clients. The file's data is
      later

      removed from the service during garbage collection.

      Delete File will fail with status code 409 (Conflict) and error code
      SharingViolation

      if the file is open on an SMB client.


      Delete File is not supported on a share snapshot, which is a read-only
      copy of

      a share. An attempt to perform this operation on a share snapshot will
      fail with 400 (InvalidQueryParameterValue)
    syntax:
      content: 'function deleteIfExists(options?: FileDeleteOptions)'
      parameters:
        - id: options
          type:
            - '@azure/storage-file-share.FileDeleteOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-file-share.FileDeleteIfExistsResponse>
        description: ''
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.ShareFileClient.download'
    name: 'download(number, number, FileDownloadOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Reads or downloads a file from the system, including its metadata and
      properties.

      * In Node.js, data returns in a Readable stream `readableStreamBody`

      * In browsers, data returns in a promise `contentAsBlob`
    syntax:
      content: >-
        function download(offset?: number, count?: number, options?:
        FileDownloadOptions)
      parameters:
        - id: offset
          type:
            - number
          description: ''
          optional: true
        - id: count
          type:
            - number
          description: ''
          optional: true
        - id: options
          type:
            - '@azure/storage-file-share.FileDownloadOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-file-share.FileDownloadResponseModel>
        description: Response data for the File Download operation.
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.ShareFileClient.downloadToBuffer'
    name: 'downloadToBuffer(Buffer, number, number, FileDownloadToBufferOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      ONLY AVAILABLE IN NODE.JS RUNTIME.

      Downloads an Azure file in parallel to a buffer.

      Offset and count are optional, pass 0 for both to download the entire
      file.


      Warning: Buffers can only support files up to about one gigabyte on 32-bit
      systems or about two

      gigabytes on 64-bit systems due to limitations of Node.js/V8. For files
      larger than this size,

      consider <xref:downloadToFile>.
    syntax:
      content: >-
        function downloadToBuffer(buffer: Buffer, offset?: number, count?:
        number, options?: FileDownloadToBufferOptions)
      parameters:
        - id: buffer
          type:
            - Buffer
          description: 'Buffer to be fill, must have length larger than count'
        - id: offset
          type:
            - number
          description: From which position of the Azure File to download
          optional: true
        - id: count
          type:
            - number
          description: ''
          optional: true
        - id: options
          type:
            - '@azure/storage-file-share.FileDownloadToBufferOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<Buffer>
        description: ''
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.ShareFileClient.downloadToBuffer_1'
    name: 'downloadToBuffer(number, number, FileDownloadToBufferOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      ONLY AVAILABLE IN NODE.JS RUNTIME

      Downloads an Azure file in parallel to a buffer.

      Offset and count are optional, pass 0 for both to download the entire file


      Warning: Buffers can only support files up to about one gigabyte on 32-bit
      systems or about two

      gigabytes on 64-bit systems due to limitations of Node.js/V8. For files
      larger than this size,

      consider <xref:downloadToFile>.
    syntax:
      content: >-
        function downloadToBuffer(offset?: number, count?: number, options?:
        FileDownloadToBufferOptions)
      parameters:
        - id: offset
          type:
            - number
          description: From which position of the Azure file to download
          optional: true
        - id: count
          type:
            - number
          description: ''
          optional: true
        - id: options
          type:
            - '@azure/storage-file-share.FileDownloadToBufferOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<Buffer>
        description: ''
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.ShareFileClient.downloadToFile'
    name: 'downloadToFile(string, number, number, FileDownloadOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      ONLY AVAILABLE IN NODE.JS RUNTIME.

      Downloads an Azure Blob to a local file.

      Fails if the the given file path already exits.

      Offset and count are optional, pass 0 and undefined respectively to
      download the entire blob.
    syntax:
      content: >-
        function downloadToFile(filePath: string, offset?: number, count?:
        number, options?: FileDownloadOptions)
      parameters:
        - id: filePath
          type:
            - string
          description: ''
        - id: offset
          type:
            - number
          description: ''
          optional: true
        - id: count
          type:
            - number
          description: ''
          optional: true
        - id: options
          type:
            - '@azure/storage-file-share.FileDownloadOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-file-share.FileDownloadResponseModel>
        description: |-
          The response data for blob download operation,
                                                          but with readableStreamBody set to undefined since its
                                                          content is already read and written into a local file
                                                          at the specified path.
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.ShareFileClient.exists'
    name: exists(FileExistsOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Returns true if the specified file exists; false otherwise.

      NOTE: use this function with care since an existing file might be deleted
      by other clients or

      applications. Vice versa new files might be added by other clients or
      applications after this

      function completes.
    syntax:
      content: 'function exists(options?: FileExistsOptions)'
      parameters:
        - id: options
          type:
            - '@azure/storage-file-share.FileExistsOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<boolean>
        description: ''
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.ShareFileClient.forceCloseAllHandles'
    name: forceCloseAllHandles(FileForceCloseHandlesOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: Force close all handles for a file.
    syntax:
      content: 'function forceCloseAllHandles(options?: FileForceCloseHandlesOptions)'
      parameters:
        - id: options
          type:
            - '@azure/storage-file-share.FileForceCloseHandlesOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-file-share.CloseHandlesInfo>
        description: ''
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.ShareFileClient.forceCloseHandle'
    name: 'forceCloseHandle(string, FileForceCloseHandlesOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Force close a specific handle for a file.
    syntax:
      content: >-
        function forceCloseHandle(handleId: string, options?:
        FileForceCloseHandlesOptions)
      parameters:
        - id: handleId
          type:
            - string
          description: |-
            Specific handle ID, cannot be asterisk "*".
                                     Use forceCloseAllHandles() to close all handles.
        - id: options
          type:
            - '@azure/storage-file-share.FileForceCloseHandlesOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-file-share.FileForceCloseHandlesResponse>
        description: ''
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.ShareFileClient.getProperties'
    name: getProperties(FileGetPropertiesOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns all user-defined metadata, standard HTTP properties, and system
      properties

      for the file. It does not return the content of the file.
    syntax:
      content: 'function getProperties(options?: FileGetPropertiesOptions)'
      parameters:
        - id: options
          type:
            - '@azure/storage-file-share.FileGetPropertiesOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-file-share.FileGetPropertiesResponse>
        description: Response data for the File Get Properties operation.
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.ShareFileClient.getRangeList'
    name: getRangeList(FileGetRangeListOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: Returns the list of valid ranges for a file.
    syntax:
      content: 'function getRangeList(options?: FileGetRangeListOptions)'
      parameters:
        - id: options
          type:
            - '@azure/storage-file-share.FileGetRangeListOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-file-share.FileGetRangeListResponse>
        description: ''
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.ShareFileClient.getShareLeaseClient'
    name: getShareLeaseClient(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Get a <xref:ShareLeaseClient> that manages leases on the file.'
    syntax:
      content: 'function getShareLeaseClient(proposeLeaseId?: string)'
      parameters:
        - id: proposeLeaseId
          type:
            - string
          description: ''
          optional: true
      return:
        type:
          - '@azure/storage-file-share.ShareLeaseClient'
        description: A new ShareLeaseClient object for managing leases on the file.
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.ShareFileClient.listHandles'
    name: listHandles(FileListHandlesOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Returns an async iterable iterator to list all the handles.
      under the specified account.
      .byPage() returns an async iterable iterator to list the handles in pages.
    syntax:
      content: 'function listHandles(options?: FileListHandlesOptions)'
      parameters:
        - id: options
          type:
            - '@azure/storage-file-share.FileListHandlesOptions'
          description: ''
          optional: true
      return:
        type:
          - >-
            PagedAsyncIterableIterator<@azure/storage-file-share.HandleItem,
            @azure/storage-file-share.FileListHandlesResponse>
        description: An asyncIterableIterator that supports paging.
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.ShareFileClient.name'
    name: name
    fullName: name
    children: []
    langs:
      - typeScript
    type: property
    summary: The name of the file
    syntax:
      content: string name
      return:
        type:
          - string
        description: ''
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.ShareFileClient.path'
    name: path
    fullName: path
    children: []
    langs:
      - typeScript
    type: property
    summary: The full path of the file
    syntax:
      content: string path
      return:
        type:
          - string
        description: ''
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.ShareFileClient.resize'
    name: 'resize(number, FileResizeOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Resize file.
    syntax:
      content: 'function resize(length: number, options?: FileResizeOptions)'
      parameters:
        - id: length
          type:
            - number
          description: |-
            Resizes a file to the specified size in bytes.
                                   If the specified byte value is less than the current size of the file,
                                   then all ranges above the specified byte value are cleared.
        - id: options
          type:
            - '@azure/storage-file-share.FileResizeOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-file-share.FileSetHTTPHeadersResponse>
        description: Response data for the File Set HTTP Headers operation.
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.ShareFileClient.setHttpHeaders'
    name: 'setHttpHeaders(FileHttpHeaders, FileSetHttpHeadersOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Sets HTTP headers on the file.

      If no option provided, or no value provided for the file HTTP headers in
      the options,

      these file HTTP headers without a value will be cleared.
    syntax:
      content: >-
        function setHttpHeaders(fileHttpHeaders?: FileHttpHeaders, options?:
        FileSetHttpHeadersOptions)
      parameters:
        - id: fileHttpHeaders
          type:
            - '@azure/storage-file-share.FileHttpHeaders'
          description: ''
          optional: true
        - id: options
          type:
            - '@azure/storage-file-share.FileSetHttpHeadersOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-file-share.FileSetHTTPHeadersResponse>
        description: Response data for the File Set HTTP Headers operation.
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.ShareFileClient.setMetadata'
    name: 'setMetadata(Metadata, FileSetMetadataOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Updates user-defined metadata for the specified file.
      If no metadata defined in the option parameter, the file
      metadata will be removed.
    syntax:
      content: >-
        function setMetadata(metadata?: Metadata, options?:
        FileSetMetadataOptions)
      parameters:
        - id: metadata
          type:
            - '@azure/storage-file-share.Metadata'
          description: ''
          optional: true
        - id: options
          type:
            - '@azure/storage-file-share.FileSetMetadataOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-file-share.FileSetMetadataResponse>
        description: Response data for the File Set Metadata operation.
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.ShareFileClient.setProperties'
    name: setProperties(FileProperties)
    children: []
    type: method
    langs:
      - typeScript
    summary: Sets properties on the file.
    syntax:
      content: 'function setProperties(properties?: FileProperties)'
      parameters:
        - id: properties
          type:
            - '@azure/storage-file-share.FileProperties'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-file-share.SetPropertiesResponse>
        description: ''
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.ShareFileClient.constructor'
    name: 'ShareFileClient(string, Credential, StoragePipelineOptions)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Creates an instance of ShareFileClient.
    syntax:
      content: >-
        new ShareFileClient(url: string, credential?: Credential, options?:
        StoragePipelineOptions)
      parameters:
        - id: url
          type:
            - string
          description: |-
            A URL string pointing to Azure Storage file, such as
                                "https://myaccount.file.core.windows.net/myshare/mydirectory/file". You can
                                append a SAS if using AnonymousCredential, such as
                                "https://myaccount.file.core.windows.net/myshare/mydirectory/file?sasString".
                                This method accepts an encoded URL or non-encoded URL pointing to a file.
                                Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.
                                However, if a file or directory name includes %, file or directory name must be encoded in the URL.
                                Such as a file named "myfile%", the URL should be "https://myaccount.file.core.windows.net/myshare/mydirectory/myfile%25".
        - id: credential
          type:
            - '@azure/storage-file-share.Credential'
          description: ''
          optional: true
        - id: options
          type:
            - '@azure/storage-file-share.StoragePipelineOptions'
          description: ''
          optional: true
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.ShareFileClient.constructor_1'
    name: 'ShareFileClient(string, Pipeline)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Creates an instance of ShareFileClient.
    syntax:
      content: 'new ShareFileClient(url: string, pipeline: Pipeline)'
      parameters:
        - id: url
          type:
            - string
          description: |-
            A URL string pointing to Azure Storage file, such as
                                "https://myaccount.file.core.windows.net/myshare/mydirectory/file". You can
                                append a SAS if using AnonymousCredential, such as
                                "https://myaccount.file.core.windows.net/myshare/mydirectory/file?sasString".
                                This method accepts an encoded URL or non-encoded URL pointing to a file.
                                Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.
                                However, if a file or directory name includes %, file or directory name must be encoded in the URL.
                                Such as a file named "myfile%", the URL should be "https://myaccount.file.core.windows.net/myshare/mydirectory/myfile%25".
        - id: pipeline
          type:
            - '@azure/storage-file-share.Pipeline'
          description: |-
            Call newPipeline() to create a default
                                       pipeline, or provide a customized pipeline.
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.ShareFileClient.shareName'
    name: shareName
    fullName: shareName
    children: []
    langs:
      - typeScript
    type: property
    summary: The share name corresponding to this file client
    syntax:
      content: string shareName
      return:
        type:
          - string
        description: ''
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.ShareFileClient.startCopyFromURL'
    name: 'startCopyFromURL(string, FileStartCopyOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Copies a blob or file to a destination file within the storage account.
    syntax:
      content: >-
        function startCopyFromURL(copySource: string, options?:
        FileStartCopyOptions)
      parameters:
        - id: copySource
          type:
            - string
          description: >-
            Specifies the URL of the source file or blob, up to 2 KB in length.

            To copy a file to another file within the same storage account, you
            may use Shared Key to

            authenticate the source file. If you are copying a file from another
            storage account, or if you

            are copying a blob from the same storage account or another storage
            account, then you must

            authenticate the source file or blob using a shared access
            signature. If the source is a public

            blob, no authentication is required to perform the copy operation. A
            file in a share snapshot

            can also be specified as a copy source.
        - id: options
          type:
            - '@azure/storage-file-share.FileStartCopyOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-file-share.FileStartCopyResponse>
        description: ''
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.ShareFileClient.uploadData'
    name: >-
      uploadData(Buffer | Blob | ArrayBuffer | ArrayBufferView,
      FileParallelUploadOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: Uploads a Buffer(Node)/Blob/ArrayBuffer/ArrayBufferView to an Azure File.
    syntax:
      content: >-
        function uploadData(data: Buffer | Blob | ArrayBuffer | ArrayBufferView,
        options?: FileParallelUploadOptions)
      parameters:
        - id: data
          type:
            - Buffer | Blob | ArrayBuffer | ArrayBufferView
          description: 'Buffer(Node), Blob, ArrayBuffer or ArrayBufferView'
        - id: options
          type:
            - '@azure/storage-file-share.FileParallelUploadOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<void>
        description: ''
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.ShareFileClient.uploadFile'
    name: 'uploadFile(string, FileParallelUploadOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      ONLY AVAILABLE IN NODE.JS RUNTIME.
      Uploads a local file to an Azure file.
    syntax:
      content: >-
        function uploadFile(filePath: string, options?:
        FileParallelUploadOptions)
      parameters:
        - id: filePath
          type:
            - string
          description: Full path of local file
        - id: options
          type:
            - '@azure/storage-file-share.FileParallelUploadOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<void>
        description: ''
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.ShareFileClient.uploadRange'
    name: 'uploadRange(HttpRequestBody, number, number, FileUploadRangeOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Upload a range of bytes to a file. Both the start and count of the
      range must be specified. The range can be up to 4 MB in size.
    syntax:
      content: >-
        function uploadRange(body: HttpRequestBody, offset: number,
        contentLength: number, options?: FileUploadRangeOptions)
      parameters:
        - id: body
          type:
            - HttpRequestBody
          description: |-
            Blob, string, ArrayBuffer, ArrayBufferView or a function
                                          which returns a new Readable stream whose offset is from data source beginning.
        - id: offset
          type:
            - number
          description: Offset position of the destination Azure File to upload.
        - id: contentLength
          type:
            - number
          description: >-
            Length of body in bytes. Use Buffer.byteLength() to calculate body
            length for a
                                          string including non non-Base64/Hex-encoded characters.
        - id: options
          type:
            - '@azure/storage-file-share.FileUploadRangeOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-file-share.FileUploadRangeResponse>
        description: Response data for the File Upload Range operation.
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.ShareFileClient.uploadRangeFromURL'
    name: >-
      uploadRangeFromURL(string, number, number, number,
      FileUploadRangeFromURLOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Upload a range of bytes to a file where the contents are read from a
      another file's URL.

      The range can be up to 4 MB in size.
    syntax:
      content: >-
        function uploadRangeFromURL(sourceURL: string, sourceOffset: number,
        destOffset: number, count: number, options?:
        FileUploadRangeFromURLOptions)
      parameters:
        - id: sourceURL
          type:
            - string
          description: >-
            Specify a URL to the copy source, Shared Access Signature(SAS) maybe
            needed for authentication.
        - id: sourceOffset
          type:
            - number
          description: >-
            The source offset to copy from. Pass 0 to copy from the beginning of
            source file.
        - id: destOffset
          type:
            - number
          description: Offset of destination file.
        - id: count
          type:
            - number
          description: Number of bytes to be uploaded from source file.
        - id: options
          type:
            - '@azure/storage-file-share.FileUploadRangeFromURLOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-file-share.FileUploadRangeFromURLResponse>
        description: ''
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.ShareFileClient.uploadResetableStream'
    name: >-
      uploadResetableStream((offset: number, count?: number) => ReadableStream,
      number, FileParallelUploadOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      ONLY AVAILABLE IN NODE.JS RUNTIME.

      Accepts a Node.js Readable stream factory, and uploads in blocks to an
      Azure File.

      The Readable stream factory must returns a Node.js Readable stream
      starting from the offset defined. The offset

      is the offset in the Azure file to be uploaded.
    syntax:
      content: >-
        function uploadResetableStream(streamFactory: (offset: number, count?:
        number) => ReadableStream, size: number, options?:
        FileParallelUploadOptions)
      parameters:
        - id: streamFactory
          type:
            - '(offset: number, count?: number) => ReadableStream'
          description: |-
            Returns a Node.js Readable stream starting
                                                                             from the offset defined
        - id: size
          type:
            - number
          description: Size of the Azure file
        - id: options
          type:
            - '@azure/storage-file-share.FileParallelUploadOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<void>
        description: ''
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.ShareFileClient.uploadSeekableBlob'
    name: >-
      uploadSeekableBlob((offset: number, size: number) => Blob, number,
      FileParallelUploadOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      ONLY AVAILABLE IN BROWSERS.

      Uploads a browser Blob object to an Azure file. Requires a blobFactory as
      the data source,

      which need to return a Blob object with the offset and size provided.
    syntax:
      content: >-
        function uploadSeekableBlob(blobFactory: (offset: number, size: number)
        => Blob, size: number, options?: FileParallelUploadOptions)
      parameters:
        - id: blobFactory
          type:
            - '(offset: number, size: number) => Blob'
          description: ''
        - id: size
          type:
            - number
          description: ''
        - id: options
          type:
            - '@azure/storage-file-share.FileParallelUploadOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<void>
        description: ''
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.ShareFileClient.uploadStream'
    name: 'uploadStream(Readable, number, number, number, FileUploadStreamOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      ONLY AVAILABLE IN NODE.JS RUNTIME.

      Uploads a Node.js Readable stream into an Azure file.

      This method will try to create an Azure, then starts uploading chunk by
      chunk.

      Size of chunk is defined by `bufferSize` parameter.

      Please make sure potential size of stream doesn't exceed file size.


      PERFORMANCE IMPROVEMENT TIPS:

      * Input stream highWaterMark is better to set a same value with bufferSize
        parameter, which will avoid Buffer.concat() operations.
    syntax:
      content: >-
        function uploadStream(stream: Readable, size: number, bufferSize:
        number, maxBuffers: number, options?: FileUploadStreamOptions)
      parameters:
        - id: stream
          type:
            - Readable
          description: Node.js Readable stream. Must be less or equal than file size.
        - id: size
          type:
            - number
          description: |-
            Size of file to be created. Maximum size allowed is 1TB.
                                 If this value is larger than stream size, there will be empty bytes in file tail.
        - id: bufferSize
          type:
            - number
          description: >-
            Size of every buffer allocated in bytes, also the chunk/range size
            during
                                       the uploaded file. Size must be > 0 and <= 4 * 1024 * 1024 (4MB)
        - id: maxBuffers
          type:
            - number
          description: |-
            Max buffers will allocate during uploading, positive correlation
                                       with max uploading concurrency
        - id: options
          type:
            - '@azure/storage-file-share.FileUploadStreamOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<void>
        description: ''
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.ShareFileClient.url'
    name: url
    fullName: url
    children: []
    langs:
      - typeScript
    type: property
    summary: URL string value.
    syntax:
      content: 'url: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/storage-file-share'
references:
  - uid: '@azure/storage-file-share.StorageClient'
    name: StorageClient
    spec.typeScript:
      - name: StorageClient
        fullName: StorageClient
        uid: '@azure/storage-file-share.StorageClient'
  - uid: '@azure/storage-file-share.Credential'
    name: Credential
    spec.typeScript:
      - name: Credential
        fullName: Credential
        uid: '@azure/storage-file-share.Credential'
  - uid: '@azure/storage-file-share.StoragePipelineOptions'
    name: StoragePipelineOptions
    spec.typeScript:
      - name: StoragePipelineOptions
        fullName: StoragePipelineOptions
        uid: '@azure/storage-file-share.StoragePipelineOptions'
  - uid: '@azure/storage-file-share.Pipeline'
    name: Pipeline
    spec.typeScript:
      - name: Pipeline
        fullName: Pipeline
        uid: '@azure/storage-file-share.Pipeline'
  - uid: '@azure/storage-file-share.FileAbortCopyFromURLOptions'
    name: FileAbortCopyFromURLOptions
    spec.typeScript:
      - name: FileAbortCopyFromURLOptions
        fullName: FileAbortCopyFromURLOptions
        uid: '@azure/storage-file-share.FileAbortCopyFromURLOptions'
  - uid: Promise<@azure/storage-file-share.FileAbortCopyResponse>
    name: FileAbortCopyResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: FileAbortCopyResponse
        fullName: FileAbortCopyResponse
        uid: '@azure/storage-file-share.FileAbortCopyResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-file-share.FileClearRangeOptions'
    name: FileClearRangeOptions
    spec.typeScript:
      - name: FileClearRangeOptions
        fullName: FileClearRangeOptions
        uid: '@azure/storage-file-share.FileClearRangeOptions'
  - uid: Promise<@azure/storage-file-share.FileUploadRangeResponse>
    name: FileUploadRangeResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: FileUploadRangeResponse
        fullName: FileUploadRangeResponse
        uid: '@azure/storage-file-share.FileUploadRangeResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-file-share.FileCreateOptions'
    name: FileCreateOptions
    spec.typeScript:
      - name: FileCreateOptions
        fullName: FileCreateOptions
        uid: '@azure/storage-file-share.FileCreateOptions'
  - uid: Promise<@azure/storage-file-share.FileCreateResponse>
    name: FileCreateResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: FileCreateResponse
        fullName: FileCreateResponse
        uid: '@azure/storage-file-share.FileCreateResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-file-share.FileDeleteOptions'
    name: FileDeleteOptions
    spec.typeScript:
      - name: FileDeleteOptions
        fullName: FileDeleteOptions
        uid: '@azure/storage-file-share.FileDeleteOptions'
  - uid: Promise<@azure/storage-file-share.FileDeleteResponse>
    name: FileDeleteResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: FileDeleteResponse
        fullName: FileDeleteResponse
        uid: '@azure/storage-file-share.FileDeleteResponse'
      - name: '>'
        fullName: '>'
  - uid: Promise<@azure/storage-file-share.FileDeleteIfExistsResponse>
    name: FileDeleteIfExistsResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: FileDeleteIfExistsResponse
        fullName: FileDeleteIfExistsResponse
        uid: '@azure/storage-file-share.FileDeleteIfExistsResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-file-share.FileDownloadOptions'
    name: FileDownloadOptions
    spec.typeScript:
      - name: FileDownloadOptions
        fullName: FileDownloadOptions
        uid: '@azure/storage-file-share.FileDownloadOptions'
  - uid: Promise<@azure/storage-file-share.FileDownloadResponseModel>
    name: FileDownloadResponseModel>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: FileDownloadResponseModel
        fullName: FileDownloadResponseModel
        uid: '@azure/storage-file-share.FileDownloadResponseModel'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-file-share.FileDownloadToBufferOptions'
    name: FileDownloadToBufferOptions
    spec.typeScript:
      - name: FileDownloadToBufferOptions
        fullName: FileDownloadToBufferOptions
        uid: '@azure/storage-file-share.FileDownloadToBufferOptions'
  - uid: '@azure/storage-file-share.FileExistsOptions'
    name: FileExistsOptions
    spec.typeScript:
      - name: FileExistsOptions
        fullName: FileExistsOptions
        uid: '@azure/storage-file-share.FileExistsOptions'
  - uid: '@azure/storage-file-share.FileForceCloseHandlesOptions'
    name: FileForceCloseHandlesOptions
    spec.typeScript:
      - name: FileForceCloseHandlesOptions
        fullName: FileForceCloseHandlesOptions
        uid: '@azure/storage-file-share.FileForceCloseHandlesOptions'
  - uid: Promise<@azure/storage-file-share.CloseHandlesInfo>
    name: CloseHandlesInfo>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: CloseHandlesInfo
        fullName: CloseHandlesInfo
        uid: '@azure/storage-file-share.CloseHandlesInfo'
      - name: '>'
        fullName: '>'
  - uid: Promise<@azure/storage-file-share.FileForceCloseHandlesResponse>
    name: FileForceCloseHandlesResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: FileForceCloseHandlesResponse
        fullName: FileForceCloseHandlesResponse
        uid: '@azure/storage-file-share.FileForceCloseHandlesResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-file-share.FileGetPropertiesOptions'
    name: FileGetPropertiesOptions
    spec.typeScript:
      - name: FileGetPropertiesOptions
        fullName: FileGetPropertiesOptions
        uid: '@azure/storage-file-share.FileGetPropertiesOptions'
  - uid: Promise<@azure/storage-file-share.FileGetPropertiesResponse>
    name: FileGetPropertiesResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: FileGetPropertiesResponse
        fullName: FileGetPropertiesResponse
        uid: '@azure/storage-file-share.FileGetPropertiesResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-file-share.FileGetRangeListOptions'
    name: FileGetRangeListOptions
    spec.typeScript:
      - name: FileGetRangeListOptions
        fullName: FileGetRangeListOptions
        uid: '@azure/storage-file-share.FileGetRangeListOptions'
  - uid: Promise<@azure/storage-file-share.FileGetRangeListResponse>
    name: FileGetRangeListResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: FileGetRangeListResponse
        fullName: FileGetRangeListResponse
        uid: '@azure/storage-file-share.FileGetRangeListResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-file-share.ShareLeaseClient'
    name: ShareLeaseClient
    spec.typeScript:
      - name: ShareLeaseClient
        fullName: ShareLeaseClient
        uid: '@azure/storage-file-share.ShareLeaseClient'
  - uid: '@azure/storage-file-share.FileListHandlesOptions'
    name: FileListHandlesOptions
    spec.typeScript:
      - name: FileListHandlesOptions
        fullName: FileListHandlesOptions
        uid: '@azure/storage-file-share.FileListHandlesOptions'
  - uid: >-
      PagedAsyncIterableIterator<@azure/storage-file-share.HandleItem,
      @azure/storage-file-share.FileListHandlesResponse>
    name: FileListHandlesResponse>
    spec.typeScript:
      - name: PagedAsyncIterableIterator<
        fullName: PagedAsyncIterableIterator<
      - name: HandleItem
        fullName: HandleItem
        uid: '@azure/storage-file-share.HandleItem'
      - name: ', '
        fullName: ', '
      - name: FileListHandlesResponse
        fullName: FileListHandlesResponse
        uid: '@azure/storage-file-share.FileListHandlesResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-file-share.FileResizeOptions'
    name: FileResizeOptions
    spec.typeScript:
      - name: FileResizeOptions
        fullName: FileResizeOptions
        uid: '@azure/storage-file-share.FileResizeOptions'
  - uid: Promise<@azure/storage-file-share.FileSetHTTPHeadersResponse>
    name: FileSetHTTPHeadersResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: FileSetHTTPHeadersResponse
        fullName: FileSetHTTPHeadersResponse
        uid: '@azure/storage-file-share.FileSetHTTPHeadersResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-file-share.FileHttpHeaders'
    name: FileHttpHeaders
    spec.typeScript:
      - name: FileHttpHeaders
        fullName: FileHttpHeaders
        uid: '@azure/storage-file-share.FileHttpHeaders'
  - uid: '@azure/storage-file-share.FileSetHttpHeadersOptions'
    name: FileSetHttpHeadersOptions
    spec.typeScript:
      - name: FileSetHttpHeadersOptions
        fullName: FileSetHttpHeadersOptions
        uid: '@azure/storage-file-share.FileSetHttpHeadersOptions'
  - uid: '@azure/storage-file-share.Metadata'
    name: Metadata
    spec.typeScript:
      - name: Metadata
        fullName: Metadata
        uid: '@azure/storage-file-share.Metadata'
  - uid: '@azure/storage-file-share.FileSetMetadataOptions'
    name: FileSetMetadataOptions
    spec.typeScript:
      - name: FileSetMetadataOptions
        fullName: FileSetMetadataOptions
        uid: '@azure/storage-file-share.FileSetMetadataOptions'
  - uid: Promise<@azure/storage-file-share.FileSetMetadataResponse>
    name: FileSetMetadataResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: FileSetMetadataResponse
        fullName: FileSetMetadataResponse
        uid: '@azure/storage-file-share.FileSetMetadataResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-file-share.FileProperties'
    name: FileProperties
    spec.typeScript:
      - name: FileProperties
        fullName: FileProperties
        uid: '@azure/storage-file-share.FileProperties'
  - uid: Promise<@azure/storage-file-share.SetPropertiesResponse>
    name: SetPropertiesResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: SetPropertiesResponse
        fullName: SetPropertiesResponse
        uid: '@azure/storage-file-share.SetPropertiesResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-file-share.FileStartCopyOptions'
    name: FileStartCopyOptions
    spec.typeScript:
      - name: FileStartCopyOptions
        fullName: FileStartCopyOptions
        uid: '@azure/storage-file-share.FileStartCopyOptions'
  - uid: Promise<@azure/storage-file-share.FileStartCopyResponse>
    name: FileStartCopyResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: FileStartCopyResponse
        fullName: FileStartCopyResponse
        uid: '@azure/storage-file-share.FileStartCopyResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-file-share.FileParallelUploadOptions'
    name: FileParallelUploadOptions
    spec.typeScript:
      - name: FileParallelUploadOptions
        fullName: FileParallelUploadOptions
        uid: '@azure/storage-file-share.FileParallelUploadOptions'
  - uid: '@azure/storage-file-share.FileUploadRangeOptions'
    name: FileUploadRangeOptions
    spec.typeScript:
      - name: FileUploadRangeOptions
        fullName: FileUploadRangeOptions
        uid: '@azure/storage-file-share.FileUploadRangeOptions'
  - uid: '@azure/storage-file-share.FileUploadRangeFromURLOptions'
    name: FileUploadRangeFromURLOptions
    spec.typeScript:
      - name: FileUploadRangeFromURLOptions
        fullName: FileUploadRangeFromURLOptions
        uid: '@azure/storage-file-share.FileUploadRangeFromURLOptions'
  - uid: Promise<@azure/storage-file-share.FileUploadRangeFromURLResponse>
    name: FileUploadRangeFromURLResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: FileUploadRangeFromURLResponse
        fullName: FileUploadRangeFromURLResponse
        uid: '@azure/storage-file-share.FileUploadRangeFromURLResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-file-share.FileUploadStreamOptions'
    name: FileUploadStreamOptions
    spec.typeScript:
      - name: FileUploadStreamOptions
        fullName: FileUploadStreamOptions
        uid: '@azure/storage-file-share.FileUploadStreamOptions'
