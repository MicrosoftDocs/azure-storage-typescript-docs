### YamlMime:UniversalReference
items:
  - uid: '@azure/storage-blob.BlockBlobClient'
    name: BlockBlobClient
    fullName: BlockBlobClient
    children:
      - '@azure/storage-blob.BlockBlobClient.abortCopyFromURL'
      - '@azure/storage-blob.BlockBlobClient.accountName'
      - '@azure/storage-blob.BlockBlobClient.beginCopyFromURL'
      - '@azure/storage-blob.BlockBlobClient.constructor_2'
      - '@azure/storage-blob.BlockBlobClient.constructor_1'
      - '@azure/storage-blob.BlockBlobClient.constructor'
      - '@azure/storage-blob.BlockBlobClient.commitBlockList'
      - '@azure/storage-blob.BlockBlobClient.containerName'
      - '@azure/storage-blob.BlockBlobClient.createSnapshot'
      - '@azure/storage-blob.BlockBlobClient.credential'
      - '@azure/storage-blob.BlockBlobClient.delete'
      - '@azure/storage-blob.BlockBlobClient.deleteIfExists'
      - '@azure/storage-blob.BlockBlobClient.download'
      - '@azure/storage-blob.BlockBlobClient.downloadToBuffer_1'
      - '@azure/storage-blob.BlockBlobClient.downloadToBuffer'
      - '@azure/storage-blob.BlockBlobClient.downloadToFile'
      - '@azure/storage-blob.BlockBlobClient.exists'
      - '@azure/storage-blob.BlockBlobClient.getAppendBlobClient'
      - '@azure/storage-blob.BlockBlobClient.getBlobLeaseClient'
      - '@azure/storage-blob.BlockBlobClient.getBlockBlobClient'
      - '@azure/storage-blob.BlockBlobClient.getBlockList'
      - '@azure/storage-blob.BlockBlobClient.getPageBlobClient'
      - '@azure/storage-blob.BlockBlobClient.getProperties'
      - '@azure/storage-blob.BlockBlobClient.getTags'
      - '@azure/storage-blob.BlockBlobClient.name'
      - '@azure/storage-blob.BlockBlobClient.query'
      - '@azure/storage-blob.BlockBlobClient.setAccessTier'
      - '@azure/storage-blob.BlockBlobClient.setHTTPHeaders'
      - '@azure/storage-blob.BlockBlobClient.setMetadata'
      - '@azure/storage-blob.BlockBlobClient.setTags'
      - '@azure/storage-blob.BlockBlobClient.stageBlock'
      - '@azure/storage-blob.BlockBlobClient.stageBlockFromURL'
      - '@azure/storage-blob.BlockBlobClient.syncCopyFromURL'
      - '@azure/storage-blob.BlockBlobClient.undelete'
      - '@azure/storage-blob.BlockBlobClient.upload'
      - '@azure/storage-blob.BlockBlobClient.uploadBrowserData'
      - '@azure/storage-blob.BlockBlobClient.uploadFile'
      - '@azure/storage-blob.BlockBlobClient.uploadStream'
      - '@azure/storage-blob.BlockBlobClient.url'
      - '@azure/storage-blob.BlockBlobClient.withSnapshot'
      - '@azure/storage-blob.BlockBlobClient.withVersion'
    langs:
      - typeScript
    type: class
    summary: BlockBlobClient defines a set of operations applicable to block blobs.
    extends:
      name: '@azure/storage-blob.BlobClient'
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlockBlobClient.abortCopyFromURL'
    name: 'abortCopyFromURL(string, BlobAbortCopyFromURLOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Aborts a pending asynchronous Copy Blob operation, and leaves a
      destination blob with zero

      length and full metadata. Version 2012-02-12 and newer.
    syntax:
      content: >-
        function abortCopyFromURL(copyId: string, options?:
        BlobAbortCopyFromURLOptions)
      parameters:
        - id: copyId
          type:
            - string
          description: Id of the Copy From URL operation.
        - id: options
          type:
            - '@azure/storage-blob.BlobAbortCopyFromURLOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-blob.BlobAbortCopyFromURLResponse>
        description: ''
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlockBlobClient.accountName'
    name: accountName
    fullName: accountName
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'accountName: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlockBlobClient.beginCopyFromURL'
    name: 'beginCopyFromURL(string, BlobBeginCopyFromURLOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Asynchronously copies a blob to a destination within the storage account.

      This method returns a long running operation poller that allows you to
      wait

      indefinitely until the copy is completed.

      You can also cancel a copy before it is completed by calling
      `cancelOperation` on the poller.

      Note that the onProgress callback will not be invoked if the operation
      completes in the first

      request, and attempting to cancel a completed copy will result in an error
      being thrown.

      In version 2012-02-12 and later, the source for a Copy Blob operation can
      be

      a committed blob in any Azure storage account.

      Beginning with version 2015-02-21, the source for a Copy Blob operation
      can be

      an Azure file in any Azure storage account.

      Only storage accounts created on or after June 7th, 2012 allow the Copy
      Blob

      operation to copy from another storage account.
    syntax:
      content: >-
        function beginCopyFromURL(copySource: string, options?:
        BlobBeginCopyFromURLOptions)
      parameters:
        - id: copySource
          type:
            - string
          description: url to the source Azure Blob/File.
        - id: options
          type:
            - '@azure/storage-blob.BlobBeginCopyFromURLOptions'
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<PollerLike<PollOperationState<@azure/storage-blob.BlobBeginCopyFromURLResponse>,
            @azure/storage-blob.BlobBeginCopyFromURLResponse>>
        description: ''
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlockBlobClient.constructor_2'
    name: 'BlockBlobClient(string, Pipeline)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: >-
      Creates an instance of BlockBlobClient.

      This method accepts an encoded URL or non-encoded URL pointing to a block
      blob.

      Encoded URL string will NOT be escaped twice, only special characters in
      URL path will be escaped.

      If a blob name includes ? or %, blob name must be encoded in the URL.
    syntax:
      content: 'new BlockBlobClient(url: string, pipeline: Pipeline)'
      parameters:
        - id: url
          type:
            - string
          description: |-
            A URL string pointing to Azure Storage block blob, such as
                                "https://myaccount.blob.core.windows.net/mycontainer/blockblob". You can
                                append a SAS if using AnonymousCredential, such as
                                "https://myaccount.blob.core.windows.net/mycontainer/blockblob?sasString".
                                This method accepts an encoded URL or non-encoded URL pointing to a blob.
                                Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.
                                However, if a blob name includes ? or %, blob name must be encoded in the URL.
                                Such as a blob named "my?blob%", the URL should be "https://myaccount.blob.core.windows.net/mycontainer/my%3Fblob%25".
        - id: pipeline
          type:
            - '@azure/storage-blob.Pipeline'
          description: |-
            Call newPipeline() to create a default
                                       pipeline, or provide a customized pipeline.
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlockBlobClient.constructor_1'
    name: >-
      BlockBlobClient(string, StorageSharedKeyCredential | AnonymousCredential |
      TokenCredential, StoragePipelineOptions)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: >-
      Creates an instance of BlockBlobClient.

      This method accepts an encoded URL or non-encoded URL pointing to a block
      blob.

      Encoded URL string will NOT be escaped twice, only special characters in
      URL path will be escaped.

      If a blob name includes ? or %, blob name must be encoded in the URL.
    syntax:
      content: >-
        new BlockBlobClient(url: string, credential?: StorageSharedKeyCredential
        | AnonymousCredential | TokenCredential, options?:
        StoragePipelineOptions)
      parameters:
        - id: url
          type:
            - string
          description: |-
            A URL string pointing to Azure Storage block blob, such as
                                "https://myaccount.blob.core.windows.net/mycontainer/blockblob". You can
                                append a SAS if using AnonymousCredential, such as
                                "https://myaccount.blob.core.windows.net/mycontainer/blockblob?sasString".
                                This method accepts an encoded URL or non-encoded URL pointing to a blob.
                                Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.
                                However, if a blob name includes ? or %, blob name must be encoded in the URL.
                                Such as a blob named "my?blob%", the URL should be "https://myaccount.blob.core.windows.net/mycontainer/my%3Fblob%25".
        - id: credential
          type:
            - >-
              @azure/storage-blob.StorageSharedKeyCredential |
              @azure/storage-blob.AnonymousCredential | TokenCredential
          description: >-
            Such as AnonymousCredential, StorageSharedKeyCredential or any
            credential from the @azure/identity package to authenticate requests
            to the service. You can also provide an object that implements the
            TokenCredential interface. If not specified, AnonymousCredential is
            used.
          optional: true
        - id: options
          type:
            - '@azure/storage-blob.StoragePipelineOptions'
          description: ''
          optional: true
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlockBlobClient.constructor'
    name: 'BlockBlobClient(string, string, string, StoragePipelineOptions)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Creates an instance of BlockBlobClient.
    syntax:
      content: >-
        new BlockBlobClient(connectionString: string, containerName: string,
        blobName: string, options?: StoragePipelineOptions)
      parameters:
        - id: connectionString
          type:
            - string
          description: >-
            Account connection string or a SAS connection string of an Azure
            storage account.
                                             [ Note - Account connection string can only be used in NODE.JS runtime. ]
                                             Account connection string example -
                                             `DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=accountKey;EndpointSuffix=core.windows.net`
                                             SAS connection string example -
                                             `BlobEndpoint=https://myaccount.blob.core.windows.net/;QueueEndpoint=https://myaccount.queue.core.windows.net/;FileEndpoint=https://myaccount.file.core.windows.net/;TableEndpoint=https://myaccount.table.core.windows.net/;SharedAccessSignature=sasString`
        - id: containerName
          type:
            - string
          description: Container name.
        - id: blobName
          type:
            - string
          description: Blob name.
        - id: options
          type:
            - '@azure/storage-blob.StoragePipelineOptions'
          description: ''
          optional: true
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlockBlobClient.commitBlockList'
    name: 'commitBlockList(string[], BlockBlobCommitBlockListOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Writes a blob by specifying the list of block IDs that make up the blob.

      In order to be written as part of a blob, a block must have been
      successfully written

      to the server in a prior <xref:stageBlock> operation. You can call
      <xref:commitBlockList> to

      update a blob by uploading only those blocks that have changed, then
      committing the new and existing

      blocks together. Any blocks not specified in the block list and
      permanently deleted.
    syntax:
      content: >-
        function commitBlockList(blocks: string[], options?:
        BlockBlobCommitBlockListOptions)
      parameters:
        - id: blocks
          type:
            - 'string[]'
          description: Array of 64-byte value that is base64-encoded
        - id: options
          type:
            - '@azure/storage-blob.BlockBlobCommitBlockListOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-blob.BlockBlobCommitBlockListResponse>
        description: Response data for the Block Blob Commit Block List operation.
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlockBlobClient.containerName'
    name: containerName
    fullName: containerName
    children: []
    langs:
      - typeScript
    type: property
    summary: The name of the storage container the blob is associated with.
    syntax:
      content: string containerName
      return:
        type:
          - string
        description: ''
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlockBlobClient.createSnapshot'
    name: createSnapshot(BlobCreateSnapshotOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: Creates a read-only snapshot of a blob.
    syntax:
      content: 'function createSnapshot(options?: BlobCreateSnapshotOptions)'
      parameters:
        - id: options
          type:
            - '@azure/storage-blob.BlobCreateSnapshotOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-blob.BlobCreateSnapshotResponse>
        description: ''
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlockBlobClient.credential'
    name: credential
    fullName: credential
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Such as AnonymousCredential, StorageSharedKeyCredential or any credential
      from the @azure/identity package to authenticate requests to the service.
      You can also provide an object that implements the TokenCredential
      interface. If not specified, AnonymousCredential is used.
    syntax:
      content: >-
        credential: StorageSharedKeyCredential | AnonymousCredential |
        TokenCredential
      return:
        type:
          - >-
            @azure/storage-blob.StorageSharedKeyCredential |
            @azure/storage-blob.AnonymousCredential | TokenCredential
        description: ''
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlockBlobClient.delete'
    name: delete(BlobDeleteOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Marks the specified blob or snapshot for deletion. The blob is later
      deleted

      during garbage collection. Note that in order to delete a blob, you must
      delete

      all of its snapshots. You can delete both at the same time with the Delete

      Blob operation.
    syntax:
      content: 'function delete(options?: BlobDeleteOptions)'
      parameters:
        - id: options
          type:
            - '@azure/storage-blob.BlobDeleteOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-blob.BlobDeleteResponse>
        description: ''
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlockBlobClient.deleteIfExists'
    name: deleteIfExists(BlobDeleteOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Marks the specified blob or snapshot for deletion if it exists. The blob
      is later deleted

      during garbage collection. Note that in order to delete a blob, you must
      delete

      all of its snapshots. You can delete both at the same time with the Delete

      Blob operation.
    syntax:
      content: 'function deleteIfExists(options?: BlobDeleteOptions)'
      parameters:
        - id: options
          type:
            - '@azure/storage-blob.BlobDeleteOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-blob.BlobDeleteIfExistsResponse>
        description: ''
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlockBlobClient.download'
    name: 'download(number, number, BlobDownloadOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Reads or downloads a blob from the system, including its metadata and
      properties.

      You can also call Get Blob to read a snapshot.

      * In Node.js, data returns in a Readable stream readableStreamBody

      * In browsers, data returns in a promise blobBody
    syntax:
      content: >-
        function download(offset?: number, count?: number, options?:
        BlobDownloadOptions)
      parameters:
        - id: offset
          type:
            - number
          description: ''
          optional: true
        - id: count
          type:
            - number
          description: ''
          optional: true
        - id: options
          type:
            - '@azure/storage-blob.BlobDownloadOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-blob.BlobDownloadResponseModel>
        description: ''
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlockBlobClient.downloadToBuffer_1'
    name: 'downloadToBuffer(Buffer, number, number, BlobDownloadToBufferOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      ONLY AVAILABLE IN NODE.JS RUNTIME.

      Downloads an Azure Blob in parallel to a buffer.

      Offset and count are optional, downloads the entire blob if they are not
      provided.


      Warning: Buffers can only support files up to about one gigabyte on 32-bit
      systems or about two

      gigabytes on 64-bit systems due to limitations of Node.js/V8. For blobs
      larger than this size,

      consider <xref:downloadToFile>.
    syntax:
      content: >-
        function downloadToBuffer(buffer: Buffer, offset?: number, count?:
        number, options?: BlobDownloadToBufferOptions)
      parameters:
        - id: buffer
          type:
            - Buffer
          description: 'Buffer to be fill, must have length larger than count'
        - id: offset
          type:
            - number
          description: From which position of the block blob to download(in bytes)
          optional: true
        - id: count
          type:
            - number
          description: ''
          optional: true
        - id: options
          type:
            - '@azure/storage-blob.BlobDownloadToBufferOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<Buffer>
        description: ''
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlockBlobClient.downloadToBuffer'
    name: 'downloadToBuffer(number, number, BlobDownloadToBufferOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      ONLY AVAILABLE IN NODE.JS RUNTIME.

      Downloads an Azure Blob in parallel to a buffer.

      Offset and count are optional, downloads the entire blob if they are not
      provided.


      Warning: Buffers can only support files up to about one gigabyte on 32-bit
      systems or about two

      gigabytes on 64-bit systems due to limitations of Node.js/V8. For blobs
      larger than this size,

      consider <xref:downloadToFile>.
    syntax:
      content: >-
        function downloadToBuffer(offset?: number, count?: number, options?:
        BlobDownloadToBufferOptions)
      parameters:
        - id: offset
          type:
            - number
          description: From which position of the block blob to download(in bytes)
          optional: true
        - id: count
          type:
            - number
          description: ''
          optional: true
        - id: options
          type:
            - '@azure/storage-blob.BlobDownloadToBufferOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<Buffer>
        description: ''
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlockBlobClient.downloadToFile'
    name: 'downloadToFile(string, number, number, BlobDownloadOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      ONLY AVAILABLE IN NODE.JS RUNTIME.

      Downloads an Azure Blob to a local file.

      Fails if the the given file path already exits.

      Offset and count are optional, pass 0 and undefined respectively to
      download the entire blob.
    syntax:
      content: >-
        function downloadToFile(filePath: string, offset?: number, count?:
        number, options?: BlobDownloadOptions)
      parameters:
        - id: filePath
          type:
            - string
          description: ''
        - id: offset
          type:
            - number
          description: ''
          optional: true
        - id: count
          type:
            - number
          description: ''
          optional: true
        - id: options
          type:
            - '@azure/storage-blob.BlobDownloadOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-blob.BlobDownloadResponseModel>
        description: |-
          The response data for blob download operation,
                                                          but with readableStreamBody set to undefined since its
                                                          content is already read and written into a local file
                                                          at the specified path.
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlockBlobClient.exists'
    name: exists(BlobExistsOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Returns true if the Azure blob resource represented by this client exists;
      false otherwise.

      NOTE: use this function with care since an existing blob might be deleted
      by other clients or

      applications. Vice versa new blobs might be added by other clients or
      applications after this

      function completes.
    syntax:
      content: 'function exists(options?: BlobExistsOptions)'
      parameters:
        - id: options
          type:
            - '@azure/storage-blob.BlobExistsOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<boolean>
        description: ''
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlockBlobClient.getAppendBlobClient'
    name: getAppendBlobClient()
    children: []
    type: method
    langs:
      - typeScript
    summary: Creates a AppendBlobClient object.
    syntax:
      content: function getAppendBlobClient()
      parameters: []
      return:
        type:
          - '@azure/storage-blob.AppendBlobClient'
        description: ''
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlockBlobClient.getBlobLeaseClient'
    name: getBlobLeaseClient(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Get a <xref:BlobLeaseClient> that manages leases on the blob.'
    syntax:
      content: 'function getBlobLeaseClient(proposeLeaseId?: string)'
      parameters:
        - id: proposeLeaseId
          type:
            - string
          description: ''
          optional: true
      return:
        type:
          - '@azure/storage-blob.BlobLeaseClient'
        description: A new BlobLeaseClient object for managing leases on the blob.
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlockBlobClient.getBlockBlobClient'
    name: getBlockBlobClient()
    children: []
    type: method
    langs:
      - typeScript
    summary: Creates a BlockBlobClient object.
    syntax:
      content: function getBlockBlobClient()
      parameters: []
      return:
        type:
          - '@azure/storage-blob.BlockBlobClient'
        description: ''
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlockBlobClient.getBlockList'
    name: 'getBlockList(BlockListType, BlockBlobGetBlockListOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Returns the list of blocks that have been uploaded as part of a block blob
      using the specified block list filter.
    syntax:
      content: >-
        function getBlockList(listType: BlockListType, options?:
        BlockBlobGetBlockListOptions)
      parameters:
        - id: listType
          type:
            - '@azure/storage-blob.BlockListType'
          description: |-
            Specifies whether to return the list of committed blocks,
                                                   the list of uncommitted blocks, or both lists together.
        - id: options
          type:
            - '@azure/storage-blob.BlockBlobGetBlockListOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-blob.BlockBlobGetBlockListResponse>
        description: Response data for the Block Blob Get Block List operation.
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlockBlobClient.getPageBlobClient'
    name: getPageBlobClient()
    children: []
    type: method
    langs:
      - typeScript
    summary: Creates a PageBlobClient object.
    syntax:
      content: function getPageBlobClient()
      parameters: []
      return:
        type:
          - '@azure/storage-blob.PageBlobClient'
        description: ''
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlockBlobClient.getProperties'
    name: getProperties(BlobGetPropertiesOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns all user-defined metadata, standard HTTP properties, and system
      properties

      for the blob. It does not return the content of the blob.
    syntax:
      content: 'function getProperties(options?: BlobGetPropertiesOptions)'
      parameters:
        - id: options
          type:
            - '@azure/storage-blob.BlobGetPropertiesOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-blob.BlobGetPropertiesResponse>
        description: ''
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlockBlobClient.getTags'
    name: getTags(BlobGetTagsOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: Gets the tags associated with the underlying blob.
    syntax:
      content: 'function getTags(options?: BlobGetTagsOptions)'
      parameters:
        - id: options
          type:
            - '@azure/storage-blob.BlobGetTagsOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-blob.BlobGetTagsResponse>
        description: ''
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlockBlobClient.name'
    name: name
    fullName: name
    children: []
    langs:
      - typeScript
    type: property
    summary: The name of the blob.
    syntax:
      content: string name
      return:
        type:
          - string
        description: ''
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlockBlobClient.query'
    name: 'query(string, BlockBlobQueryOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Quick query for a JSON or CSV formatted blob.

      Example usage (Node.js):


      ```js

      // Query and convert a blob to a string

      const queryBlockBlobResponse = await blockBlobClient.query("select * from
      BlobStorage");

      const downloaded = await
      streamToString(queryBlockBlobResponse.readableStreamBody);

      console.log("Query blob content:", downloaded);


      async function streamToString(readableStream) {
        return new Promise((resolve, reject) => {
          const chunks = [];
          readableStream.on("data", (data) => {
            chunks.push(data.toString());
          });
          readableStream.on("end", () => {
            resolve(chunks.join(""));
          });
          readableStream.on("error", reject);
        });
      }

      ```
    syntax:
      content: 'function query(query: string, options?: BlockBlobQueryOptions)'
      parameters:
        - id: query
          type:
            - string
          description: ''
        - id: options
          type:
            - '@azure/storage-blob.BlockBlobQueryOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-blob.BlobDownloadResponseModel>
        description: ''
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlockBlobClient.setAccessTier'
    name: >-
      setAccessTier(BlockBlobTier | PremiumPageBlobTier | string,
      BlobSetTierOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Sets the tier on a blob. The operation is allowed on a page blob in a
      premium

      storage account and on a block blob in a blob storage account (locally
      redundant

      storage only). A premium page blob's tier determines the allowed size,
      IOPS,

      and bandwidth of the blob. A block blob's tier determines Hot/Cool/Archive

      storage type. This operation does not update the blob's ETag.
    syntax:
      content: >-
        function setAccessTier(tier: BlockBlobTier | PremiumPageBlobTier |
        string, options?: BlobSetTierOptions)
      parameters:
        - id: tier
          type:
            - >-
              @azure/storage-blob.BlockBlobTier |
              @azure/storage-blob.PremiumPageBlobTier | string
          description: >-
            The tier to be set on the blob. Valid values are Hot, Cool, or
            Archive.
        - id: options
          type:
            - '@azure/storage-blob.BlobSetTierOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-blob.BlobSetTierResponse>
        description: ''
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlockBlobClient.setHTTPHeaders'
    name: 'setHTTPHeaders(BlobHTTPHeaders, BlobSetHTTPHeadersOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Sets system properties on the blob.

      If no value provided, or no value provided for the specified blob HTTP
      headers,

      these blob HTTP headers without a value will be cleared.
    syntax:
      content: >-
        function setHTTPHeaders(blobHTTPHeaders?: BlobHTTPHeaders, options?:
        BlobSetHTTPHeadersOptions)
      parameters:
        - id: blobHTTPHeaders
          type:
            - '@azure/storage-blob.BlobHTTPHeaders'
          description: ''
          optional: true
        - id: options
          type:
            - '@azure/storage-blob.BlobSetHTTPHeadersOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-blob.BlobSetHTTPHeadersResponse>
        description: ''
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlockBlobClient.setMetadata'
    name: 'setMetadata(Metadata, BlobSetMetadataOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Sets user-defined metadata for the specified blob as one or more
      name-value pairs.

      If no option provided, or no metadata defined in the parameter, the blob

      metadata will be removed.
    syntax:
      content: >-
        function setMetadata(metadata?: Metadata, options?:
        BlobSetMetadataOptions)
      parameters:
        - id: metadata
          type:
            - '@azure/storage-blob.Metadata'
          description: ''
          optional: true
        - id: options
          type:
            - '@azure/storage-blob.BlobSetMetadataOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-blob.BlobSetMetadataResponse>
        description: ''
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlockBlobClient.setTags'
    name: 'setTags(Tags, BlobSetTagsOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Sets tags on the underlying blob.

      A blob can have up to 10 tags. Tag keys must be between 1 and 128
      characters.  Tag values must be between 0 and 256 characters.

      Valid tag key and value characters include lower and upper case letters,
      digits (0-9),

      space (' '), plus ('+'), minus ('-'), period ('.'), foward slash ('/'),
      colon (':'), equals ('='), and underscore ('_').
    syntax:
      content: 'function setTags(tags: Tags, options?: BlobSetTagsOptions)'
      parameters:
        - id: tags
          type:
            - '@azure/storage-blob.Tags'
          description: ''
        - id: options
          type:
            - '@azure/storage-blob.BlobSetTagsOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-blob.BlobSetTagsResponse>
        description: ''
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlockBlobClient.stageBlock'
    name: 'stageBlock(string, HttpRequestBody, number, BlockBlobStageBlockOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Uploads the specified block to the block blob's "staging area" to be later
      committed by a call to commitBlockList.
    syntax:
      content: >-
        function stageBlock(blockId: string, body: HttpRequestBody,
        contentLength: number, options?: BlockBlobStageBlockOptions)
      parameters:
        - id: blockId
          type:
            - string
          description: A 64-byte value that is base64-encoded
        - id: body
          type:
            - HttpRequestBody
          description: Data to upload to the staging area.
        - id: contentLength
          type:
            - number
          description: Number of bytes to upload.
        - id: options
          type:
            - '@azure/storage-blob.BlockBlobStageBlockOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-blob.BlockBlobStageBlockResponse>
        description: Response data for the Block Blob Stage Block operation.
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlockBlobClient.stageBlockFromURL'
    name: >-
      stageBlockFromURL(string, string, number, number,
      BlockBlobStageBlockFromURLOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Stage Block From URL operation creates a new block to be committed as
      part

      of a blob where the contents are read from a URL.

      This API is available starting in version 2018-03-28.
    syntax:
      content: >-
        function stageBlockFromURL(blockId: string, sourceURL: string, offset?:
        number, count?: number, options?: BlockBlobStageBlockFromURLOptions)
      parameters:
        - id: blockId
          type:
            - string
          description: A 64-byte value that is base64-encoded
        - id: sourceURL
          type:
            - string
          description: |-
            Specifies the URL of the blob. The value
                                      may be a URL of up to 2 KB in length that specifies a blob.
                                      The value should be URL-encoded as it would appear
                                      in a request URI. The source blob must either be public
                                      or must be authenticated via a shared access signature.
                                      If the source blob is public, no authentication is required
                                      to perform the operation. Here are some examples of source object URLs:
                                      - https://myaccount.blob.core.windows.net/mycontainer/myblob
                                      - https://myaccount.blob.core.windows.net/mycontainer/myblob?snapshot=<DateTime>
        - id: offset
          type:
            - number
          description: ''
          optional: true
        - id: count
          type:
            - number
          description: ''
          optional: true
        - id: options
          type:
            - '@azure/storage-blob.BlockBlobStageBlockFromURLOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-blob.BlockBlobStageBlockFromURLResponse>
        description: Response data for the Block Blob Stage Block From URL operation.
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlockBlobClient.syncCopyFromURL'
    name: 'syncCopyFromURL(string, BlobSyncCopyFromURLOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The synchronous Copy From URL operation copies a blob or an internet
      resource to a new blob. It will not

      return a response until the copy is complete.
    syntax:
      content: >-
        function syncCopyFromURL(copySource: string, options?:
        BlobSyncCopyFromURLOptions)
      parameters:
        - id: copySource
          type:
            - string
          description: >-
            The source URL to copy from, Shared Access Signature(SAS) maybe
            needed for authentication
        - id: options
          type:
            - '@azure/storage-blob.BlobSyncCopyFromURLOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-blob.BlobCopyFromURLResponse>
        description: ''
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlockBlobClient.undelete'
    name: undelete(BlobUndeleteOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Restores the contents and metadata of soft deleted blob and any associated

      soft deleted snapshots. Undelete Blob is supported only on version
      2017-07-29

      or later.
    syntax:
      content: 'function undelete(options?: BlobUndeleteOptions)'
      parameters:
        - id: options
          type:
            - '@azure/storage-blob.BlobUndeleteOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-blob.BlobUndeleteResponse>
        description: ''
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlockBlobClient.upload'
    name: 'upload(HttpRequestBody, number, BlockBlobUploadOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Creates a new block blob, or updates the content of an existing block
      blob.

      Updating an existing block blob overwrites any existing metadata on the
      blob.

      Partial updates are not supported; the content of the existing blob is

      overwritten with the new content. To perform a partial update of a block
      blob's,

      use <xref:stageBlock> and <xref:commitBlockList>.

      This is a non-parallel uploading method, please use <xref:uploadFile>,

      <xref:uploadStream> or <xref:uploadBrowserData> for better performance

      with concurrency uploading.
    syntax:
      content: >-
        function upload(body: HttpRequestBody, contentLength: number, options?:
        BlockBlobUploadOptions)
      parameters:
        - id: body
          type:
            - HttpRequestBody
          description: |-
            Blob, string, ArrayBuffer, ArrayBufferView or a function
                                          which returns a new Readable stream whose offset is from data source beginning.
        - id: contentLength
          type:
            - number
          description: >-
            Length of body in bytes. Use Buffer.byteLength() to calculate body
            length for a
                                          string including non non-Base64/Hex-encoded characters.
        - id: options
          type:
            - '@azure/storage-blob.BlockBlobUploadOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-blob.BlockBlobUploadResponse>
        description: Response data for the Block Blob Upload operation.
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlockBlobClient.uploadBrowserData'
    name: >-
      uploadBrowserData(Blob | ArrayBuffer | ArrayBufferView,
      BlockBlobParallelUploadOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      ONLY AVAILABLE IN BROWSERS.

      Uploads a browser Blob/File/ArrayBuffer/ArrayBufferView object to block
      blob.


      When buffer length <= 256MB, this method will use 1 upload call to finish
      the upload.

      Otherwise, this method will call <xref:stageBlock> to upload blocks, and
      finally call

      <xref:commitBlockList> to commit the block list.
    syntax:
      content: >-
        function uploadBrowserData(browserData: Blob | ArrayBuffer |
        ArrayBufferView, options?: BlockBlobParallelUploadOptions)
      parameters:
        - id: browserData
          type:
            - Blob | ArrayBuffer | ArrayBufferView
          description: 'Blob, File, ArrayBuffer or ArrayBufferView'
        - id: options
          type:
            - '@azure/storage-blob.BlockBlobParallelUploadOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-blob.BlobUploadCommonResponse>
        description: Response data for the Blob Upload operation.
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlockBlobClient.uploadFile'
    name: 'uploadFile(string, BlockBlobParallelUploadOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      ONLY AVAILABLE IN NODE.JS RUNTIME.

      Uploads a local file in blocks to a block blob.


      When file size <= 256MB, this method will use 1 upload call to finish the
      upload.

      Otherwise, this method will call stageBlock to upload blocks, and finally
      call commitBlockList

      to commit the block list.
    syntax:
      content: >-
        function uploadFile(filePath: string, options?:
        BlockBlobParallelUploadOptions)
      parameters:
        - id: filePath
          type:
            - string
          description: Full path of local file
        - id: options
          type:
            - '@azure/storage-blob.BlockBlobParallelUploadOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-blob.BlobUploadCommonResponse>
        description: Response data for the Blob Upload operation.
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlockBlobClient.uploadStream'
    name: 'uploadStream(Readable, number, number, BlockBlobUploadStreamOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      ONLY AVAILABLE IN NODE.JS RUNTIME.
      Uploads a Node.js Readable stream into block blob.

      PERFORMANCE IMPROVEMENT TIPS:
      * Input stream highWaterMark is better to set a same value with bufferSize
         parameter, which will avoid Buffer.concat() operations.
    syntax:
      content: >-
        function uploadStream(stream: Readable, bufferSize?: number,
        maxConcurrency?: number, options?: BlockBlobUploadStreamOptions)
      parameters:
        - id: stream
          type:
            - Readable
          description: Node.js Readable stream
        - id: bufferSize
          type:
            - number
          description: >-
            Size of every buffer allocated, also the block size in the uploaded
            block blob. Default value is 8MB
          optional: true
        - id: maxConcurrency
          type:
            - number
          description: >-
            Max concurrency indicates the max number of buffers that can be
            allocated,
                                            positive correlation with max uploading concurrency. Default value is 5
          optional: true
        - id: options
          type:
            - '@azure/storage-blob.BlockBlobUploadStreamOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-blob.BlobUploadCommonResponse>
        description: Response data for the Blob Upload operation.
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlockBlobClient.url'
    name: url
    fullName: url
    children: []
    langs:
      - typeScript
    type: property
    summary: Encoded URL string value.
    syntax:
      content: 'url: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlockBlobClient.withSnapshot'
    name: withSnapshot(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Creates a new BlockBlobClient object identical to the source but with the
      specified snapshot timestamp.
      Provide "" will remove the snapshot and return a URL to the base blob.
    syntax:
      content: 'function withSnapshot(snapshot: string)'
      parameters:
        - id: snapshot
          type:
            - string
          description: The snapshot timestamp.
      return:
        type:
          - '@azure/storage-blob.BlockBlobClient'
        description: >-
          A new BlockBlobClient object identical to the source but with the
          specified snapshot timestamp.
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlockBlobClient.withVersion'
    name: withVersion(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Creates a new BlobClient object pointing to a version of this blob.
      Provide "" will remove the versionId and return a Client to the base blob.
    syntax:
      content: 'function withVersion(versionId: string)'
      parameters:
        - id: versionId
          type:
            - string
          description: The versionId.
      return:
        type:
          - '@azure/storage-blob.BlobClient'
        description: A new BlobClient object pointing to the version of this blob.
    package: '@azure/storage-blob'
references:
  - uid: '@azure/storage-blob.BlobClient'
    name: BlobClient
    spec.typeScript:
      - name: BlobClient
        fullName: BlobClient
        uid: '@azure/storage-blob.BlobClient'
  - uid: '@azure/storage-blob.StoragePipelineOptions'
    name: StoragePipelineOptions
    spec.typeScript:
      - name: StoragePipelineOptions
        fullName: StoragePipelineOptions
        uid: '@azure/storage-blob.StoragePipelineOptions'
  - uid: >-
      @azure/storage-blob.StorageSharedKeyCredential |
      @azure/storage-blob.AnonymousCredential | TokenCredential
    name: AnonymousCredential | TokenCredential
    spec.typeScript:
      - name: StorageSharedKeyCredential
        fullName: StorageSharedKeyCredential
        uid: '@azure/storage-blob.StorageSharedKeyCredential'
      - name: ' | '
        fullName: ' | '
      - name: AnonymousCredential
        fullName: AnonymousCredential
        uid: '@azure/storage-blob.AnonymousCredential'
      - name: ' | TokenCredential'
        fullName: ' | TokenCredential'
  - uid: '@azure/storage-blob.Pipeline'
    name: Pipeline
    spec.typeScript:
      - name: Pipeline
        fullName: Pipeline
        uid: '@azure/storage-blob.Pipeline'
  - uid: '@azure/storage-blob.BlobAbortCopyFromURLOptions'
    name: BlobAbortCopyFromURLOptions
    spec.typeScript:
      - name: BlobAbortCopyFromURLOptions
        fullName: BlobAbortCopyFromURLOptions
        uid: '@azure/storage-blob.BlobAbortCopyFromURLOptions'
  - uid: Promise<@azure/storage-blob.BlobAbortCopyFromURLResponse>
    name: BlobAbortCopyFromURLResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: BlobAbortCopyFromURLResponse
        fullName: BlobAbortCopyFromURLResponse
        uid: '@azure/storage-blob.BlobAbortCopyFromURLResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-blob.BlobBeginCopyFromURLOptions'
    name: BlobBeginCopyFromURLOptions
    spec.typeScript:
      - name: BlobBeginCopyFromURLOptions
        fullName: BlobBeginCopyFromURLOptions
        uid: '@azure/storage-blob.BlobBeginCopyFromURLOptions'
  - uid: >-
      Promise<PollerLike<PollOperationState<@azure/storage-blob.BlobBeginCopyFromURLResponse>,
      @azure/storage-blob.BlobBeginCopyFromURLResponse>>
    name: BlobBeginCopyFromURLResponse>>
    spec.typeScript:
      - name: Promise<PollerLike<PollOperationState<
        fullName: Promise<PollerLike<PollOperationState<
      - name: BlobBeginCopyFromURLResponse
        fullName: BlobBeginCopyFromURLResponse
        uid: '@azure/storage-blob.BlobBeginCopyFromURLResponse'
      - name: '>, '
        fullName: '>, '
      - name: BlobBeginCopyFromURLResponse
        fullName: BlobBeginCopyFromURLResponse
        uid: '@azure/storage-blob.BlobBeginCopyFromURLResponse'
      - name: '>>'
        fullName: '>>'
  - uid: '@azure/storage-blob.BlockBlobCommitBlockListOptions'
    name: BlockBlobCommitBlockListOptions
    spec.typeScript:
      - name: BlockBlobCommitBlockListOptions
        fullName: BlockBlobCommitBlockListOptions
        uid: '@azure/storage-blob.BlockBlobCommitBlockListOptions'
  - uid: Promise<@azure/storage-blob.BlockBlobCommitBlockListResponse>
    name: BlockBlobCommitBlockListResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: BlockBlobCommitBlockListResponse
        fullName: BlockBlobCommitBlockListResponse
        uid: '@azure/storage-blob.BlockBlobCommitBlockListResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-blob.BlobCreateSnapshotOptions'
    name: BlobCreateSnapshotOptions
    spec.typeScript:
      - name: BlobCreateSnapshotOptions
        fullName: BlobCreateSnapshotOptions
        uid: '@azure/storage-blob.BlobCreateSnapshotOptions'
  - uid: Promise<@azure/storage-blob.BlobCreateSnapshotResponse>
    name: BlobCreateSnapshotResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: BlobCreateSnapshotResponse
        fullName: BlobCreateSnapshotResponse
        uid: '@azure/storage-blob.BlobCreateSnapshotResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-blob.BlobDeleteOptions'
    name: BlobDeleteOptions
    spec.typeScript:
      - name: BlobDeleteOptions
        fullName: BlobDeleteOptions
        uid: '@azure/storage-blob.BlobDeleteOptions'
  - uid: Promise<@azure/storage-blob.BlobDeleteResponse>
    name: BlobDeleteResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: BlobDeleteResponse
        fullName: BlobDeleteResponse
        uid: '@azure/storage-blob.BlobDeleteResponse'
      - name: '>'
        fullName: '>'
  - uid: Promise<@azure/storage-blob.BlobDeleteIfExistsResponse>
    name: BlobDeleteIfExistsResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: BlobDeleteIfExistsResponse
        fullName: BlobDeleteIfExistsResponse
        uid: '@azure/storage-blob.BlobDeleteIfExistsResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-blob.BlobDownloadOptions'
    name: BlobDownloadOptions
    spec.typeScript:
      - name: BlobDownloadOptions
        fullName: BlobDownloadOptions
        uid: '@azure/storage-blob.BlobDownloadOptions'
  - uid: Promise<@azure/storage-blob.BlobDownloadResponseModel>
    name: BlobDownloadResponseModel>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: BlobDownloadResponseModel
        fullName: BlobDownloadResponseModel
        uid: '@azure/storage-blob.BlobDownloadResponseModel'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-blob.BlobDownloadToBufferOptions'
    name: BlobDownloadToBufferOptions
    spec.typeScript:
      - name: BlobDownloadToBufferOptions
        fullName: BlobDownloadToBufferOptions
        uid: '@azure/storage-blob.BlobDownloadToBufferOptions'
  - uid: '@azure/storage-blob.BlobExistsOptions'
    name: BlobExistsOptions
    spec.typeScript:
      - name: BlobExistsOptions
        fullName: BlobExistsOptions
        uid: '@azure/storage-blob.BlobExistsOptions'
  - uid: '@azure/storage-blob.AppendBlobClient'
    name: AppendBlobClient
    spec.typeScript:
      - name: AppendBlobClient
        fullName: AppendBlobClient
        uid: '@azure/storage-blob.AppendBlobClient'
  - uid: '@azure/storage-blob.BlobLeaseClient'
    name: BlobLeaseClient
    spec.typeScript:
      - name: BlobLeaseClient
        fullName: BlobLeaseClient
        uid: '@azure/storage-blob.BlobLeaseClient'
  - uid: '@azure/storage-blob.BlockBlobClient'
    name: BlockBlobClient
    spec.typeScript:
      - name: BlockBlobClient
        fullName: BlockBlobClient
        uid: '@azure/storage-blob.BlockBlobClient'
  - uid: '@azure/storage-blob.BlockListType'
    name: BlockListType
    spec.typeScript:
      - name: BlockListType
        fullName: BlockListType
        uid: '@azure/storage-blob.BlockListType'
  - uid: '@azure/storage-blob.BlockBlobGetBlockListOptions'
    name: BlockBlobGetBlockListOptions
    spec.typeScript:
      - name: BlockBlobGetBlockListOptions
        fullName: BlockBlobGetBlockListOptions
        uid: '@azure/storage-blob.BlockBlobGetBlockListOptions'
  - uid: Promise<@azure/storage-blob.BlockBlobGetBlockListResponse>
    name: BlockBlobGetBlockListResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: BlockBlobGetBlockListResponse
        fullName: BlockBlobGetBlockListResponse
        uid: '@azure/storage-blob.BlockBlobGetBlockListResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-blob.PageBlobClient'
    name: PageBlobClient
    spec.typeScript:
      - name: PageBlobClient
        fullName: PageBlobClient
        uid: '@azure/storage-blob.PageBlobClient'
  - uid: '@azure/storage-blob.BlobGetPropertiesOptions'
    name: BlobGetPropertiesOptions
    spec.typeScript:
      - name: BlobGetPropertiesOptions
        fullName: BlobGetPropertiesOptions
        uid: '@azure/storage-blob.BlobGetPropertiesOptions'
  - uid: Promise<@azure/storage-blob.BlobGetPropertiesResponse>
    name: BlobGetPropertiesResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: BlobGetPropertiesResponse
        fullName: BlobGetPropertiesResponse
        uid: '@azure/storage-blob.BlobGetPropertiesResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-blob.BlobGetTagsOptions'
    name: BlobGetTagsOptions
    spec.typeScript:
      - name: BlobGetTagsOptions
        fullName: BlobGetTagsOptions
        uid: '@azure/storage-blob.BlobGetTagsOptions'
  - uid: Promise<@azure/storage-blob.BlobGetTagsResponse>
    name: BlobGetTagsResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: BlobGetTagsResponse
        fullName: BlobGetTagsResponse
        uid: '@azure/storage-blob.BlobGetTagsResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-blob.BlockBlobQueryOptions'
    name: BlockBlobQueryOptions
    spec.typeScript:
      - name: BlockBlobQueryOptions
        fullName: BlockBlobQueryOptions
        uid: '@azure/storage-blob.BlockBlobQueryOptions'
  - uid: >-
      @azure/storage-blob.BlockBlobTier |
      @azure/storage-blob.PremiumPageBlobTier | string
    name: PremiumPageBlobTier | string
    spec.typeScript:
      - name: BlockBlobTier
        fullName: BlockBlobTier
        uid: '@azure/storage-blob.BlockBlobTier'
      - name: ' | '
        fullName: ' | '
      - name: PremiumPageBlobTier
        fullName: PremiumPageBlobTier
        uid: '@azure/storage-blob.PremiumPageBlobTier'
      - name: ' | string'
        fullName: ' | string'
  - uid: '@azure/storage-blob.BlobSetTierOptions'
    name: BlobSetTierOptions
    spec.typeScript:
      - name: BlobSetTierOptions
        fullName: BlobSetTierOptions
        uid: '@azure/storage-blob.BlobSetTierOptions'
  - uid: Promise<@azure/storage-blob.BlobSetTierResponse>
    name: BlobSetTierResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: BlobSetTierResponse
        fullName: BlobSetTierResponse
        uid: '@azure/storage-blob.BlobSetTierResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-blob.BlobHTTPHeaders'
    name: BlobHTTPHeaders
    spec.typeScript:
      - name: BlobHTTPHeaders
        fullName: BlobHTTPHeaders
        uid: '@azure/storage-blob.BlobHTTPHeaders'
  - uid: '@azure/storage-blob.BlobSetHTTPHeadersOptions'
    name: BlobSetHTTPHeadersOptions
    spec.typeScript:
      - name: BlobSetHTTPHeadersOptions
        fullName: BlobSetHTTPHeadersOptions
        uid: '@azure/storage-blob.BlobSetHTTPHeadersOptions'
  - uid: Promise<@azure/storage-blob.BlobSetHTTPHeadersResponse>
    name: BlobSetHTTPHeadersResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: BlobSetHTTPHeadersResponse
        fullName: BlobSetHTTPHeadersResponse
        uid: '@azure/storage-blob.BlobSetHTTPHeadersResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-blob.Metadata'
    name: Metadata
    spec.typeScript:
      - name: Metadata
        fullName: Metadata
        uid: '@azure/storage-blob.Metadata'
  - uid: '@azure/storage-blob.BlobSetMetadataOptions'
    name: BlobSetMetadataOptions
    spec.typeScript:
      - name: BlobSetMetadataOptions
        fullName: BlobSetMetadataOptions
        uid: '@azure/storage-blob.BlobSetMetadataOptions'
  - uid: Promise<@azure/storage-blob.BlobSetMetadataResponse>
    name: BlobSetMetadataResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: BlobSetMetadataResponse
        fullName: BlobSetMetadataResponse
        uid: '@azure/storage-blob.BlobSetMetadataResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-blob.Tags'
    name: Tags
    spec.typeScript:
      - name: Tags
        fullName: Tags
        uid: '@azure/storage-blob.Tags'
  - uid: '@azure/storage-blob.BlobSetTagsOptions'
    name: BlobSetTagsOptions
    spec.typeScript:
      - name: BlobSetTagsOptions
        fullName: BlobSetTagsOptions
        uid: '@azure/storage-blob.BlobSetTagsOptions'
  - uid: Promise<@azure/storage-blob.BlobSetTagsResponse>
    name: BlobSetTagsResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: BlobSetTagsResponse
        fullName: BlobSetTagsResponse
        uid: '@azure/storage-blob.BlobSetTagsResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-blob.BlockBlobStageBlockOptions'
    name: BlockBlobStageBlockOptions
    spec.typeScript:
      - name: BlockBlobStageBlockOptions
        fullName: BlockBlobStageBlockOptions
        uid: '@azure/storage-blob.BlockBlobStageBlockOptions'
  - uid: Promise<@azure/storage-blob.BlockBlobStageBlockResponse>
    name: BlockBlobStageBlockResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: BlockBlobStageBlockResponse
        fullName: BlockBlobStageBlockResponse
        uid: '@azure/storage-blob.BlockBlobStageBlockResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-blob.BlockBlobStageBlockFromURLOptions'
    name: BlockBlobStageBlockFromURLOptions
    spec.typeScript:
      - name: BlockBlobStageBlockFromURLOptions
        fullName: BlockBlobStageBlockFromURLOptions
        uid: '@azure/storage-blob.BlockBlobStageBlockFromURLOptions'
  - uid: Promise<@azure/storage-blob.BlockBlobStageBlockFromURLResponse>
    name: BlockBlobStageBlockFromURLResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: BlockBlobStageBlockFromURLResponse
        fullName: BlockBlobStageBlockFromURLResponse
        uid: '@azure/storage-blob.BlockBlobStageBlockFromURLResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-blob.BlobSyncCopyFromURLOptions'
    name: BlobSyncCopyFromURLOptions
    spec.typeScript:
      - name: BlobSyncCopyFromURLOptions
        fullName: BlobSyncCopyFromURLOptions
        uid: '@azure/storage-blob.BlobSyncCopyFromURLOptions'
  - uid: Promise<@azure/storage-blob.BlobCopyFromURLResponse>
    name: BlobCopyFromURLResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: BlobCopyFromURLResponse
        fullName: BlobCopyFromURLResponse
        uid: '@azure/storage-blob.BlobCopyFromURLResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-blob.BlobUndeleteOptions'
    name: BlobUndeleteOptions
    spec.typeScript:
      - name: BlobUndeleteOptions
        fullName: BlobUndeleteOptions
        uid: '@azure/storage-blob.BlobUndeleteOptions'
  - uid: Promise<@azure/storage-blob.BlobUndeleteResponse>
    name: BlobUndeleteResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: BlobUndeleteResponse
        fullName: BlobUndeleteResponse
        uid: '@azure/storage-blob.BlobUndeleteResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-blob.BlockBlobUploadOptions'
    name: BlockBlobUploadOptions
    spec.typeScript:
      - name: BlockBlobUploadOptions
        fullName: BlockBlobUploadOptions
        uid: '@azure/storage-blob.BlockBlobUploadOptions'
  - uid: Promise<@azure/storage-blob.BlockBlobUploadResponse>
    name: BlockBlobUploadResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: BlockBlobUploadResponse
        fullName: BlockBlobUploadResponse
        uid: '@azure/storage-blob.BlockBlobUploadResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-blob.BlockBlobParallelUploadOptions'
    name: BlockBlobParallelUploadOptions
    spec.typeScript:
      - name: BlockBlobParallelUploadOptions
        fullName: BlockBlobParallelUploadOptions
        uid: '@azure/storage-blob.BlockBlobParallelUploadOptions'
  - uid: Promise<@azure/storage-blob.BlobUploadCommonResponse>
    name: BlobUploadCommonResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: BlobUploadCommonResponse
        fullName: BlobUploadCommonResponse
        uid: '@azure/storage-blob.BlobUploadCommonResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-blob.BlockBlobUploadStreamOptions'
    name: BlockBlobUploadStreamOptions
    spec.typeScript:
      - name: BlockBlobUploadStreamOptions
        fullName: BlockBlobUploadStreamOptions
        uid: '@azure/storage-blob.BlockBlobUploadStreamOptions'
