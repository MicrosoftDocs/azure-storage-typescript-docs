### YamlMime:TSType
name: ContainerClient
uid: '@azure/storage-blob.ContainerClient'
package: '@azure/storage-blob'
summary: >-
  A ContainerClient represents a URL to the Azure Storage container allowing you
  to manipulate its blobs.
fullName: ContainerClient
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: 'ContainerClient(string, Pipeline)'
    uid: '@azure/storage-blob.ContainerClient.constructor_2'
    package: '@azure/storage-blob'
    summary: >-
      Creates an instance of ContainerClient.

      This method accepts an encoded URL or non-encoded URL pointing to a page
      blob.

      Encoded URL string will NOT be escaped twice, only special characters in
      URL path will be escaped.

      If a blob name includes ? or %, blob name must be encoded in the URL.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'new ContainerClient(url: string, pipeline: Pipeline)'
      parameters:
        - id: url
          type: string
          description: |-
            A URL string pointing to Azure Storage page blob, such as
                                "https://myaccount.blob.core.windows.net/mycontainer/pageblob". You can
                                append a SAS if using AnonymousCredential, such as
                                "https://myaccount.blob.core.windows.net/mycontainer/pageblob?sasString".
                                This method accepts an encoded URL or non-encoded URL pointing to a blob.
                                Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.
                                However, if a blob name includes ? or %, blob name must be encoded in the URL.
                                Such as a blob named "my?blob%", the URL should be "https://myaccount.blob.core.windows.net/mycontainer/my%3Fblob%25".
        - id: pipeline
          type: <xref uid="@azure/storage-blob.Pipeline" />
          description: |-
            Call newPipeline() to create a default
                                       pipeline, or provide a customized pipeline.
  - name: >-
      ContainerClient(string, StorageSharedKeyCredential | AnonymousCredential |
      TokenCredential, StoragePipelineOptions)
    uid: '@azure/storage-blob.ContainerClient.constructor_1'
    package: '@azure/storage-blob'
    summary: >-
      Creates an instance of ContainerClient.

      This method accepts an encoded URL or non-encoded URL pointing to a page
      blob.

      Encoded URL string will NOT be escaped twice, only special characters in
      URL path will be escaped.

      If a blob name includes ? or %, blob name must be encoded in the URL.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        new ContainerClient(url: string, credential?: StorageSharedKeyCredential
        | AnonymousCredential | TokenCredential, options?:
        StoragePipelineOptions)
      parameters:
        - id: url
          type: string
          description: |-
            A URL string pointing to Azure Storage page blob, such as
                                "https://myaccount.blob.core.windows.net/mycontainer/pageblob". You can
                                append a SAS if using AnonymousCredential, such as
                                "https://myaccount.blob.core.windows.net/mycontainer/pageblob?sasString".
                                This method accepts an encoded URL or non-encoded URL pointing to a blob.
                                Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.
                                However, if a blob name includes ? or %, blob name must be encoded in the URL.
                                Such as a blob named "my?blob%", the URL should be "https://myaccount.blob.core.windows.net/mycontainer/my%3Fblob%25".
        - id: credential
          type: >-
            <xref uid="@azure/storage-blob.StorageSharedKeyCredential" /> |
            <xref uid="@azure/storage-blob.AnonymousCredential" /> |
            TokenCredential
          description: >-
            Such as AnonymousCredential, StorageSharedKeyCredential or any
            credential from the @azure/identity package to authenticate requests
            to the service. You can also provide an object that implements the
            TokenCredential interface. If not specified, AnonymousCredential is
            used.
        - id: options
          type: <xref uid="@azure/storage-blob.StoragePipelineOptions" />
          description: ''
  - name: 'ContainerClient(string, string, StoragePipelineOptions)'
    uid: '@azure/storage-blob.ContainerClient.constructor'
    package: '@azure/storage-blob'
    summary: Creates an instance of ContainerClient.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        new ContainerClient(connectionString: string, containerName: string,
        options?: StoragePipelineOptions)
      parameters:
        - id: connectionString
          type: string
          description: >-
            Account connection string or a SAS connection string of an Azure
            storage account.
                                             [ Note - Account connection string can only be used in NODE.JS runtime. ]
                                             Account connection string example -
                                             `DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=accountKey;EndpointSuffix=core.windows.net`
                                             SAS connection string example -
                                             `BlobEndpoint=https://myaccount.blob.core.windows.net/;QueueEndpoint=https://myaccount.queue.core.windows.net/;FileEndpoint=https://myaccount.file.core.windows.net/;TableEndpoint=https://myaccount.table.core.windows.net/;SharedAccessSignature=sasString`
        - id: containerName
          type: string
          description: Container name.
        - id: options
          type: <xref uid="@azure/storage-blob.StoragePipelineOptions" />
          description: ''
properties:
  - name: accountName
    uid: '@azure/storage-blob.ContainerClient.accountName'
    package: '@azure/storage-blob'
    summary: ''
    fullName: accountName
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'accountName: string'
      return:
        type: string
        description: ''
  - name: containerName
    uid: '@azure/storage-blob.ContainerClient.containerName'
    package: '@azure/storage-blob'
    summary: The name of the container.
    fullName: containerName
    isPreview: false
    isDeprecated: false
    syntax:
      content: string containerName
      return:
        type: string
        description: ''
  - name: credential
    uid: '@azure/storage-blob.ContainerClient.credential'
    package: '@azure/storage-blob'
    summary: >-
      Such as AnonymousCredential, StorageSharedKeyCredential or any credential
      from the @azure/identity package to authenticate requests to the service.
      You can also provide an object that implements the TokenCredential
      interface. If not specified, AnonymousCredential is used.
    fullName: credential
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        credential: StorageSharedKeyCredential | AnonymousCredential |
        TokenCredential
      return:
        type: >-
          <xref uid="@azure/storage-blob.StorageSharedKeyCredential" /> | <xref
          uid="@azure/storage-blob.AnonymousCredential" /> | TokenCredential
        description: ''
  - name: url
    uid: '@azure/storage-blob.ContainerClient.url'
    package: '@azure/storage-blob'
    summary: Encoded URL string value.
    fullName: url
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'url: string'
      return:
        type: string
        description: ''
methods:
  - name: create(ContainerCreateOptions)
    uid: '@azure/storage-blob.ContainerClient.create'
    package: '@azure/storage-blob'
    summary: |-
      Creates a new container under the specified account. If the container with
      the same name already exists, the operation fails.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function create(options?: ContainerCreateOptions)'
      parameters:
        - id: options
          type: <xref uid="@azure/storage-blob.ContainerCreateOptions" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref uid="@azure/storage-blob.ContainerCreateResponse"
          />&gt;
        description: ''
  - name: createIfNotExists(ContainerCreateOptions)
    uid: '@azure/storage-blob.ContainerClient.createIfNotExists'
    package: '@azure/storage-blob'
    summary: |-
      Creates a new container under the specified account. If the container with
      the same name already exists, it is not changed.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function createIfNotExists(options?: ContainerCreateOptions)'
      parameters:
        - id: options
          type: <xref uid="@azure/storage-blob.ContainerCreateOptions" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-blob.ContainerCreateIfNotExistsResponse" />&gt;
        description: ''
  - name: delete(ContainerDeleteMethodOptions)
    uid: '@azure/storage-blob.ContainerClient.delete'
    package: '@azure/storage-blob'
    summary: |-
      Marks the specified container for deletion. The container and any blobs
      contained within it are later deleted during garbage collection.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function delete(options?: ContainerDeleteMethodOptions)'
      parameters:
        - id: options
          type: <xref uid="@azure/storage-blob.ContainerDeleteMethodOptions" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref uid="@azure/storage-blob.ContainerDeleteResponse"
          />&gt;
        description: ''
  - name: 'deleteBlob(string, ContainerDeleteBlobOptions)'
    uid: '@azure/storage-blob.ContainerClient.deleteBlob'
    package: '@azure/storage-blob'
    summary: >-
      Marks the specified blob or snapshot for deletion. The blob is later
      deleted

      during garbage collection. Note that in order to delete a blob, you must
      delete

      all of its snapshots. You can delete both at the same time with the Delete

      Blob operation.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteBlob(blobName: string, options?:
        ContainerDeleteBlobOptions)
      parameters:
        - id: blobName
          type: string
          description: ''
        - id: options
          type: <xref uid="@azure/storage-blob.ContainerDeleteBlobOptions" />
          description: ''
      return:
        type: Promise&lt;<xref uid="@azure/storage-blob.BlobDeleteResponse" />&gt;
        description: Block blob deletion response data.
  - name: deleteIfExists(ContainerDeleteMethodOptions)
    uid: '@azure/storage-blob.ContainerClient.deleteIfExists'
    package: '@azure/storage-blob'
    summary: >-
      Marks the specified container for deletion if it exists. The container and
      any blobs

      contained within it are later deleted during garbage collection.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function deleteIfExists(options?: ContainerDeleteMethodOptions)'
      parameters:
        - id: options
          type: <xref uid="@azure/storage-blob.ContainerDeleteMethodOptions" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-blob.ContainerDeleteIfExistsResponse" />&gt;
        description: ''
  - name: exists(ContainerExistsOptions)
    uid: '@azure/storage-blob.ContainerClient.exists'
    package: '@azure/storage-blob'
    summary: >
      Returns true if the Azure container resource represented by this client
      exists; false otherwise.

      NOTE: use this function with care since an existing container might be
      deleted by other clients or

      applications. Vice versa new containers with the same name might be added
      by other clients or

      applications after this function completes.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function exists(options?: ContainerExistsOptions)'
      parameters:
        - id: options
          type: <xref uid="@azure/storage-blob.ContainerExistsOptions" />
          description: ''
      return:
        type: Promise&lt;boolean&gt;
        description: ''
  - name: getAccessPolicy(ContainerGetAccessPolicyOptions)
    uid: '@azure/storage-blob.ContainerClient.getAccessPolicy'
    package: '@azure/storage-blob'
    summary: >
      Gets the permissions for the specified container. The permissions indicate

      whether container data may be accessed publicly.

      WARNING: JavaScript Date will potentially lose precision when parsing
      startsOn and expiresOn strings.

      For example, new Date("2018-12-31T03:44:23.8827891Z").toISOString() will
      get "2018-12-31T03:44:23.882Z".
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getAccessPolicy(options?: ContainerGetAccessPolicyOptions)'
      parameters:
        - id: options
          type: <xref uid="@azure/storage-blob.ContainerGetAccessPolicyOptions" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-blob.ContainerGetAccessPolicyResponse" />&gt;
        description: ''
  - name: getAppendBlobClient(string)
    uid: '@azure/storage-blob.ContainerClient.getAppendBlobClient'
    package: '@azure/storage-blob'
    summary: 'Creates an <xref:AppendBlobClient>'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getAppendBlobClient(blobName: string)'
      parameters:
        - id: blobName
          type: string
          description: An append blob name
      return:
        type: <xref uid="@azure/storage-blob.AppendBlobClient" />
        description: ''
  - name: getBlobClient(string)
    uid: '@azure/storage-blob.ContainerClient.getBlobClient'
    package: '@azure/storage-blob'
    summary: 'Creates a <xref:BlobClient>'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getBlobClient(blobName: string)'
      parameters:
        - id: blobName
          type: string
          description: A blob name
      return:
        type: <xref uid="@azure/storage-blob.BlobClient" />
        description: A new BlobClient object for the given blob name.
  - name: getBlobLeaseClient(string)
    uid: '@azure/storage-blob.ContainerClient.getBlobLeaseClient'
    package: '@azure/storage-blob'
    summary: 'Get a <xref:BlobLeaseClient> that manages leases on the container.'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getBlobLeaseClient(proposeLeaseId?: string)'
      parameters:
        - id: proposeLeaseId
          type: string
          description: ''
      return:
        type: <xref uid="@azure/storage-blob.BlobLeaseClient" />
        description: A new BlobLeaseClient object for managing leases on the container.
  - name: getBlockBlobClient(string)
    uid: '@azure/storage-blob.ContainerClient.getBlockBlobClient'
    package: '@azure/storage-blob'
    summary: 'Creates a <xref:BlockBlobClient>'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getBlockBlobClient(blobName: string)'
      parameters:
        - id: blobName
          type: string
          description: A block blob name
      return:
        type: <xref uid="@azure/storage-blob.BlockBlobClient" />
        description: ''
  - name: getPageBlobClient(string)
    uid: '@azure/storage-blob.ContainerClient.getPageBlobClient'
    package: '@azure/storage-blob'
    summary: 'Creates a <xref:PageBlobClient>'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getPageBlobClient(blobName: string)'
      parameters:
        - id: blobName
          type: string
          description: A page blob name
      return:
        type: <xref uid="@azure/storage-blob.PageBlobClient" />
        description: ''
  - name: getProperties(ContainerGetPropertiesOptions)
    uid: '@azure/storage-blob.ContainerClient.getProperties'
    package: '@azure/storage-blob'
    summary: >-
      Returns all user-defined metadata and system properties for the specified

      container. The data returned does not include the container's list of
      blobs.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getProperties(options?: ContainerGetPropertiesOptions)'
      parameters:
        - id: options
          type: <xref uid="@azure/storage-blob.ContainerGetPropertiesOptions" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-blob.ContainerGetPropertiesResponse" />&gt;
        description: ''
  - name: 'listBlobsByHierarchy(string, ContainerListBlobsOptions)'
    uid: '@azure/storage-blob.ContainerClient.listBlobsByHierarchy'
    package: '@azure/storage-blob'
    summary: >
      Returns an async iterable iterator to list all the blobs by hierarchy.

      under the specified account.

      .byPage() returns an async iterable iterator to list the blobs by
      hierarchy in pages.


      Example using `for await` syntax:


      ```js

      for await (const item of containerClient.listBlobsByHierarchy("/")) {
        if (item.kind === "prefix") {
          console.log(`\tBlobPrefix: ${item.name}`);
        } else {
          console.log(`\tBlobItem: name - ${item.name}, last modified - ${item.properties.lastModified}`);
        }
      }

      ```


      Example using `iter.next()`:


      ```js

      let iter = containerClient.listBlobsByHierarchy("/", { prefix: "prefix1/"
      });

      let entity = await iter.next();

      while (!entity.done) {
        let item = entity.value;
        if (item.kind === "prefix") {
          console.log(`\tBlobPrefix: ${item.name}`);
        } else {
          console.log(`\tBlobItem: name - ${item.name}, last modified - ${item.properties.lastModified}`);
        }
        entity = await iter.next();
      }

      ```js


      Example using `byPage()`:


      ```js

      console.log("Listing blobs by hierarchy by page");

      for await (const response of
      containerClient.listBlobsByHierarchy("/").byPage()) {
        const segment = response.segment;
        if (segment.blobPrefixes) {
          for (const prefix of segment.blobPrefixes) {
            console.log(`\tBlobPrefix: ${prefix.name}`);
          }
        }
        for (const blob of response.segment.blobItems) {
          console.log(`\tBlobItem: name - ${blob.name}, last modified - ${blob.properties.lastModified}`);
        }
      }

      ```


      Example using paging with a max page size:


      ```js

      console.log("Listing blobs by hierarchy by page, specifying a prefix and a
      max page size");


      let i = 1;

      for await (const response of containerClient.listBlobsByHierarchy("/", {
      prefix: "prefix2/sub1/"}).byPage({ maxPageSize: 2 })) {
        console.log(`Page ${i++}`);
        const segment = response.segment;

        if (segment.blobPrefixes) {
          for (const prefix of segment.blobPrefixes) {
            console.log(`\tBlobPrefix: ${prefix.name}`);
          }
        }

        for (const blob of response.segment.blobItems) {
          console.log(`\tBlobItem: name - ${blob.name}, last modified - ${blob.properties.lastModified}`);
        }
      }

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listBlobsByHierarchy(delimiter: string, options?:
        ContainerListBlobsOptions)
      parameters:
        - id: delimiter
          type: string
          description: The character or string used to define the virtual hierarchy
        - id: options
          type: <xref uid="@azure/storage-blob.ContainerListBlobsOptions" />
          description: ''
      return:
        type: >-
          PagedAsyncIterableIterator&lt;Object & <xref
          uid="@azure/storage-blob.BlobPrefix" /> | Object & <xref
          uid="@azure/storage-blob.BlobItem" />, <xref
          uid="@azure/storage-blob.ContainerListBlobHierarchySegmentResponse"
          />&gt;
        description: |-
          {(PagedAsyncIterableIterator<
            { kind: "prefix" } & BlobPrefix | { kind: "blob" } & BlobItem,
              ContainerListBlobHierarchySegmentResponse
            >)}
  - name: listBlobsFlat(ContainerListBlobsOptions)
    uid: '@azure/storage-blob.ContainerClient.listBlobsFlat'
    package: '@azure/storage-blob'
    summary: >
      Returns an async iterable iterator to list all the blobs

      under the specified account.

      .byPage() returns an async iterable iterator to list the blobs in pages.


      Example using `for await` syntax:


      ```js

      // Get the containerClient before you run these snippets,

      // Can be obtained from
      `blobServiceClient.getContainerClient("<your-container-name>");`

      let i = 1;

      for await (const blob of containerClient.listBlobsFlat()) {
        console.log(`Blob ${i++}: ${blob.name}`);
      }

      ```


      Example using `iter.next()`:


      ```js

      let i = 1;

      let iter = containerClient.listBlobsFlat();

      let blobItem = await iter.next();

      while (!blobItem.done) {
        console.log(`Blob ${i++}: ${blobItem.value.name}`);
        blobItem = await iter.next();
      }

      ```


      Example using `byPage()`:


      ```js

      // passing optional maxPageSize in the page settings

      let i = 1;

      for await (const response of containerClient.listBlobsFlat().byPage({
      maxPageSize: 20 })) {
        for (const blob of response.segment.blobItems) {
          console.log(`Blob ${i++}: ${blob.name}`);
        }
      }

      ```


      Example using paging with a marker:


      ```js

      let i = 1;

      let iterator = containerClient.listBlobsFlat().byPage({ maxPageSize: 2 });

      let response = (await iterator.next()).value;


      // Prints 2 blob names

      for (const blob of response.segment.blobItems) {
        console.log(`Blob ${i++}: ${blob.name}`);
      }


      // Gets next marker

      let marker = response.continuationToken;


      // Passing next marker as continuationToken


      iterator = containerClient.listBlobsFlat().byPage({ continuationToken:
      marker, maxPageSize: 10 });

      response = (await iterator.next()).value;


      // Prints 10 blob names

      for (const blob of response.segment.blobItems) {
        console.log(`Blob ${i++}: ${blob.name}`);
      }

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function listBlobsFlat(options?: ContainerListBlobsOptions)'
      parameters:
        - id: options
          type: <xref uid="@azure/storage-blob.ContainerListBlobsOptions" />
          description: ''
      return:
        type: >-
          PagedAsyncIterableIterator&lt;<xref uid="@azure/storage-blob.BlobItem"
          />, <xref
          uid="@azure/storage-blob.ContainerListBlobFlatSegmentResponse" />&gt;
        description: An asyncIterableIterator that supports paging.
  - name: >-
      setAccessPolicy(PublicAccessType, SignedIdentifier[],
      ContainerSetAccessPolicyOptions)
    uid: '@azure/storage-blob.ContainerClient.setAccessPolicy'
    package: '@azure/storage-blob'
    summary: >-
      Sets the permissions for the specified container. The permissions indicate

      whether blobs in a container may be accessed publicly.

      When you set permissions for a container, the existing permissions are
      replaced.

      If no access or containerAcl provided, the existing container ACL will be

      removed.


      When you establish a stored access policy on a container, it may take up
      to 30 seconds to take effect.

      During this interval, a shared access signature that is associated with
      the stored access policy will

      fail with status code 403 (Forbidden), until the access policy becomes
      active.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setAccessPolicy(access?: PublicAccessType, containerAcl?:
        SignedIdentifier[], options?: ContainerSetAccessPolicyOptions)
      parameters:
        - id: access
          type: <xref uid="@azure/storage-blob.PublicAccessType" />
          description: ''
        - id: containerAcl
          type: '<xref uid="@azure/storage-blob.SignedIdentifier" />[]'
          description: ''
        - id: options
          type: <xref uid="@azure/storage-blob.ContainerSetAccessPolicyOptions" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-blob.ContainerSetAccessPolicyResponse" />&gt;
        description: ''
  - name: 'setMetadata(Metadata, ContainerSetMetadataOptions)'
    uid: '@azure/storage-blob.ContainerClient.setMetadata'
    package: '@azure/storage-blob'
    summary: >
      Sets one or more user-defined name-value pairs for the specified
      container.

      If no option provided, or no metadata defined in the parameter, the
      container

      metadata will be removed.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setMetadata(metadata?: Metadata, options?:
        ContainerSetMetadataOptions)
      parameters:
        - id: metadata
          type: <xref uid="@azure/storage-blob.Metadata" />
          description: ''
        - id: options
          type: <xref uid="@azure/storage-blob.ContainerSetMetadataOptions" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-blob.ContainerSetMetadataResponse" />&gt;
        description: ''
  - name: 'uploadBlockBlob(string, HttpRequestBody, number, BlockBlobUploadOptions)'
    uid: '@azure/storage-blob.ContainerClient.uploadBlockBlob'
    package: '@azure/storage-blob'
    summary: >
      Creates a new block blob, or updates the content of an existing block
      blob.

      Updating an existing block blob overwrites any existing metadata on the
      blob.

      Partial updates are not supported; the content of the existing blob is

      overwritten with the new content. To perform a partial update of a block
      blob's,

      use <xref:BlockBlobClient.stageBlock> and
      <xref:BlockBlobClient.commitBlockList>.


      This is a non-parallel uploading method, please use
      <xref:BlockBlobClient.uploadFile>,

      <xref:BlockBlobClient.uploadStream> or
      <xref:BlockBlobClient.uploadBrowserData> for better

      performance with concurrency uploading.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function uploadBlockBlob(blobName: string, body: HttpRequestBody,
        contentLength: number, options?: BlockBlobUploadOptions)
      parameters:
        - id: blobName
          type: string
          description: Name of the block blob to create or update.
        - id: body
          type: HttpRequestBody
          description: |-
            Blob, string, ArrayBuffer, ArrayBufferView or a function
                                          which returns a new Readable stream whose offset is from data source beginning.
        - id: contentLength
          type: number
          description: >-
            Length of body in bytes. Use Buffer.byteLength() to calculate body
            length for a
                                          string including non non-Base64/Hex-encoded characters.
        - id: options
          type: <xref uid="@azure/storage-blob.BlockBlobUploadOptions" />
          description: ''
      return:
        type: Promise&lt;Object&gt;
        description: >-
          >} Block Blob upload response data and the corresponding
          BlockBlobClient instance.
extends: <xref uid="@azure/storage-blob.StorageClient" />
