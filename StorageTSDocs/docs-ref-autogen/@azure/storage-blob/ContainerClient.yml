### YamlMime:UniversalReference
items:
  - uid: '@azure/storage-blob.ContainerClient'
    name: ContainerClient
    fullName: ContainerClient
    children:
      - '@azure/storage-blob.ContainerClient.accountName'
      - '@azure/storage-blob.ContainerClient.constructor_2'
      - '@azure/storage-blob.ContainerClient.constructor_1'
      - '@azure/storage-blob.ContainerClient.constructor'
      - '@azure/storage-blob.ContainerClient.containerName'
      - '@azure/storage-blob.ContainerClient.create'
      - '@azure/storage-blob.ContainerClient.createIfNotExists'
      - '@azure/storage-blob.ContainerClient.credential'
      - '@azure/storage-blob.ContainerClient.delete'
      - '@azure/storage-blob.ContainerClient.deleteBlob'
      - '@azure/storage-blob.ContainerClient.deleteIfExists'
      - '@azure/storage-blob.ContainerClient.exists'
      - '@azure/storage-blob.ContainerClient.getAccessPolicy'
      - '@azure/storage-blob.ContainerClient.getAppendBlobClient'
      - '@azure/storage-blob.ContainerClient.getBlobClient'
      - '@azure/storage-blob.ContainerClient.getBlobLeaseClient'
      - '@azure/storage-blob.ContainerClient.getBlockBlobClient'
      - '@azure/storage-blob.ContainerClient.getPageBlobClient'
      - '@azure/storage-blob.ContainerClient.getProperties'
      - '@azure/storage-blob.ContainerClient.listBlobsByHierarchy'
      - '@azure/storage-blob.ContainerClient.listBlobsFlat'
      - '@azure/storage-blob.ContainerClient.setAccessPolicy'
      - '@azure/storage-blob.ContainerClient.setMetadata'
      - '@azure/storage-blob.ContainerClient.uploadBlockBlob'
      - '@azure/storage-blob.ContainerClient.url'
    langs:
      - typeScript
    type: class
    summary: >-
      A ContainerClient represents a URL to the Azure Storage container allowing
      you to manipulate its blobs.
    extends:
      name: '@azure/storage-blob.StorageClient'
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.ContainerClient.accountName'
    name: accountName
    fullName: accountName
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'accountName: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.ContainerClient.constructor_2'
    name: 'ContainerClient(string, Pipeline)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: >-
      Creates an instance of ContainerClient.

      This method accepts an encoded URL or non-encoded URL pointing to a page
      blob.

      Encoded URL string will NOT be escaped twice, only special characters in
      URL path will be escaped.

      If a blob name includes ? or %, blob name must be encoded in the URL.
    syntax:
      content: 'new ContainerClient(url: string, pipeline: Pipeline)'
      parameters:
        - id: url
          type:
            - string
          description: |-
            A URL string pointing to Azure Storage page blob, such as
                                "https://myaccount.blob.core.windows.net/mycontainer/pageblob". You can
                                append a SAS if using AnonymousCredential, such as
                                "https://myaccount.blob.core.windows.net/mycontainer/pageblob?sasString".
                                This method accepts an encoded URL or non-encoded URL pointing to a blob.
                                Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.
                                However, if a blob name includes ? or %, blob name must be encoded in the URL.
                                Such as a blob named "my?blob%", the URL should be "https://myaccount.blob.core.windows.net/mycontainer/my%3Fblob%25".
        - id: pipeline
          type:
            - '@azure/storage-blob.Pipeline'
          description: |-
            Call newPipeline() to create a default
                                       pipeline, or provide a customized pipeline.
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.ContainerClient.constructor_1'
    name: >-
      ContainerClient(string, StorageSharedKeyCredential | AnonymousCredential |
      TokenCredential, StoragePipelineOptions)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: >-
      Creates an instance of ContainerClient.

      This method accepts an encoded URL or non-encoded URL pointing to a page
      blob.

      Encoded URL string will NOT be escaped twice, only special characters in
      URL path will be escaped.

      If a blob name includes ? or %, blob name must be encoded in the URL.
    syntax:
      content: >-
        new ContainerClient(url: string, credential?: StorageSharedKeyCredential
        | AnonymousCredential | TokenCredential, options?:
        StoragePipelineOptions)
      parameters:
        - id: url
          type:
            - string
          description: |-
            A URL string pointing to Azure Storage page blob, such as
                                "https://myaccount.blob.core.windows.net/mycontainer/pageblob". You can
                                append a SAS if using AnonymousCredential, such as
                                "https://myaccount.blob.core.windows.net/mycontainer/pageblob?sasString".
                                This method accepts an encoded URL or non-encoded URL pointing to a blob.
                                Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.
                                However, if a blob name includes ? or %, blob name must be encoded in the URL.
                                Such as a blob named "my?blob%", the URL should be "https://myaccount.blob.core.windows.net/mycontainer/my%3Fblob%25".
        - id: credential
          type:
            - >-
              @azure/storage-blob.StorageSharedKeyCredential |
              @azure/storage-blob.AnonymousCredential | TokenCredential
          description: >-
            Such as AnonymousCredential, StorageSharedKeyCredential or any
            credential from the @azure/identity package to authenticate requests
            to the service. You can also provide an object that implements the
            TokenCredential interface. If not specified, AnonymousCredential is
            used.
          optional: true
        - id: options
          type:
            - '@azure/storage-blob.StoragePipelineOptions'
          description: ''
          optional: true
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.ContainerClient.constructor'
    name: 'ContainerClient(string, string, StoragePipelineOptions)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Creates an instance of ContainerClient.
    syntax:
      content: >-
        new ContainerClient(connectionString: string, containerName: string,
        options?: StoragePipelineOptions)
      parameters:
        - id: connectionString
          type:
            - string
          description: >-
            Account connection string or a SAS connection string of an Azure
            storage account.
                                             [ Note - Account connection string can only be used in NODE.JS runtime. ]
                                             Account connection string example -
                                             `DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=accountKey;EndpointSuffix=core.windows.net`
                                             SAS connection string example -
                                             `BlobEndpoint=https://myaccount.blob.core.windows.net/;QueueEndpoint=https://myaccount.queue.core.windows.net/;FileEndpoint=https://myaccount.file.core.windows.net/;TableEndpoint=https://myaccount.table.core.windows.net/;SharedAccessSignature=sasString`
        - id: containerName
          type:
            - string
          description: Container name.
        - id: options
          type:
            - '@azure/storage-blob.StoragePipelineOptions'
          description: ''
          optional: true
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.ContainerClient.containerName'
    name: containerName
    fullName: containerName
    children: []
    langs:
      - typeScript
    type: property
    summary: The name of the container.
    syntax:
      content: string containerName
      return:
        type:
          - string
        description: ''
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.ContainerClient.create'
    name: create(ContainerCreateOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Creates a new container under the specified account. If the container with
      the same name already exists, the operation fails.
    syntax:
      content: 'function create(options?: ContainerCreateOptions)'
      parameters:
        - id: options
          type:
            - '@azure/storage-blob.ContainerCreateOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-blob.ContainerCreateResponse>
        description: ''
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.ContainerClient.createIfNotExists'
    name: createIfNotExists(ContainerCreateOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Creates a new container under the specified account. If the container with
      the same name already exists, it is not changed.
    syntax:
      content: 'function createIfNotExists(options?: ContainerCreateOptions)'
      parameters:
        - id: options
          type:
            - '@azure/storage-blob.ContainerCreateOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-blob.ContainerCreateIfNotExistsResponse>
        description: ''
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.ContainerClient.credential'
    name: credential
    fullName: credential
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Such as AnonymousCredential, StorageSharedKeyCredential or any credential
      from the @azure/identity package to authenticate requests to the service.
      You can also provide an object that implements the TokenCredential
      interface. If not specified, AnonymousCredential is used.
    syntax:
      content: >-
        credential: StorageSharedKeyCredential | AnonymousCredential |
        TokenCredential
      return:
        type:
          - >-
            @azure/storage-blob.StorageSharedKeyCredential |
            @azure/storage-blob.AnonymousCredential | TokenCredential
        description: ''
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.ContainerClient.delete'
    name: delete(ContainerDeleteMethodOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Marks the specified container for deletion. The container and any blobs
      contained within it are later deleted during garbage collection.
    syntax:
      content: 'function delete(options?: ContainerDeleteMethodOptions)'
      parameters:
        - id: options
          type:
            - '@azure/storage-blob.ContainerDeleteMethodOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-blob.ContainerDeleteResponse>
        description: ''
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.ContainerClient.deleteBlob'
    name: 'deleteBlob(string, ContainerDeleteBlobOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Marks the specified blob or snapshot for deletion. The blob is later
      deleted

      during garbage collection. Note that in order to delete a blob, you must
      delete

      all of its snapshots. You can delete both at the same time with the Delete

      Blob operation.
    syntax:
      content: >-
        function deleteBlob(blobName: string, options?:
        ContainerDeleteBlobOptions)
      parameters:
        - id: blobName
          type:
            - string
          description: ''
        - id: options
          type:
            - '@azure/storage-blob.ContainerDeleteBlobOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-blob.BlobDeleteResponse>
        description: Block blob deletion response data.
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.ContainerClient.deleteIfExists'
    name: deleteIfExists(ContainerDeleteMethodOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Marks the specified container for deletion if it exists. The container and
      any blobs

      contained within it are later deleted during garbage collection.
    syntax:
      content: 'function deleteIfExists(options?: ContainerDeleteMethodOptions)'
      parameters:
        - id: options
          type:
            - '@azure/storage-blob.ContainerDeleteMethodOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-blob.ContainerDeleteIfExistsResponse>
        description: ''
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.ContainerClient.exists'
    name: exists(ContainerExistsOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Returns true if the Azure container resource represented by this client
      exists; false otherwise.

      NOTE: use this function with care since an existing container might be
      deleted by other clients or

      applications. Vice versa new containers with the same name might be added
      by other clients or

      applications after this function completes.
    syntax:
      content: 'function exists(options?: ContainerExistsOptions)'
      parameters:
        - id: options
          type:
            - '@azure/storage-blob.ContainerExistsOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<boolean>
        description: ''
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.ContainerClient.getAccessPolicy'
    name: getAccessPolicy(ContainerGetAccessPolicyOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Gets the permissions for the specified container. The permissions indicate

      whether container data may be accessed publicly.

      WARNING: JavaScript Date will potentially lose precision when parsing
      startsOn and expiresOn strings.

      For example, new Date("2018-12-31T03:44:23.8827891Z").toISOString() will
      get "2018-12-31T03:44:23.882Z".
    syntax:
      content: 'function getAccessPolicy(options?: ContainerGetAccessPolicyOptions)'
      parameters:
        - id: options
          type:
            - '@azure/storage-blob.ContainerGetAccessPolicyOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-blob.ContainerGetAccessPolicyResponse>
        description: ''
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.ContainerClient.getAppendBlobClient'
    name: getAppendBlobClient(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Creates an <xref:AppendBlobClient>'
    syntax:
      content: 'function getAppendBlobClient(blobName: string)'
      parameters:
        - id: blobName
          type:
            - string
          description: An append blob name
      return:
        type:
          - '@azure/storage-blob.AppendBlobClient'
        description: ''
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.ContainerClient.getBlobClient'
    name: getBlobClient(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Creates a <xref:BlobClient>'
    syntax:
      content: 'function getBlobClient(blobName: string)'
      parameters:
        - id: blobName
          type:
            - string
          description: A blob name
      return:
        type:
          - '@azure/storage-blob.BlobClient'
        description: A new BlobClient object for the given blob name.
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.ContainerClient.getBlobLeaseClient'
    name: getBlobLeaseClient(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Get a <xref:BlobLeaseClient> that manages leases on the container.'
    syntax:
      content: 'function getBlobLeaseClient(proposeLeaseId?: string)'
      parameters:
        - id: proposeLeaseId
          type:
            - string
          description: ''
          optional: true
      return:
        type:
          - '@azure/storage-blob.BlobLeaseClient'
        description: A new BlobLeaseClient object for managing leases on the container.
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.ContainerClient.getBlockBlobClient'
    name: getBlockBlobClient(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Creates a <xref:BlockBlobClient>'
    syntax:
      content: 'function getBlockBlobClient(blobName: string)'
      parameters:
        - id: blobName
          type:
            - string
          description: A block blob name
      return:
        type:
          - '@azure/storage-blob.BlockBlobClient'
        description: ''
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.ContainerClient.getPageBlobClient'
    name: getPageBlobClient(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Creates a <xref:PageBlobClient>'
    syntax:
      content: 'function getPageBlobClient(blobName: string)'
      parameters:
        - id: blobName
          type:
            - string
          description: A page blob name
      return:
        type:
          - '@azure/storage-blob.PageBlobClient'
        description: ''
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.ContainerClient.getProperties'
    name: getProperties(ContainerGetPropertiesOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns all user-defined metadata and system properties for the specified

      container. The data returned does not include the container's list of
      blobs.
    syntax:
      content: 'function getProperties(options?: ContainerGetPropertiesOptions)'
      parameters:
        - id: options
          type:
            - '@azure/storage-blob.ContainerGetPropertiesOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-blob.ContainerGetPropertiesResponse>
        description: ''
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.ContainerClient.listBlobsByHierarchy'
    name: 'listBlobsByHierarchy(string, ContainerListBlobsOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Returns an async iterable iterator to list all the blobs by hierarchy.

      under the specified account.

      .byPage() returns an async iterable iterator to list the blobs by
      hierarchy in pages.


      Example using `for await` syntax:


      ```js

      for await (const item of containerClient.listBlobsByHierarchy("/")) {
        if (item.kind === "prefix") {
          console.log(`\tBlobPrefix: ${item.name}`);
        } else {
          console.log(`\tBlobItem: name - ${item.name}, last modified - ${item.properties.lastModified}`);
        }
      }

      ```


      Example using `iter.next()`:


      ```js

      let iter = containerClient.listBlobsByHierarchy("/", { prefix: "prefix1/"
      });

      let entity = await iter.next();

      while (!entity.done) {
        let item = entity.value;
        if (item.kind === "prefix") {
          console.log(`\tBlobPrefix: ${item.name}`);
        } else {
          console.log(`\tBlobItem: name - ${item.name}, last modified - ${item.properties.lastModified}`);
        }
        entity = await iter.next();
      }

      ```js


      Example using `byPage()`:


      ```js

      console.log("Listing blobs by hierarchy by page");

      for await (const response of
      containerClient.listBlobsByHierarchy("/").byPage()) {
        const segment = response.segment;
        if (segment.blobPrefixes) {
          for (const prefix of segment.blobPrefixes) {
            console.log(`\tBlobPrefix: ${prefix.name}`);
          }
        }
        for (const blob of response.segment.blobItems) {
          console.log(`\tBlobItem: name - ${blob.name}, last modified - ${blob.properties.lastModified}`);
        }
      }

      ```


      Example using paging with a max page size:


      ```js

      console.log("Listing blobs by hierarchy by page, specifying a prefix and a
      max page size");


      let i = 1;

      for await (const response of containerClient.listBlobsByHierarchy("/", {
      prefix: "prefix2/sub1/"}).byPage({ maxPageSize: 2 })) {
        console.log(`Page ${i++}`);
        const segment = response.segment;

        if (segment.blobPrefixes) {
          for (const prefix of segment.blobPrefixes) {
            console.log(`\tBlobPrefix: ${prefix.name}`);
          }
        }

        for (const blob of response.segment.blobItems) {
          console.log(`\tBlobItem: name - ${blob.name}, last modified - ${blob.properties.lastModified}`);
        }
      }

      ```
    syntax:
      content: >-
        function listBlobsByHierarchy(delimiter: string, options?:
        ContainerListBlobsOptions)
      parameters:
        - id: delimiter
          type:
            - string
          description: The character or string used to define the virtual hierarchy
        - id: options
          type:
            - '@azure/storage-blob.ContainerListBlobsOptions'
          description: ''
          optional: true
      return:
        type:
          - >-
            PagedAsyncIterableIterator<Object & @azure/storage-blob.BlobPrefix |
            Object & @azure/storage-blob.BlobItem,
            @azure/storage-blob.ContainerListBlobHierarchySegmentResponse>
        description: |-
          {(PagedAsyncIterableIterator<
            { kind: "prefix" } & BlobPrefix | { kind: "blob" } & BlobItem,
              ContainerListBlobHierarchySegmentResponse
            >)}
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.ContainerClient.listBlobsFlat'
    name: listBlobsFlat(ContainerListBlobsOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Returns an async iterable iterator to list all the blobs

      under the specified account.

      .byPage() returns an async iterable iterator to list the blobs in pages.


      Example using `for await` syntax:


      ```js

      // Get the containerClient before you run these snippets,

      // Can be obtained from
      `blobServiceClient.getContainerClient("<your-container-name>");`

      let i = 1;

      for await (const blob of containerClient.listBlobsFlat()) {
        console.log(`Blob ${i++}: ${blob.name}`);
      }

      ```


      Example using `iter.next()`:


      ```js

      let i = 1;

      let iter = containerClient.listBlobsFlat();

      let blobItem = await iter.next();

      while (!blobItem.done) {
        console.log(`Blob ${i++}: ${blobItem.value.name}`);
        blobItem = await iter.next();
      }

      ```


      Example using `byPage()`:


      ```js

      // passing optional maxPageSize in the page settings

      let i = 1;

      for await (const response of containerClient.listBlobsFlat().byPage({
      maxPageSize: 20 })) {
        for (const blob of response.segment.blobItems) {
          console.log(`Blob ${i++}: ${blob.name}`);
        }
      }

      ```


      Example using paging with a marker:


      ```js

      let i = 1;

      let iterator = containerClient.listBlobsFlat().byPage({ maxPageSize: 2 });

      let response = (await iterator.next()).value;


      // Prints 2 blob names

      for (const blob of response.segment.blobItems) {
        console.log(`Blob ${i++}: ${blob.name}`);
      }


      // Gets next marker

      let marker = response.continuationToken;


      // Passing next marker as continuationToken


      iterator = containerClient.listBlobsFlat().byPage({ continuationToken:
      marker, maxPageSize: 10 });

      response = (await iterator.next()).value;


      // Prints 10 blob names

      for (const blob of response.segment.blobItems) {
        console.log(`Blob ${i++}: ${blob.name}`);
      }

      ```
    syntax:
      content: 'function listBlobsFlat(options?: ContainerListBlobsOptions)'
      parameters:
        - id: options
          type:
            - '@azure/storage-blob.ContainerListBlobsOptions'
          description: ''
          optional: true
      return:
        type:
          - >-
            PagedAsyncIterableIterator<@azure/storage-blob.BlobItem,
            @azure/storage-blob.ContainerListBlobFlatSegmentResponse>
        description: An asyncIterableIterator that supports paging.
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.ContainerClient.setAccessPolicy'
    name: >-
      setAccessPolicy(PublicAccessType, SignedIdentifier[],
      ContainerSetAccessPolicyOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Sets the permissions for the specified container. The permissions indicate

      whether blobs in a container may be accessed publicly.

      When you set permissions for a container, the existing permissions are
      replaced.

      If no access or containerAcl provided, the existing container ACL will be

      removed.


      When you establish a stored access policy on a container, it may take up
      to 30 seconds to take effect.

      During this interval, a shared access signature that is associated with
      the stored access policy will

      fail with status code 403 (Forbidden), until the access policy becomes
      active.
    syntax:
      content: >-
        function setAccessPolicy(access?: PublicAccessType, containerAcl?:
        SignedIdentifier[], options?: ContainerSetAccessPolicyOptions)
      parameters:
        - id: access
          type:
            - '@azure/storage-blob.PublicAccessType'
          description: ''
          optional: true
        - id: containerAcl
          type:
            - '@azure/storage-blob.SignedIdentifier[]'
          description: ''
          optional: true
        - id: options
          type:
            - '@azure/storage-blob.ContainerSetAccessPolicyOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-blob.ContainerSetAccessPolicyResponse>
        description: ''
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.ContainerClient.setMetadata'
    name: 'setMetadata(Metadata, ContainerSetMetadataOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Sets one or more user-defined name-value pairs for the specified
      container.

      If no option provided, or no metadata defined in the parameter, the
      container

      metadata will be removed.
    syntax:
      content: >-
        function setMetadata(metadata?: Metadata, options?:
        ContainerSetMetadataOptions)
      parameters:
        - id: metadata
          type:
            - '@azure/storage-blob.Metadata'
          description: ''
          optional: true
        - id: options
          type:
            - '@azure/storage-blob.ContainerSetMetadataOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-blob.ContainerSetMetadataResponse>
        description: ''
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.ContainerClient.uploadBlockBlob'
    name: 'uploadBlockBlob(string, HttpRequestBody, number, BlockBlobUploadOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Creates a new block blob, or updates the content of an existing block
      blob.

      Updating an existing block blob overwrites any existing metadata on the
      blob.

      Partial updates are not supported; the content of the existing blob is

      overwritten with the new content. To perform a partial update of a block
      blob's,

      use <xref:BlockBlobClient.stageBlock> and
      <xref:BlockBlobClient.commitBlockList>.


      This is a non-parallel uploading method, please use
      <xref:BlockBlobClient.uploadFile>,

      <xref:BlockBlobClient.uploadStream> or
      <xref:BlockBlobClient.uploadBrowserData> for better

      performance with concurrency uploading.
    syntax:
      content: >-
        function uploadBlockBlob(blobName: string, body: HttpRequestBody,
        contentLength: number, options?: BlockBlobUploadOptions)
      parameters:
        - id: blobName
          type:
            - string
          description: Name of the block blob to create or update.
        - id: body
          type:
            - HttpRequestBody
          description: |-
            Blob, string, ArrayBuffer, ArrayBufferView or a function
                                          which returns a new Readable stream whose offset is from data source beginning.
        - id: contentLength
          type:
            - number
          description: >-
            Length of body in bytes. Use Buffer.byteLength() to calculate body
            length for a
                                          string including non non-Base64/Hex-encoded characters.
        - id: options
          type:
            - '@azure/storage-blob.BlockBlobUploadOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<Object>
        description: >-
          >} Block Blob upload response data and the corresponding
          BlockBlobClient instance.
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.ContainerClient.url'
    name: url
    fullName: url
    children: []
    langs:
      - typeScript
    type: property
    summary: Encoded URL string value.
    syntax:
      content: 'url: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/storage-blob'
references:
  - uid: '@azure/storage-blob.StorageClient'
    name: StorageClient
    spec.typeScript:
      - name: StorageClient
        fullName: StorageClient
        uid: '@azure/storage-blob.StorageClient'
  - uid: '@azure/storage-blob.StoragePipelineOptions'
    name: StoragePipelineOptions
    spec.typeScript:
      - name: StoragePipelineOptions
        fullName: StoragePipelineOptions
        uid: '@azure/storage-blob.StoragePipelineOptions'
  - uid: >-
      @azure/storage-blob.StorageSharedKeyCredential |
      @azure/storage-blob.AnonymousCredential | TokenCredential
    name: AnonymousCredential | TokenCredential
    spec.typeScript:
      - name: StorageSharedKeyCredential
        fullName: StorageSharedKeyCredential
        uid: '@azure/storage-blob.StorageSharedKeyCredential'
      - name: ' | '
        fullName: ' | '
      - name: AnonymousCredential
        fullName: AnonymousCredential
        uid: '@azure/storage-blob.AnonymousCredential'
      - name: ' | TokenCredential'
        fullName: ' | TokenCredential'
  - uid: '@azure/storage-blob.Pipeline'
    name: Pipeline
    spec.typeScript:
      - name: Pipeline
        fullName: Pipeline
        uid: '@azure/storage-blob.Pipeline'
  - uid: '@azure/storage-blob.ContainerCreateOptions'
    name: ContainerCreateOptions
    spec.typeScript:
      - name: ContainerCreateOptions
        fullName: ContainerCreateOptions
        uid: '@azure/storage-blob.ContainerCreateOptions'
  - uid: Promise<@azure/storage-blob.ContainerCreateResponse>
    name: ContainerCreateResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ContainerCreateResponse
        fullName: ContainerCreateResponse
        uid: '@azure/storage-blob.ContainerCreateResponse'
      - name: '>'
        fullName: '>'
  - uid: Promise<@azure/storage-blob.ContainerCreateIfNotExistsResponse>
    name: ContainerCreateIfNotExistsResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ContainerCreateIfNotExistsResponse
        fullName: ContainerCreateIfNotExistsResponse
        uid: '@azure/storage-blob.ContainerCreateIfNotExistsResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-blob.ContainerDeleteMethodOptions'
    name: ContainerDeleteMethodOptions
    spec.typeScript:
      - name: ContainerDeleteMethodOptions
        fullName: ContainerDeleteMethodOptions
        uid: '@azure/storage-blob.ContainerDeleteMethodOptions'
  - uid: Promise<@azure/storage-blob.ContainerDeleteResponse>
    name: ContainerDeleteResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ContainerDeleteResponse
        fullName: ContainerDeleteResponse
        uid: '@azure/storage-blob.ContainerDeleteResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-blob.ContainerDeleteBlobOptions'
    name: ContainerDeleteBlobOptions
    spec.typeScript:
      - name: ContainerDeleteBlobOptions
        fullName: ContainerDeleteBlobOptions
        uid: '@azure/storage-blob.ContainerDeleteBlobOptions'
  - uid: Promise<@azure/storage-blob.BlobDeleteResponse>
    name: BlobDeleteResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: BlobDeleteResponse
        fullName: BlobDeleteResponse
        uid: '@azure/storage-blob.BlobDeleteResponse'
      - name: '>'
        fullName: '>'
  - uid: Promise<@azure/storage-blob.ContainerDeleteIfExistsResponse>
    name: ContainerDeleteIfExistsResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ContainerDeleteIfExistsResponse
        fullName: ContainerDeleteIfExistsResponse
        uid: '@azure/storage-blob.ContainerDeleteIfExistsResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-blob.ContainerExistsOptions'
    name: ContainerExistsOptions
    spec.typeScript:
      - name: ContainerExistsOptions
        fullName: ContainerExistsOptions
        uid: '@azure/storage-blob.ContainerExistsOptions'
  - uid: '@azure/storage-blob.ContainerGetAccessPolicyOptions'
    name: ContainerGetAccessPolicyOptions
    spec.typeScript:
      - name: ContainerGetAccessPolicyOptions
        fullName: ContainerGetAccessPolicyOptions
        uid: '@azure/storage-blob.ContainerGetAccessPolicyOptions'
  - uid: Promise<@azure/storage-blob.ContainerGetAccessPolicyResponse>
    name: ContainerGetAccessPolicyResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ContainerGetAccessPolicyResponse
        fullName: ContainerGetAccessPolicyResponse
        uid: '@azure/storage-blob.ContainerGetAccessPolicyResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-blob.AppendBlobClient'
    name: AppendBlobClient
    spec.typeScript:
      - name: AppendBlobClient
        fullName: AppendBlobClient
        uid: '@azure/storage-blob.AppendBlobClient'
  - uid: '@azure/storage-blob.BlobClient'
    name: BlobClient
    spec.typeScript:
      - name: BlobClient
        fullName: BlobClient
        uid: '@azure/storage-blob.BlobClient'
  - uid: '@azure/storage-blob.BlobLeaseClient'
    name: BlobLeaseClient
    spec.typeScript:
      - name: BlobLeaseClient
        fullName: BlobLeaseClient
        uid: '@azure/storage-blob.BlobLeaseClient'
  - uid: '@azure/storage-blob.BlockBlobClient'
    name: BlockBlobClient
    spec.typeScript:
      - name: BlockBlobClient
        fullName: BlockBlobClient
        uid: '@azure/storage-blob.BlockBlobClient'
  - uid: '@azure/storage-blob.PageBlobClient'
    name: PageBlobClient
    spec.typeScript:
      - name: PageBlobClient
        fullName: PageBlobClient
        uid: '@azure/storage-blob.PageBlobClient'
  - uid: '@azure/storage-blob.ContainerGetPropertiesOptions'
    name: ContainerGetPropertiesOptions
    spec.typeScript:
      - name: ContainerGetPropertiesOptions
        fullName: ContainerGetPropertiesOptions
        uid: '@azure/storage-blob.ContainerGetPropertiesOptions'
  - uid: Promise<@azure/storage-blob.ContainerGetPropertiesResponse>
    name: ContainerGetPropertiesResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ContainerGetPropertiesResponse
        fullName: ContainerGetPropertiesResponse
        uid: '@azure/storage-blob.ContainerGetPropertiesResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-blob.ContainerListBlobsOptions'
    name: ContainerListBlobsOptions
    spec.typeScript:
      - name: ContainerListBlobsOptions
        fullName: ContainerListBlobsOptions
        uid: '@azure/storage-blob.ContainerListBlobsOptions'
  - uid: >-
      PagedAsyncIterableIterator<Object & @azure/storage-blob.BlobPrefix |
      Object & @azure/storage-blob.BlobItem,
      @azure/storage-blob.ContainerListBlobHierarchySegmentResponse>
    name: ContainerListBlobHierarchySegmentResponse>
    spec.typeScript:
      - name: 'PagedAsyncIterableIterator<Object & '
        fullName: 'PagedAsyncIterableIterator<Object & '
      - name: BlobPrefix
        fullName: BlobPrefix
        uid: '@azure/storage-blob.BlobPrefix'
      - name: ' | Object & '
        fullName: ' | Object & '
      - name: BlobItem
        fullName: BlobItem
        uid: '@azure/storage-blob.BlobItem'
      - name: ', '
        fullName: ', '
      - name: ContainerListBlobHierarchySegmentResponse
        fullName: ContainerListBlobHierarchySegmentResponse
        uid: '@azure/storage-blob.ContainerListBlobHierarchySegmentResponse'
      - name: '>'
        fullName: '>'
  - uid: >-
      PagedAsyncIterableIterator<@azure/storage-blob.BlobItem,
      @azure/storage-blob.ContainerListBlobFlatSegmentResponse>
    name: ContainerListBlobFlatSegmentResponse>
    spec.typeScript:
      - name: PagedAsyncIterableIterator<
        fullName: PagedAsyncIterableIterator<
      - name: BlobItem
        fullName: BlobItem
        uid: '@azure/storage-blob.BlobItem'
      - name: ', '
        fullName: ', '
      - name: ContainerListBlobFlatSegmentResponse
        fullName: ContainerListBlobFlatSegmentResponse
        uid: '@azure/storage-blob.ContainerListBlobFlatSegmentResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-blob.PublicAccessType'
    name: PublicAccessType
    spec.typeScript:
      - name: PublicAccessType
        fullName: PublicAccessType
        uid: '@azure/storage-blob.PublicAccessType'
  - uid: '@azure/storage-blob.SignedIdentifier[]'
    name: 'SignedIdentifier[]'
    spec.typeScript:
      - name: SignedIdentifier
        fullName: SignedIdentifier
        uid: '@azure/storage-blob.SignedIdentifier'
      - name: '[]'
        fullName: '[]'
  - uid: '@azure/storage-blob.ContainerSetAccessPolicyOptions'
    name: ContainerSetAccessPolicyOptions
    spec.typeScript:
      - name: ContainerSetAccessPolicyOptions
        fullName: ContainerSetAccessPolicyOptions
        uid: '@azure/storage-blob.ContainerSetAccessPolicyOptions'
  - uid: Promise<@azure/storage-blob.ContainerSetAccessPolicyResponse>
    name: ContainerSetAccessPolicyResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ContainerSetAccessPolicyResponse
        fullName: ContainerSetAccessPolicyResponse
        uid: '@azure/storage-blob.ContainerSetAccessPolicyResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-blob.Metadata'
    name: Metadata
    spec.typeScript:
      - name: Metadata
        fullName: Metadata
        uid: '@azure/storage-blob.Metadata'
  - uid: '@azure/storage-blob.ContainerSetMetadataOptions'
    name: ContainerSetMetadataOptions
    spec.typeScript:
      - name: ContainerSetMetadataOptions
        fullName: ContainerSetMetadataOptions
        uid: '@azure/storage-blob.ContainerSetMetadataOptions'
  - uid: Promise<@azure/storage-blob.ContainerSetMetadataResponse>
    name: ContainerSetMetadataResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ContainerSetMetadataResponse
        fullName: ContainerSetMetadataResponse
        uid: '@azure/storage-blob.ContainerSetMetadataResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-blob.BlockBlobUploadOptions'
    name: BlockBlobUploadOptions
    spec.typeScript:
      - name: BlockBlobUploadOptions
        fullName: BlockBlobUploadOptions
        uid: '@azure/storage-blob.BlockBlobUploadOptions'
