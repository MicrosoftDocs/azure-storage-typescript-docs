### YamlMime:UniversalReference
items:
  - uid: '@azure/storage-blob.BlobBatchClient'
    name: BlobBatchClient
    fullName: BlobBatchClient
    children:
      - '@azure/storage-blob.BlobBatchClient.constructor_1'
      - '@azure/storage-blob.BlobBatchClient.constructor'
      - '@azure/storage-blob.BlobBatchClient.createBatch'
      - '@azure/storage-blob.BlobBatchClient.deleteBlobs_1'
      - '@azure/storage-blob.BlobBatchClient.deleteBlobs'
      - '@azure/storage-blob.BlobBatchClient.setBlobsAccessTier_1'
      - '@azure/storage-blob.BlobBatchClient.setBlobsAccessTier'
      - '@azure/storage-blob.BlobBatchClient.submitBatch'
    langs:
      - typeScript
    type: class
    summary: >-
      A BlobBatchClient allows you to make batched requests to the Azure Storage
      Blob service.
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlobBatchClient.constructor_1'
    name: 'BlobBatchClient(string, Pipeline)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Creates an instance of BlobBatchClient.
    syntax:
      content: 'new BlobBatchClient(url: string, pipeline: Pipeline)'
      parameters:
        - id: url
          type:
            - string
          description: |-
            A url pointing to Azure Storage blob service, such as
                                "https://myaccount.blob.core.windows.net". You can append a SAS
                                if using AnonymousCredential, such as "https://myaccount.blob.core.windows.net?sasString".
        - id: pipeline
          type:
            - '@azure/storage-blob.Pipeline'
          description: |-
            Call newPipeline() to create a default
                                       pipeline, or provide a customized pipeline.
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlobBatchClient.constructor'
    name: >-
      BlobBatchClient(string, StorageSharedKeyCredential | AnonymousCredential |
      TokenCredential, StoragePipelineOptions)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Creates an instance of BlobBatchClient.
    syntax:
      content: >-
        new BlobBatchClient(url: string, credential?: StorageSharedKeyCredential
        | AnonymousCredential | TokenCredential, options?:
        StoragePipelineOptions)
      parameters:
        - id: url
          type:
            - string
          description: |-
            A url pointing to Azure Storage blob service, such as
                                "https://myaccount.blob.core.windows.net". You can append a SAS
                                if using AnonymousCredential, such as "https://myaccount.blob.core.windows.net?sasString".
        - id: credential
          type:
            - >-
              @azure/storage-blob.StorageSharedKeyCredential |
              @azure/storage-blob.AnonymousCredential | TokenCredential
          description: >-
            Such as AnonymousCredential, StorageSharedKeyCredential or any
            credential from the @azure/identity package to authenticate requests
            to the service. You can also provide an object that implements the
            TokenCredential interface. If not specified, AnonymousCredential is
            used.
          optional: true
        - id: options
          type:
            - '@azure/storage-blob.StoragePipelineOptions'
          description: ''
          optional: true
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlobBatchClient.createBatch'
    name: createBatch()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Creates a <xref:BlobBatch>.
      A BlobBatch represents an aggregated set of operations on blobs.
    syntax:
      content: function createBatch()
      parameters: []
      return:
        type:
          - '@azure/storage-blob.BlobBatch'
        description: ''
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlobBatchClient.deleteBlobs_1'
    name: 'deleteBlobs(BlobClient[], BlobDeleteOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Create multiple delete operations to mark the specified blobs or snapshots
      for deletion.

      Note that in order to delete a blob, you must delete all of its snapshots.

      You can delete both at the same time. See [delete operation
      details](https://docs.microsoft.com/en-us/rest/api/storageservices/delete-blob).

      The operation(subrequest) will be authenticated and authorized with
      specified credential.

      See [blob batch authorization
      details](https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch#authorization).
    syntax:
      content: >-
        function deleteBlobs(blobClients: BlobClient[], options?:
        BlobDeleteOptions)
      parameters:
        - id: blobClients
          type:
            - '@azure/storage-blob.BlobClient[]'
          description: The BlobClients for the blobs to delete.
        - id: options
          type:
            - '@azure/storage-blob.BlobDeleteOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-blob.BlobBatchDeleteBlobsResponse>
        description: ''
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlobBatchClient.deleteBlobs'
    name: >-
      deleteBlobs(string[], StorageSharedKeyCredential | AnonymousCredential |
      TokenCredential, BlobDeleteOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Create multiple delete operations to mark the specified blobs or snapshots
      for deletion.

      Note that in order to delete a blob, you must delete all of its snapshots.

      You can delete both at the same time. See [delete operation
      details](https://docs.microsoft.com/en-us/rest/api/storageservices/delete-blob).

      The operations will be authenticated and authorized with specified
      credential.

      See [blob batch authorization
      details](https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch#authorization).
    syntax:
      content: >-
        function deleteBlobs(urls: string[], credential:
        StorageSharedKeyCredential | AnonymousCredential | TokenCredential,
        options?: BlobDeleteOptions)
      parameters:
        - id: urls
          type:
            - 'string[]'
          description: The urls of the blob resources to delete.
        - id: credential
          type:
            - >-
              @azure/storage-blob.StorageSharedKeyCredential |
              @azure/storage-blob.AnonymousCredential | TokenCredential
          description: >-
            Such as AnonymousCredential, StorageSharedKeyCredential or any
            credential from the @azure/identity package to authenticate requests
            to the service. You can also provide an object that implements the
            TokenCredential interface. If not specified, AnonymousCredential is
            used.
        - id: options
          type:
            - '@azure/storage-blob.BlobDeleteOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-blob.BlobBatchDeleteBlobsResponse>
        description: ''
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlobBatchClient.setBlobsAccessTier_1'
    name: 'setBlobsAccessTier(BlobClient[], AccessTier, BlobSetTierOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Create multiple set tier operations to set the tier on a blob.

      The operation is allowed on a page blob in a premium

      storage account and on a block blob in a blob storage account (locally
      redundant

      storage only). A premium page blob's tier determines the allowed size,
      IOPS,

      and bandwidth of the blob. A block blob's tier determines Hot/Cool/Archive

      storage type. This operation does not update the blob's ETag.

      See [set blob tier
      details](https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-tier).

      The operation(subrequest) will be authenticated and authorized

      with specified credential.See [blob batch authorization
      details](https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch#authorization).
    syntax:
      content: >-
        function setBlobsAccessTier(blobClients: BlobClient[], tier: AccessTier,
        options?: BlobSetTierOptions)
      parameters:
        - id: blobClients
          type:
            - '@azure/storage-blob.BlobClient[]'
          description: The BlobClients for the blobs which should have a new tier set.
        - id: tier
          type:
            - '@azure/storage-blob.AccessTier'
          description: ''
        - id: options
          type:
            - '@azure/storage-blob.BlobSetTierOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-blob.BlobBatchSetBlobsAccessTierResponse>
        description: ''
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlobBatchClient.setBlobsAccessTier'
    name: >-
      setBlobsAccessTier(string[], StorageSharedKeyCredential |
      AnonymousCredential | TokenCredential, AccessTier, BlobSetTierOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Create multiple set tier operations to set the tier on a blob.

      The operation is allowed on a page blob in a premium

      storage account and on a block blob in a blob storage account (locally
      redundant

      storage only). A premium page blob's tier determines the allowed size,
      IOPS,

      and bandwidth of the blob. A block blob's tier determines Hot/Cool/Archive

      storage type. This operation does not update the blob's ETag.

      See [set blob tier
      details](https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-tier).

      The operation(subrequest) will be authenticated and authorized

      with specified credential.See [blob batch authorization
      details](https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch#authorization).
    syntax:
      content: >-
        function setBlobsAccessTier(urls: string[], credential:
        StorageSharedKeyCredential | AnonymousCredential | TokenCredential,
        tier: AccessTier, options?: BlobSetTierOptions)
      parameters:
        - id: urls
          type:
            - 'string[]'
          description: The urls of the blob resource to delete.
        - id: credential
          type:
            - >-
              @azure/storage-blob.StorageSharedKeyCredential |
              @azure/storage-blob.AnonymousCredential | TokenCredential
          description: >-
            Such as AnonymousCredential, StorageSharedKeyCredential or any
            credential from the @azure/identity package to authenticate requests
            to the service. You can also provide an object that implements the
            TokenCredential interface. If not specified, AnonymousCredential is
            used.
        - id: tier
          type:
            - '@azure/storage-blob.AccessTier'
          description: ''
        - id: options
          type:
            - '@azure/storage-blob.BlobSetTierOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-blob.BlobBatchSetBlobsAccessTierResponse>
        description: ''
    package: '@azure/storage-blob'
  - uid: '@azure/storage-blob.BlobBatchClient.submitBatch'
    name: 'submitBatch(BlobBatch, BlobBatchSubmitBatchOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Submit batch request which consists of multiple subrequests.
      Get `blobBatchClient` and other details before running the snippets.
      `blobServiceClient.getBlobBatchClient()` gives the `blobBatchClient`

      Example usage:

      ```js
      let batchRequest = new BlobBatch();
      await batchRequest.deleteBlob(urlInString0, credential0);
      await batchRequest.deleteBlob(urlInString1, credential1, {
       deleteSnapshots: "include"
      });
      const batchResp = await blobBatchClient.submitBatch(batchRequest);
      console.log(batchResp.subResponsesSucceededCount);
      ```

      Example using a lease:

      ```js
      let batchRequest = new BlobBatch();
      await batchRequest.setBlobAccessTier(blockBlobClient0, "Cool");
      await batchRequest.setBlobAccessTier(blockBlobClient1, "Cool", {
       conditions: { leaseId: leaseId }
      });
      const batchResp = await blobBatchClient.submitBatch(batchRequest);
      console.log(batchResp.subResponsesSucceededCount);
      ```
    syntax:
      content: >-
        function submitBatch(batchRequest: BlobBatch, options?:
        BlobBatchSubmitBatchOptionalParams)
      parameters:
        - id: batchRequest
          type:
            - '@azure/storage-blob.BlobBatch'
          description: A set of Delete or SetTier operations.
        - id: options
          type:
            - '@azure/storage-blob.BlobBatchSubmitBatchOptionalParams'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-blob.BlobBatchSubmitBatchResponse>
        description: ''
    package: '@azure/storage-blob'
references:
  - uid: >-
      @azure/storage-blob.StorageSharedKeyCredential |
      @azure/storage-blob.AnonymousCredential | TokenCredential
    name: AnonymousCredential | TokenCredential
    spec.typeScript:
      - name: StorageSharedKeyCredential
        fullName: StorageSharedKeyCredential
        uid: '@azure/storage-blob.StorageSharedKeyCredential'
      - name: ' | '
        fullName: ' | '
      - name: AnonymousCredential
        fullName: AnonymousCredential
        uid: '@azure/storage-blob.AnonymousCredential'
      - name: ' | TokenCredential'
        fullName: ' | TokenCredential'
  - uid: '@azure/storage-blob.StoragePipelineOptions'
    name: StoragePipelineOptions
    spec.typeScript:
      - name: StoragePipelineOptions
        fullName: StoragePipelineOptions
        uid: '@azure/storage-blob.StoragePipelineOptions'
  - uid: '@azure/storage-blob.Pipeline'
    name: Pipeline
    spec.typeScript:
      - name: Pipeline
        fullName: Pipeline
        uid: '@azure/storage-blob.Pipeline'
  - uid: '@azure/storage-blob.BlobBatch'
    name: BlobBatch
    spec.typeScript:
      - name: BlobBatch
        fullName: BlobBatch
        uid: '@azure/storage-blob.BlobBatch'
  - uid: '@azure/storage-blob.BlobDeleteOptions'
    name: BlobDeleteOptions
    spec.typeScript:
      - name: BlobDeleteOptions
        fullName: BlobDeleteOptions
        uid: '@azure/storage-blob.BlobDeleteOptions'
  - uid: Promise<@azure/storage-blob.BlobBatchDeleteBlobsResponse>
    name: BlobBatchDeleteBlobsResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: BlobBatchDeleteBlobsResponse
        fullName: BlobBatchDeleteBlobsResponse
        uid: '@azure/storage-blob.BlobBatchDeleteBlobsResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-blob.BlobClient[]'
    name: 'BlobClient[]'
    spec.typeScript:
      - name: BlobClient
        fullName: BlobClient
        uid: '@azure/storage-blob.BlobClient'
      - name: '[]'
        fullName: '[]'
  - uid: '@azure/storage-blob.AccessTier'
    name: AccessTier
    spec.typeScript:
      - name: AccessTier
        fullName: AccessTier
        uid: '@azure/storage-blob.AccessTier'
  - uid: '@azure/storage-blob.BlobSetTierOptions'
    name: BlobSetTierOptions
    spec.typeScript:
      - name: BlobSetTierOptions
        fullName: BlobSetTierOptions
        uid: '@azure/storage-blob.BlobSetTierOptions'
  - uid: Promise<@azure/storage-blob.BlobBatchSetBlobsAccessTierResponse>
    name: BlobBatchSetBlobsAccessTierResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: BlobBatchSetBlobsAccessTierResponse
        fullName: BlobBatchSetBlobsAccessTierResponse
        uid: '@azure/storage-blob.BlobBatchSetBlobsAccessTierResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-blob.BlobBatchSubmitBatchOptionalParams'
    name: BlobBatchSubmitBatchOptionalParams
    spec.typeScript:
      - name: BlobBatchSubmitBatchOptionalParams
        fullName: BlobBatchSubmitBatchOptionalParams
        uid: '@azure/storage-blob.BlobBatchSubmitBatchOptionalParams'
  - uid: Promise<@azure/storage-blob.BlobBatchSubmitBatchResponse>
    name: BlobBatchSubmitBatchResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: BlobBatchSubmitBatchResponse
        fullName: BlobBatchSubmitBatchResponse
        uid: '@azure/storage-blob.BlobBatchSubmitBatchResponse'
      - name: '>'
        fullName: '>'
