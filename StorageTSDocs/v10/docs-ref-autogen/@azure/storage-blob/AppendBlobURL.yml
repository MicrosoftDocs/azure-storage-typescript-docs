### YamlMime:TSType
name: AppendBlobURL
uid: '@azure/storage-blob.AppendBlobURL'
package: '@azure/storage-blob'
summary: AppendBlobURL defines a set of operations applicable to append blobs.
fullName: AppendBlobURL
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: 'AppendBlobURL(string, Pipeline)'
    uid: '@azure/storage-blob.AppendBlobURL.constructor'
    package: '@azure/storage-blob'
    summary: >-
      Creates an instance of AppendBlobURL.

      This method accepts an encoded URL or non-encoded URL pointing to an
      append blob.

      Encoded URL string will NOT be escaped twice, only special characters in
      URL path will be escaped.

      If a blob name includes ? or %, blob name must be encoded in the URL.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'new AppendBlobURL(url: string, pipeline: Pipeline)'
      parameters:
        - id: url
          type: string
          description: |-
            A URL string pointing to Azure Storage append blob, such as
                                "https://myaccount.blob.core.windows.net/mycontainer/appendblob". You can
                                append a SAS if using AnonymousCredential, such as
                                "https://myaccount.blob.core.windows.net/mycontainer/appendblob?sasString".
                                This method accepts an encoded URL or non-encoded URL pointing to a blob.
                                Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.
                                However, if a blob name includes ? or %, blob name must be encoded in the URL.
                                Such as a blob named "my?blob%", the URL should be "https://myaccount.blob.core.windows.net/mycontainer/my%3Fblob%25".
        - id: pipeline
          type: <xref uid="@azure/storage-blob.Pipeline" />
          description: |-
            Call StorageURL.newPipeline() to create a default
                                       pipeline, or provide a customized pipeline.
properties:
  - name: credential
    uid: '@azure/storage-blob.AppendBlobURL.credential'
    package: '@azure/storage-blob'
    summary: Credential used for authentication and authorization.
    fullName: credential
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'credential: Credential'
      return:
        type: <xref uid="@azure/storage-blob.Credential" />
        description: ''
  - name: pipeline
    uid: '@azure/storage-blob.AppendBlobURL.pipeline'
    package: '@azure/storage-blob'
    summary: Request policy pipeline.
    fullName: pipeline
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'pipeline: Pipeline'
      return:
        type: <xref uid="@azure/storage-blob.Pipeline" />
        description: ''
  - name: url
    uid: '@azure/storage-blob.AppendBlobURL.url'
    package: '@azure/storage-blob'
    summary: Encoded URL string value.
    fullName: url
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'url: string'
      return:
        type: string
        description: ''
methods:
  - name: 'abortCopyFromURL(Aborter, string, IBlobAbortCopyFromURLOptions)'
    uid: '@azure/storage-blob.AppendBlobURL.abortCopyFromURL'
    package: '@azure/storage-blob'
    summary: >-
      Aborts a pending asynchronous Copy Blob operation, and leaves a
      destination blob with zero

      length and full metadata. Version 2012-02-12 and newer.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function abortCopyFromURL(aborter: Aborter, copyId: string, options?:
        IBlobAbortCopyFromURLOptions)
      parameters:
        - id: aborter
          type: <xref uid="@azure/storage-blob.Aborter" />
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: copyId
          type: string
          description: ''
        - id: options
          type: <xref uid="@azure/storage-blob.IBlobAbortCopyFromURLOptions" />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.BlobAbortCopyFromURLResponse" />&gt;
        description: ''
  - name: 'acquireLease(Aborter, string, number, IBlobAcquireLeaseOptions)'
    uid: '@azure/storage-blob.AppendBlobURL.acquireLease'
    package: '@azure/storage-blob'
    summary: |-
      Establishes and manages a lock on a blob for write and delete operations.
      The lock duration can be 15 to 60 seconds, or can be infinite.
      In versions prior to 2012-02-12, the lock duration is 60 seconds.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function acquireLease(aborter: Aborter, proposedLeaseId: string,
        duration: number, options?: IBlobAcquireLeaseOptions)
      parameters:
        - id: aborter
          type: <xref uid="@azure/storage-blob.Aborter" />
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: proposedLeaseId
          type: string
          description: Can be specified in any valid GUID string format
        - id: duration
          type: number
          description: 'The lock duration can be 15 to 60 seconds, or can be infinite'
        - id: options
          type: <xref uid="@azure/storage-blob.IBlobAcquireLeaseOptions" />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.BlobAcquireLeaseResponse" />&gt;
        description: ''
  - name: >-
      appendBlock(Aborter, HttpRequestBody, number,
      IAppendBlobAppendBlockOptions)
    uid: '@azure/storage-blob.AppendBlobURL.appendBlock'
    package: '@azure/storage-blob'
    summary: Commits a new block of data to the end of the existing append blob.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function appendBlock(aborter: Aborter, body: HttpRequestBody,
        contentLength: number, options?: IAppendBlobAppendBlockOptions)
      parameters:
        - id: aborter
          type: <xref uid="@azure/storage-blob.Aborter" />
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: body
          type: HttpRequestBody
          description: ''
        - id: contentLength
          type: number
          description: Length of the body in bytes
        - id: options
          type: <xref uid="@azure/storage-blob.IAppendBlobAppendBlockOptions" />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.AppendBlobAppendBlockResponse" />&gt;
        description: ''
  - name: >-
      appendBlockFromURL(Aborter, string, number, number,
      IAppendBlobAppendBlockFromURLOptions)
    uid: '@azure/storage-blob.AppendBlobURL.appendBlockFromURL'
    package: '@azure/storage-blob'
    summary: >-
      The Append Block operation commits a new block of data to the end of an
      existing append blob

      where the contents are read from a source url.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function appendBlockFromURL(aborter: Aborter, sourceURL: string,
        sourceOffset: number, count: number, options?:
        IAppendBlobAppendBlockFromURLOptions)
      parameters:
        - id: aborter
          type: <xref uid="@azure/storage-blob.Aborter" />
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: sourceURL
          type: string
          description: |2-

                            The url to the blob that will be the source of the copy. A source blob in the same storage account can
                            be authenticated via Shared Key. However, if the source is a blob in another account, the source blob
                            must either be public or must be authenticated via a shared access signature. If the source blob is
                            public, no authentication is required to perform the operation.
        - id: sourceOffset
          type: number
          description: Offset in source to be appended
        - id: count
          type: number
          description: Number of bytes to be appended as a block
        - id: options
          type: >-
            <xref uid="@azure/storage-blob.IAppendBlobAppendBlockFromURLOptions"
            />
          description: ''
      return:
        type: >-
          Promise&lt;<xref uid="Models.AppendBlobAppendBlockFromUrlResponse"
          />&gt;
        description: ''
  - name: 'breakLease(Aborter, undefined | number, IBlobBreakLeaseOptions)'
    uid: '@azure/storage-blob.AppendBlobURL.breakLease'
    package: '@azure/storage-blob'
    summary: |-
      To end the lease but ensure that another client cannot acquire a new lease
      until the current lease period has expired.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function breakLease(aborter: Aborter, breakPeriod?: undefined | number,
        options?: IBlobBreakLeaseOptions)
      parameters:
        - id: aborter
          type: <xref uid="@azure/storage-blob.Aborter" />
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: breakPeriod
          type: undefined | number
          description: ''
        - id: options
          type: <xref uid="@azure/storage-blob.IBlobBreakLeaseOptions" />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.BlobBreakLeaseResponse" />&gt;
        description: ''
  - name: 'changeLease(Aborter, string, string, IBlobChangeLeaseOptions)'
    uid: '@azure/storage-blob.AppendBlobURL.changeLease'
    package: '@azure/storage-blob'
    summary: To change the ID of an existing lease.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function changeLease(aborter: Aborter, leaseId: string, proposedLeaseId:
        string, options?: IBlobChangeLeaseOptions)
      parameters:
        - id: aborter
          type: <xref uid="@azure/storage-blob.Aborter" />
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: leaseId
          type: string
          description: ''
        - id: proposedLeaseId
          type: string
          description: ''
        - id: options
          type: <xref uid="@azure/storage-blob.IBlobChangeLeaseOptions" />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.BlobChangeLeaseResponse" />&gt;
        description: ''
  - name: 'create(Aborter, IAppendBlobCreateOptions)'
    uid: '@azure/storage-blob.AppendBlobURL.create'
    package: '@azure/storage-blob'
    summary: >-
      Creates a 0-length append blob. Call AppendBlock to append data to an
      append blob.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function create(aborter: Aborter, options?: IAppendBlobCreateOptions)'
      parameters:
        - id: aborter
          type: <xref uid="@azure/storage-blob.Aborter" />
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: options
          type: <xref uid="@azure/storage-blob.IAppendBlobCreateOptions" />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.AppendBlobCreateResponse" />&gt;
        description: ''
  - name: 'createSnapshot(Aborter, IBlobCreateSnapshotOptions)'
    uid: '@azure/storage-blob.AppendBlobURL.createSnapshot'
    package: '@azure/storage-blob'
    summary: Creates a read-only snapshot of a blob.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createSnapshot(aborter: Aborter, options?:
        IBlobCreateSnapshotOptions)
      parameters:
        - id: aborter
          type: <xref uid="@azure/storage-blob.Aborter" />
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: options
          type: <xref uid="@azure/storage-blob.IBlobCreateSnapshotOptions" />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.BlobCreateSnapshotResponse" />&gt;
        description: ''
  - name: 'delete(Aborter, IBlobDeleteOptions)'
    uid: '@azure/storage-blob.AppendBlobURL.delete'
    package: '@azure/storage-blob'
    summary: >-
      Marks the specified blob or snapshot for deletion. The blob is later
      deleted

      during garbage collection. Note that in order to delete a blob, you must
      delete

      all of its snapshots. You can delete both at the same time with the Delete

      Blob operation.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function delete(aborter: Aborter, options?: IBlobDeleteOptions)'
      parameters:
        - id: aborter
          type: <xref uid="@azure/storage-blob.Aborter" />
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: options
          type: <xref uid="@azure/storage-blob.IBlobDeleteOptions" />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.BlobDeleteResponse" />&gt;
        description: ''
  - name: 'download(Aborter, number, undefined | number, IBlobDownloadOptions)'
    uid: '@azure/storage-blob.AppendBlobURL.download'
    package: '@azure/storage-blob'
    summary: >
      Reads or downloads a blob from the system, including its metadata and
      properties.

      You can also call Get Blob to read a snapshot.

      * In Node.js, data returns in a Readable stream readableStreamBody

      * In browsers, data returns in a promise blobBody
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function download(aborter: Aborter, offset: number, count?: undefined |
        number, options?: IBlobDownloadOptions)
      parameters:
        - id: aborter
          type: <xref uid="@azure/storage-blob.Aborter" />
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: offset
          type: number
          description: 'From which position of the blob to download, >= 0'
        - id: count
          type: undefined | number
          description: ''
        - id: options
          type: <xref uid="@azure/storage-blob.IBlobDownloadOptions" />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.BlobDownloadResponse" />&gt;
        description: ''
  - name: fromBlobURL(BlobURL)
    uid: '@azure/storage-blob.AppendBlobURL.fromBlobURL'
    package: '@azure/storage-blob'
    summary: Creates a AppendBlobURL object from BlobURL instance.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static function fromBlobURL(blobURL: BlobURL)'
      parameters:
        - id: blobURL
          type: <xref uid="@azure/storage-blob.BlobURL" />
          description: ''
      return:
        type: <xref uid="@azure/storage-blob.AppendBlobURL" />
        description: ''
  - name: 'fromContainerURL(ContainerURL, string)'
    uid: '@azure/storage-blob.AppendBlobURL.fromContainerURL'
    package: '@azure/storage-blob'
    summary: Creates a AppendBlobURL object from ContainerURL instance.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function fromContainerURL(containerURL: ContainerURL, blobName:
        string)
      parameters:
        - id: containerURL
          type: <xref uid="@azure/storage-blob.ContainerURL" />
          description: A ContainerURL object
        - id: blobName
          type: string
          description: An append blob name
      return:
        type: <xref uid="@azure/storage-blob.AppendBlobURL" />
        description: ''
  - name: 'getProperties(Aborter, IBlobGetPropertiesOptions)'
    uid: '@azure/storage-blob.AppendBlobURL.getProperties'
    package: '@azure/storage-blob'
    summary: >-
      Returns all user-defined metadata, standard HTTP properties, and system
      properties

      for the blob. It does not return the content of the blob.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getProperties(aborter: Aborter, options?:
        IBlobGetPropertiesOptions)
      parameters:
        - id: aborter
          type: <xref uid="@azure/storage-blob.Aborter" />
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: options
          type: <xref uid="@azure/storage-blob.IBlobGetPropertiesOptions" />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.BlobGetPropertiesResponse" />&gt;
        description: ''
  - name: 'newPipeline(Credential, INewPipelineOptions)'
    uid: '@azure/storage-blob.AppendBlobURL.newPipeline'
    package: '@azure/storage-blob'
    summary: >-
      A static method used to create a new Pipeline object with Credential
      provided.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function newPipeline(credential: Credential, pipelineOptions?:
        INewPipelineOptions)
      parameters:
        - id: credential
          type: <xref uid="@azure/storage-blob.Credential" />
          description: 'Such as AnonymousCredential, SharedKeyCredential or TokenCredential.'
        - id: pipelineOptions
          type: <xref uid="@azure/storage-blob.INewPipelineOptions" />
          description: ''
      return:
        type: <xref uid="@azure/storage-blob.Pipeline" />
        description: A new Pipeline object.
  - name: 'releaseLease(Aborter, string, IBlobReleaseLeaseOptions)'
    uid: '@azure/storage-blob.AppendBlobURL.releaseLease'
    package: '@azure/storage-blob'
    summary: >-
      To free the lease if it is no longer needed so that another client may
      immediately

      acquire a lease against the blob.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function releaseLease(aborter: Aborter, leaseId: string, options?:
        IBlobReleaseLeaseOptions)
      parameters:
        - id: aborter
          type: <xref uid="@azure/storage-blob.Aborter" />
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: leaseId
          type: string
          description: ''
        - id: options
          type: <xref uid="@azure/storage-blob.IBlobReleaseLeaseOptions" />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.BlobReleaseLeaseResponse" />&gt;
        description: ''
  - name: 'renewLease(Aborter, string, IBlobRenewLeaseOptions)'
    uid: '@azure/storage-blob.AppendBlobURL.renewLease'
    package: '@azure/storage-blob'
    summary: To renew an existing lease.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function renewLease(aborter: Aborter, leaseId: string, options?:
        IBlobRenewLeaseOptions)
      parameters:
        - id: aborter
          type: <xref uid="@azure/storage-blob.Aborter" />
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: leaseId
          type: string
          description: ''
        - id: options
          type: <xref uid="@azure/storage-blob.IBlobRenewLeaseOptions" />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.BlobRenewLeaseResponse" />&gt;
        description: ''
  - name: >-
      setHTTPHeaders(Aborter, Models.BlobHTTPHeaders,
      IBlobSetHTTPHeadersOptions)
    uid: '@azure/storage-blob.AppendBlobURL.setHTTPHeaders'
    package: '@azure/storage-blob'
    summary: >-
      Sets system properties on the blob.

      If no value provided, or no value provided for the specificed blob HTTP
      headers,

      these blob HTTP headers without a value will be cleared.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setHTTPHeaders(aborter: Aborter, blobHTTPHeaders?:
        Models.BlobHTTPHeaders, options?: IBlobSetHTTPHeadersOptions)
      parameters:
        - id: aborter
          type: <xref uid="@azure/storage-blob.Aborter" />
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: blobHTTPHeaders
          type: <xref uid="Models.BlobHTTPHeaders" />
          description: ''
        - id: options
          type: <xref uid="@azure/storage-blob.IBlobSetHTTPHeadersOptions" />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.BlobSetHTTPHeadersResponse" />&gt;
        description: ''
  - name: 'setMetadata(Aborter, IMetadata, IBlobSetMetadataOptions)'
    uid: '@azure/storage-blob.AppendBlobURL.setMetadata'
    package: '@azure/storage-blob'
    summary: >-
      Sets user-defined metadata for the specified blob as one or more
      name-value pairs.

      If no option provided, or no metadata defined in the parameter, the blob

      metadata will be removed.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setMetadata(aborter: Aborter, metadata?: IMetadata, options?:
        IBlobSetMetadataOptions)
      parameters:
        - id: aborter
          type: <xref uid="@azure/storage-blob.Aborter" />
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: metadata
          type: <xref uid="@azure/storage-blob.IMetadata" />
          description: ''
        - id: options
          type: <xref uid="@azure/storage-blob.IBlobSetMetadataOptions" />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.BlobSetMetadataResponse" />&gt;
        description: ''
  - name: >-
      setTier(Aborter, BlockBlobTier | PremiumPageBlobTier | string,
      IBlobSetTierOptions)
    uid: '@azure/storage-blob.AppendBlobURL.setTier'
    package: '@azure/storage-blob'
    summary: >-
      Sets the tier on a blob. The operation is allowed on a page blob in a
      premium

      storage account and on a block blob in a blob storage account (locally
      redundant

      storage only). A premium page blob's tier determines the allowed size,
      IOPS,

      and bandwidth of the blob. A block blob's tier determines Hot/Cool/Archive

      storage type. This operation does not update the blob's ETag.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setTier(aborter: Aborter, tier: BlockBlobTier |
        PremiumPageBlobTier | string, options?: IBlobSetTierOptions)
      parameters:
        - id: aborter
          type: <xref uid="@azure/storage-blob.Aborter" />
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: tier
          type: >-
            <xref uid="@azure/storage-blob.BlockBlobTier" /> | <xref
            uid="@azure/storage-blob.PremiumPageBlobTier" /> | string
          description: ''
        - id: options
          type: <xref uid="@azure/storage-blob.IBlobSetTierOptions" />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.BlobSetTierResponse" />&gt;
        description: ''
  - name: 'startCopyFromURL(Aborter, string, IBlobStartCopyFromURLOptions)'
    uid: '@azure/storage-blob.AppendBlobURL.startCopyFromURL'
    package: '@azure/storage-blob'
    summary: >-
      Asynchronously copies a blob to a destination within the storage account.

      In version 2012-02-12 and later, the source for a Copy Blob operation can
      be

      a committed blob in any Azure storage account.

      Beginning with version 2015-02-21, the source for a Copy Blob operation
      can be

      an Azure file in any Azure storage account.

      Only storage accounts created on or after June 7th, 2012 allow the Copy
      Blob

      operation to copy from another storage account.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function startCopyFromURL(aborter: Aborter, copySource: string,
        options?: IBlobStartCopyFromURLOptions)
      parameters:
        - id: aborter
          type: <xref uid="@azure/storage-blob.Aborter" />
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: copySource
          type: string
          description: ''
        - id: options
          type: <xref uid="@azure/storage-blob.IBlobStartCopyFromURLOptions" />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.BlobStartCopyFromURLResponse" />&gt;
        description: ''
  - name: 'syncCopyFromURL(Aborter, string, IBlobSyncCopyFromURLOptions)'
    uid: '@azure/storage-blob.AppendBlobURL.syncCopyFromURL'
    package: '@azure/storage-blob'
    summary: >-
      The synchronous Copy From URL operation copies a blob or an internet
      resource to a new blob. It will not

      return a response until the copy is complete.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function syncCopyFromURL(aborter: Aborter, copySource: string, options?:
        IBlobSyncCopyFromURLOptions)
      parameters:
        - id: aborter
          type: <xref uid="@azure/storage-blob.Aborter" />
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
        - id: copySource
          type: string
          description: >-
            The source URL to copy from, Shared Access Signature(SAS) maybe
            needed for authentication
        - id: options
          type: <xref uid="@azure/storage-blob.IBlobSyncCopyFromURLOptions" />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.BlobCopyFromURLResponse" />&gt;
        description: ''
  - name: undelete(Aborter)
    uid: '@azure/storage-blob.AppendBlobURL.undelete'
    package: '@azure/storage-blob'
    summary: >-
      Restores the contents and metadata of soft deleted blob and any associated

      soft deleted snapshots. Undelete Blob is supported only on version
      2017-07-29

      or later.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function undelete(aborter: Aborter)'
      parameters:
        - id: aborter
          type: <xref uid="@azure/storage-blob.Aborter" />
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),
                                     goto documents of Aborter for more examples about request cancellation
      return:
        type: Promise&lt;<xref uid="Models.BlobUndeleteResponse" />&gt;
        description: ''
  - name: withPipeline(Pipeline)
    uid: '@azure/storage-blob.AppendBlobURL.withPipeline'
    package: '@azure/storage-blob'
    summary: |-
      Creates a new AppendBlobURL object identical to the source but with the
      specified request policy pipeline.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function withPipeline(pipeline: Pipeline)'
      parameters:
        - id: pipeline
          type: <xref uid="@azure/storage-blob.Pipeline" />
          description: ''
      return:
        type: <xref uid="@azure/storage-blob.AppendBlobURL" />
        description: ''
  - name: withSnapshot(string)
    uid: '@azure/storage-blob.AppendBlobURL.withSnapshot'
    package: '@azure/storage-blob'
    summary: |-
      Creates a new AppendBlobURL object identical to the source but with the
      specified snapshot timestamp.
      Provide "" will remove the snapshot and return a URL to the base blob.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function withSnapshot(snapshot: string)'
      parameters:
        - id: snapshot
          type: string
          description: ''
      return:
        type: <xref uid="@azure/storage-blob.AppendBlobURL" />
        description: ''
extends: <xref uid="@azure/storage-blob.BlobURL" />
