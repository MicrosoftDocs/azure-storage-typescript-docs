### YamlMime:UniversalReference
items:
  - uid: '@azure/storage-queue.Aborter'
    name: Aborter
    fullName: Aborter
    children:
      - '@azure/storage-queue.Aborter.abort'
      - '@azure/storage-queue.Aborter.aborted'
      - '@azure/storage-queue.Aborter.addEventListener'
      - '@azure/storage-queue.Aborter.dispatchEvent'
      - '@azure/storage-queue.Aborter.getValue'
      - '@azure/storage-queue.Aborter.none'
      - '@azure/storage-queue.Aborter.onabort'
      - '@azure/storage-queue.Aborter.removeEventListener'
      - '@azure/storage-queue.Aborter.timeout'
      - '@azure/storage-queue.Aborter.withTimeout'
      - '@azure/storage-queue.Aborter.withValue'
    langs:
      - typeScript
    type: class
    summary: >
      An aborter instance implements AbortSignal interface, can abort HTTP
      requests.

      - Call Aborter.none to create a new Aborter instance without timeout.

      - Call Aborter.timeout() to create a new Aborter instance with timeout.


      For an existing instance aborter:

      - Call aborter.withTimeout() to create and return a child Aborter instance
      with timeout.

      - Call aborter.withValue(key, value) to create and return a child Aborter
      instance with key/value pair.

      - Call aborter.abort() to abort current instance and all children
      instances.

      - Call aborter.getValue(key) to search and get value with corresponding
      key from current aborter to all parents.
    package: '@azure/storage-queue'
  - uid: '@azure/storage-queue.Aborter.abort'
    name: abort()
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Trigger abort event immediately, the onabort and all abort event listeners
      will be triggered.

      Will try to trigger abort event for all children Aborter nodes.

      - If there is a timeout, the timer will be cancelled.

      - If aborted is true, nothing will happen.
    syntax:
      content: function abort()
      parameters: []
    package: '@azure/storage-queue'
  - uid: '@azure/storage-queue.Aborter.aborted'
    name: aborted
    fullName: aborted
    children: []
    langs:
      - typeScript
    type: property
    summary: Status of whether aborted or not.
    syntax:
      content: 'aborted: boolean'
      return:
        type:
          - boolean
        description: ''
    package: '@azure/storage-queue'
  - uid: '@azure/storage-queue.Aborter.addEventListener'
    name: 'addEventListener("abort", (this: AbortSignalLike, ev: any) => any)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Added new "abort" event listener, only support "abort" event.'
    syntax:
      content: >-
        function addEventListener(_type: "abort", listener: (this:
        AbortSignalLike, ev: any) => any)
      parameters:
        - id: _type
          type:
            - '"abort"'
          description: Only support "abort" event
        - id: listener
          type:
            - '(this: AbortSignalLike, ev: any) => any'
          description: ''
    package: '@azure/storage-queue'
  - uid: '@azure/storage-queue.Aborter.dispatchEvent'
    name: dispatchEvent()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function dispatchEvent()
      parameters: []
      return:
        type:
          - boolean
        description: ''
    package: '@azure/storage-queue'
  - uid: '@azure/storage-queue.Aborter.getValue'
    name: getValue(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Find out latest value with corresponding key in the chain of

      [current node] -> [parent node] -> [grand parent node] -> ... -> [root
      node].

      If key is not found, undefined will be returned.
    syntax:
      content: 'function getValue(key: string)'
      parameters:
        - id: key
          type:
            - string
          description: ''
      return:
        type:
          - string | number | boolean | null | undefined
        description: ''
    package: '@azure/storage-queue'
  - uid: '@azure/storage-queue.Aborter.none'
    name: none
    fullName: none
    children: []
    langs:
      - typeScript
    type: property
    summary: Creates a new Aborter instance without timeout.
    syntax:
      content: 'static none: Aborter'
      return:
        type:
          - '@azure/storage-queue.Aborter'
        description: ''
    package: '@azure/storage-queue'
  - uid: '@azure/storage-queue.Aborter.onabort'
    name: onabort
    fullName: onabort
    children: []
    langs:
      - typeScript
    type: property
    summary: onabort event listener.
    syntax:
      content: 'onabort: (this: AbortSignalLike, ev: any) => any | null'
      return:
        type:
          - '(this: AbortSignalLike, ev: any) => any | null'
        description: ''
    package: '@azure/storage-queue'
  - uid: '@azure/storage-queue.Aborter.removeEventListener'
    name: 'removeEventListener("abort", (this: AbortSignalLike, ev: any) => any)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Remove "abort" event listener, only support "abort" event.'
    syntax:
      content: >-
        function removeEventListener(_type: "abort", listener: (this:
        AbortSignalLike, ev: any) => any)
      parameters:
        - id: _type
          type:
            - '"abort"'
          description: Only support "abort" event
        - id: listener
          type:
            - '(this: AbortSignalLike, ev: any) => any'
          description: ''
    package: '@azure/storage-queue'
  - uid: '@azure/storage-queue.Aborter.timeout'
    name: timeout(number)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Creates a new Aborter instance with timeout in milliseconds.
      Set parameter timeout to 0 will not create a timer.
    syntax:
      content: 'static function timeout(timeout: number)'
      parameters:
        - id: timeout
          type:
            - number
          description: ''
      return:
        type:
          - '@azure/storage-queue.Aborter'
        description: ''
    package: '@azure/storage-queue'
  - uid: '@azure/storage-queue.Aborter.withTimeout'
    name: withTimeout(number)
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Create and return a new Aborter instance, which will be appended as a
      child node of current Aborter.

      Current Aborter instance becomes father node of the new instance. When
      current or father Aborter node

      triggers timeout event, all children nodes abort event will be triggered
      too.

      When timeout parameter (in millisecond) is larger than 0, the abort event
      will be triggered when timeout.

      Otherwise, call abort() method to manually abort.
    syntax:
      content: 'function withTimeout(timeout: number)'
      parameters:
        - id: timeout
          type:
            - number
          description: ''
      return:
        type:
          - '@azure/storage-queue.Aborter'
        description: The new Aborter instance created.
    package: '@azure/storage-queue'
  - uid: '@azure/storage-queue.Aborter.withValue'
    name: 'withValue(string, string | number | boolean | null)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Create and return a new Aborter instance, which will be appended as a
      child node of current Aborter.

      Current Aborter instance becomes father node of the new instance. When
      current or father Aborter node

      triggers timeout event, all children nodes abort event will be triggered
      too.

      Immutable key value pair will be set into the new created Aborter
      instance.

      Call getValue() to find out latest value with corresponding key in the
      chain of

      [current node] -> [parent node] and [grand parent node]....
    syntax:
      content: >-
        function withValue(key: string, value?: string | number | boolean |
        null)
      parameters:
        - id: key
          type:
            - string
          description: ''
        - id: value
          type:
            - string | number | boolean | null
          description: ''
          optional: true
      return:
        type:
          - '@azure/storage-queue.Aborter'
        description: ''
    package: '@azure/storage-queue'
references:
  - uid: '@azure/storage-queue.Aborter'
    name: Aborter
    spec.typeScript:
      - name: Aborter
        fullName: Aborter
        uid: '@azure/storage-queue.Aborter'
