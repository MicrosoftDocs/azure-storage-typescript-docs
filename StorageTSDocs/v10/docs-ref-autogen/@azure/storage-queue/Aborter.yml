### YamlMime:TSType
name: Aborter
uid: '@azure/storage-queue.Aborter'
package: '@azure/storage-queue'
summary: >
  An aborter instance implements AbortSignal interface, can abort HTTP requests.

  - Call Aborter.none to create a new Aborter instance without timeout.

  - Call Aborter.timeout() to create a new Aborter instance with timeout.


  For an existing instance aborter:

  - Call aborter.withTimeout() to create and return a child Aborter instance
  with timeout.

  - Call aborter.withValue(key, value) to create and return a child Aborter
  instance with key/value pair.

  - Call aborter.abort() to abort current instance and all children instances.

  - Call aborter.getValue(key) to search and get value with corresponding key
  from current aborter to all parents.
fullName: Aborter
isPreview: false
isDeprecated: false
type: class
properties:
  - name: aborted
    uid: '@azure/storage-queue.Aborter.aborted'
    package: '@azure/storage-queue'
    summary: Status of whether aborted or not.
    fullName: aborted
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'aborted: boolean'
      return:
        type: boolean
        description: ''
  - name: none
    uid: '@azure/storage-queue.Aborter.none'
    package: '@azure/storage-queue'
    summary: Creates a new Aborter instance without timeout.
    fullName: none
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static none: Aborter'
      return:
        type: <xref uid="@azure/storage-queue.Aborter" />
        description: ''
  - name: onabort
    uid: '@azure/storage-queue.Aborter.onabort'
    package: '@azure/storage-queue'
    summary: onabort event listener.
    fullName: onabort
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'onabort: (this: AbortSignalLike, ev: any) => any | null'
      return:
        type: '(this: AbortSignalLike, ev: any) =&gt; any | null'
        description: ''
methods:
  - name: abort()
    uid: '@azure/storage-queue.Aborter.abort'
    package: '@azure/storage-queue'
    summary: >
      Trigger abort event immediately, the onabort and all abort event listeners
      will be triggered.

      Will try to trigger abort event for all children Aborter nodes.

      - If there is a timeout, the timer will be cancelled.

      - If aborted is true, nothing will happen.
    isPreview: false
    isDeprecated: false
    syntax:
      content: function abort()
  - name: 'addEventListener("abort", (this: AbortSignalLike, ev: any) => any)'
    uid: '@azure/storage-queue.Aborter.addEventListener'
    package: '@azure/storage-queue'
    summary: 'Added new "abort" event listener, only support "abort" event.'
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function addEventListener(_type: "abort", listener: (this:
        AbortSignalLike, ev: any) => any)
      parameters:
        - id: _type
          type: '"abort"'
          description: Only support "abort" event
        - id: listener
          type: '(this: AbortSignalLike, ev: any) =&gt; any'
          description: ''
  - name: dispatchEvent()
    uid: '@azure/storage-queue.Aborter.dispatchEvent'
    package: '@azure/storage-queue'
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function dispatchEvent()
      return:
        type: boolean
        description: ''
  - name: getValue(string)
    uid: '@azure/storage-queue.Aborter.getValue'
    package: '@azure/storage-queue'
    summary: >
      Find out latest value with corresponding key in the chain of

      [current node] -> [parent node] -> [grand parent node] -> ... -> [root
      node].

      If key is not found, undefined will be returned.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getValue(key: string)'
      parameters:
        - id: key
          type: string
          description: ''
      return:
        type: string | number | boolean | null | undefined
        description: ''
  - name: 'removeEventListener("abort", (this: AbortSignalLike, ev: any) => any)'
    uid: '@azure/storage-queue.Aborter.removeEventListener'
    package: '@azure/storage-queue'
    summary: 'Remove "abort" event listener, only support "abort" event.'
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function removeEventListener(_type: "abort", listener: (this:
        AbortSignalLike, ev: any) => any)
      parameters:
        - id: _type
          type: '"abort"'
          description: Only support "abort" event
        - id: listener
          type: '(this: AbortSignalLike, ev: any) =&gt; any'
          description: ''
  - name: timeout(number)
    uid: '@azure/storage-queue.Aborter.timeout'
    package: '@azure/storage-queue'
    summary: |-
      Creates a new Aborter instance with timeout in milliseconds.
      Set parameter timeout to 0 will not create a timer.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static function timeout(timeout: number)'
      parameters:
        - id: timeout
          type: number
          description: ''
      return:
        type: <xref uid="@azure/storage-queue.Aborter" />
        description: ''
  - name: withTimeout(number)
    uid: '@azure/storage-queue.Aborter.withTimeout'
    package: '@azure/storage-queue'
    summary: >
      Create and return a new Aborter instance, which will be appended as a
      child node of current Aborter.

      Current Aborter instance becomes father node of the new instance. When
      current or father Aborter node

      triggers timeout event, all children nodes abort event will be triggered
      too.

      When timeout parameter (in millisecond) is larger than 0, the abort event
      will be triggered when timeout.

      Otherwise, call abort() method to manually abort.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function withTimeout(timeout: number)'
      parameters:
        - id: timeout
          type: number
          description: ''
      return:
        type: <xref uid="@azure/storage-queue.Aborter" />
        description: The new Aborter instance created.
  - name: 'withValue(string, string | number | boolean | null)'
    uid: '@azure/storage-queue.Aborter.withValue'
    package: '@azure/storage-queue'
    summary: >
      Create and return a new Aborter instance, which will be appended as a
      child node of current Aborter.

      Current Aborter instance becomes father node of the new instance. When
      current or father Aborter node

      triggers timeout event, all children nodes abort event will be triggered
      too.

      Immutable key value pair will be set into the new created Aborter
      instance.

      Call getValue() to find out latest value with corresponding key in the
      chain of

      [current node] -> [parent node] and [grand parent node]....
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function withValue(key: string, value?: string | number | boolean |
        null)
      parameters:
        - id: key
          type: string
          description: ''
        - id: value
          type: string | number | boolean | null
          description: ''
      return:
        type: <xref uid="@azure/storage-queue.Aborter" />
        description: ''
