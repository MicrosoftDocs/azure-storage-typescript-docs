### YamlMime:TSType
name: Messages
uid: '@azure/storage-queue.Messages'
package: '@azure/storage-queue'
summary: Class representing a Messages.
fullName: Messages
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: Messages(StorageClientContext)
    uid: '@azure/storage-queue.Messages.constructor'
    package: '@azure/storage-queue'
    summary: Create a Messages.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'new Messages(client: StorageClientContext)'
      parameters:
        - id: client
          type: <xref uid="@azure/storage-queue.StorageClientContext" />
          description: |
            Reference to the service client.
methods:
  - name: 'clear(MessagesClearOptionalParams, ServiceCallback<void>)'
    uid: '@azure/storage-queue.Messages.clear_2'
    package: '@azure/storage-queue'
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function clear(options: MessagesClearOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: options
          type: <xref uid="@azure/storage-queue.MessagesClearOptionalParams" />
          description: The optional parameters
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: clear(Models.MessagesClearOptionalParams)
    uid: '@azure/storage-queue.Messages.clear'
    package: '@azure/storage-queue'
    summary: The Clear operation deletes all messages from the specified queue.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function clear(options?: Models.MessagesClearOptionalParams)'
      parameters:
        - id: options
          type: <xref uid="Models.MessagesClearOptionalParams" />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.MessagesClearResponse" />&gt;
        description: Promise<Models.MessagesClearResponse>
  - name: clear(ServiceCallback<void>)
    uid: '@azure/storage-queue.Messages.clear_1'
    package: '@azure/storage-queue'
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function clear(callback: ServiceCallback<void>)'
      parameters:
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: >-
      dequeue(MessagesDequeueOptionalParams,
      ServiceCallback<DequeuedMessageItem[]>)
    uid: '@azure/storage-queue.Messages.dequeue_2'
    package: '@azure/storage-queue'
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function dequeue(options: MessagesDequeueOptionalParams, callback:
        ServiceCallback<DequeuedMessageItem[]>)
      parameters:
        - id: options
          type: <xref uid="@azure/storage-queue.MessagesDequeueOptionalParams" />
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/storage-queue.DequeuedMessageItem" />[]&gt;
          description: |
            The callback
  - name: dequeue(Models.MessagesDequeueOptionalParams)
    uid: '@azure/storage-queue.Messages.dequeue'
    package: '@azure/storage-queue'
    summary: >-
      The Dequeue operation retrieves one or more messages from the front of the
      queue.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function dequeue(options?: Models.MessagesDequeueOptionalParams)'
      parameters:
        - id: options
          type: <xref uid="Models.MessagesDequeueOptionalParams" />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.MessagesDequeueResponse" />&gt;
        description: Promise<Models.MessagesDequeueResponse>
  - name: 'dequeue(ServiceCallback<DequeuedMessageItem[]>)'
    uid: '@azure/storage-queue.Messages.dequeue_1'
    package: '@azure/storage-queue'
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function dequeue(callback: ServiceCallback<DequeuedMessageItem[]>)'
      parameters:
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/storage-queue.DequeuedMessageItem" />[]&gt;
          description: |
            The callback
  - name: >-
      enqueue(QueueMessage, MessagesEnqueueOptionalParams,
      ServiceCallback<EnqueuedMessage[]>)
    uid: '@azure/storage-queue.Messages.enqueue_2'
    package: '@azure/storage-queue'
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function enqueue(queueMessage: QueueMessage, options:
        MessagesEnqueueOptionalParams, callback:
        ServiceCallback<EnqueuedMessage[]>)
      parameters:
        - id: queueMessage
          type: <xref uid="@azure/storage-queue.QueueMessage" />
          description: A Message object which can be stored in a Queue
        - id: options
          type: <xref uid="@azure/storage-queue.MessagesEnqueueOptionalParams" />
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="@azure/storage-queue.EnqueuedMessage"
            />[]&gt;
          description: |
            The callback
  - name: 'enqueue(QueueMessage, Models.MessagesEnqueueOptionalParams)'
    uid: '@azure/storage-queue.Messages.enqueue'
    package: '@azure/storage-queue'
    summary: >-
      The Enqueue operation adds a new message to the back of the message queue.
      A visibility timeout

      can also be specified to make the message invisible until the visibility
      timeout expires. A

      message must be in a format that can be included in an XML request with
      UTF-8 encoding. The

      encoded message can be up to 64 KB in size for versions 2011-08-18 and
      newer, or 8 KB in size

      for previous versions.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function enqueue(queueMessage: QueueMessage, options?:
        Models.MessagesEnqueueOptionalParams)
      parameters:
        - id: queueMessage
          type: <xref uid="@azure/storage-queue.QueueMessage" />
          description: A Message object which can be stored in a Queue
        - id: options
          type: <xref uid="Models.MessagesEnqueueOptionalParams" />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.MessagesEnqueueResponse" />&gt;
        description: Promise<Models.MessagesEnqueueResponse>
  - name: 'enqueue(QueueMessage, ServiceCallback<EnqueuedMessage[]>)'
    uid: '@azure/storage-queue.Messages.enqueue_1'
    package: '@azure/storage-queue'
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function enqueue(queueMessage: QueueMessage, callback:
        ServiceCallback<EnqueuedMessage[]>)
      parameters:
        - id: queueMessage
          type: <xref uid="@azure/storage-queue.QueueMessage" />
          description: A Message object which can be stored in a Queue
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="@azure/storage-queue.EnqueuedMessage"
            />[]&gt;
          description: |
            The callback
  - name: 'peek(MessagesPeekOptionalParams, ServiceCallback<PeekedMessageItem[]>)'
    uid: '@azure/storage-queue.Messages.peek_2'
    package: '@azure/storage-queue'
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function peek(options: MessagesPeekOptionalParams, callback:
        ServiceCallback<PeekedMessageItem[]>)
      parameters:
        - id: options
          type: <xref uid="@azure/storage-queue.MessagesPeekOptionalParams" />
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/storage-queue.PeekedMessageItem" />[]&gt;
          description: |
            The callback
  - name: peek(Models.MessagesPeekOptionalParams)
    uid: '@azure/storage-queue.Messages.peek'
    package: '@azure/storage-queue'
    summary: >-
      The Peek operation retrieves one or more messages from the front of the
      queue, but does not

      alter the visibility of the message.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function peek(options?: Models.MessagesPeekOptionalParams)'
      parameters:
        - id: options
          type: <xref uid="Models.MessagesPeekOptionalParams" />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.MessagesPeekResponse" />&gt;
        description: Promise<Models.MessagesPeekResponse>
  - name: 'peek(ServiceCallback<PeekedMessageItem[]>)'
    uid: '@azure/storage-queue.Messages.peek_1'
    package: '@azure/storage-queue'
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function peek(callback: ServiceCallback<PeekedMessageItem[]>)'
      parameters:
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/storage-queue.PeekedMessageItem" />[]&gt;
          description: |
            The callback
